<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[VMware虚拟机安装macOS]]></title>
    <url>%2Fvmware-macos.html</url>
    <content type="text"><![CDATA[1、下载并安装 VMWare 虚拟机软件【官网下载】2、下载python环境Welcome to Python.org，【Downloads-Windows-Python】找到对应的python版本，没有python环境安装不了unlocker。注：安装时要勾选Add python.exe to PATH3、下载[VMWare Unlocker】，打开任务管理器，服务，停掉VMware开头的几个服务，再以管理员身份运行 win-install4、下载 macOS 14 索诺玛 （Sonoma）的 ISO 系统文件【点击下载】5、创建虚拟机：典型（推荐）- 下一步 - 稍后安装操作系统 - 下一步 - Apple Mac OS - macOS 14 - 下一步 - 名称（自己定义）- 位置（自己定义）- 下一步 - 磁盘大小（自己定义） - 下一步 - 自定义硬件 - 内存和处理器（自己定义，注：处理器点开有个虚拟化引擎，不要勾选任何一个），新CD/DVD（使用iso映像文件，选择你之前下载的iso文件） - 关闭 - 完成6、首先关闭掉vmware软件，打开你上一步定义的位置 -&gt; 打开文件夹找到macOS.vmx文件(macOS是上一步自己定义的名称)，然后选择使用记事本打开，并在底部输入以下内容：1smc.version = &quot;0&quot;注：AMD芯片在更改文件代码的时候记着加以下代码，否则会弹出CPU已禁用的提示，以下代码中间不能空行，不能有任何空格，否则失效，smc.version = “0”是intel芯片可以用的，amd芯片因特殊原因还需要加上下面的CPUid，切记amd安装macOS的时候复制代码的同时不能开启CPU设置中的任何虚拟化以及CPU计数器，否则会报错提示不兼容代码如下：1234567891011121314smc.version = &quot;0&quot;cpuid.0.eax = &quot;0000:0000:0000:0000:0000:0000:0000:1011&quot;cpuid.0.ebx = &quot;0111:0101:0110:1110:0110:0101:0100:0111&quot;cpuid.0.ecx = &quot;0110:1100:0110:0101:0111:0100:0110:1110&quot;cpuid.0.edx = &quot;0100:1001:0110:0101:0110:1110:0110:1001&quot;cpuid.1.eax = &quot;0000:0000:0000:0001:0000:0110:0111:0001&quot;cpuid.1.ebx = &quot;0000:0010:0000:0001:0000:1000:0000:0000&quot;cpuid.1.ecx = &quot;1000:0010:1001:1000:0010:0010:0000:0011&quot;cpuid.1.edx = &quot;0000:0111:1000:1011:1111:1011:1111:1111&quot;smbios.reflectHost = &quot;TRUE&quot;hw.model = &quot;MacBookPro14,3&quot;board-id = &quot;Mac-551B86E5744E2388&quot;keyboard.vusb.enable = &quot;TRUE&quot;mouse.vusb.enable = &quot;TRUE&quot;7、1搜索 ethernet0.virtualDev = &quot;e1000e&quot; 并将 e1000e替换 为 vmxnet3 并保存文件。注：有的默认就是“vmxnet3”就不用替换啦8、打开vmware-开启虚拟机macOS注：如果是amd芯片的可能会弹出此主机支持AMD-V，但AMD-V处于禁用状态，进入BIOS模式，按F7在高级选项的“CPU设置”里找到“SVM”模式，打开即可（AMD处理器虚拟化）。9、重新打开虚拟机macOS，选择语言 - 下一步 - 磁盘工具 - 继续点击左上角VMware SATA Hard - 点击右上方抹掉 - 名称（自己定义例如macOS） - 抹掉 - 完成 -点击左上角红色的圆圈关闭 - 选择第二个安装macOS - 继续 - 选择磁盘 - 继续 - 后面就是进入mac系统了（时间较慢，耐心等待）10、如果出现”获取该虚拟机的所有权失败。主机上的某个应用程序正在使用该虚拟机”在存放macOS的文件中找到后缀为.vmx.lck文件夹，.vmx.lck改为.vmx.lck.bak，重新打开虚拟机，此虚拟机可以正常打开了，如果系统一直重启，那就换个iso镜像文件macOS10.15]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>vmware</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信qq防域名红名]]></title>
    <url>%2Ffanghong.html</url>
    <content type="text"><![CDATA[1.新建静态页面【fh.html】：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;使用浏览器打开&lt;/title&gt; &lt;meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport"&gt; &lt;meta content="yes" name="apple-mobile-web-app-capable"&gt; &lt;meta content="black" name="apple-mobile-web-app-status-bar-style"&gt; &lt;meta name="format-detection" content="telephone=no"&gt; &lt;meta content="false" name="twcClient" id="twcClient"&gt; &lt;meta name="aplus-touch" content="1"&gt; &lt;style&gt; body,html&#123;width:100%;height:100%&#125; *&#123;margin:0;padding:0&#125; body&#123;background-color:#fff&#125; #contens&#123; font-weight: bold; margin:-285px 0px 10px; text-align:center; font-size:20px; margin-bottom: 125px; &#125; .top-bar-guidance&#123;font-size:15px;color:#fff;height:70%;line-height:1.8;padding-left:20px;padding-top:20px;background:url(/img/prompt.webp) center top/contain no-repeat&#125; .top-bar-guidance .icon-safari&#123;width:25px;height:25px;vertical-align:middle;margin:0 .2em&#125; .app-download-btn&#123;display:block;width:214px;height:40px;line-height:40px;margin:18px auto 0 auto;text-align:center;font-size:18px;color:#2466f4;border-radius:20px;border:.5px #2466f4 solid;text-decoration:none&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="top-bar-guidance"&gt; &lt;p&gt;点击右上角使用&lt;img src="/img/safari.png" class="icon-safari"&gt; &lt;span id="openm"&gt;浏览器打开&lt;/span&gt;&lt;/p&gt; &lt;p&gt;可以继续浏览本站哦~&lt;/p&gt; &lt;/div&gt; &lt;div id="contens"&gt; 防止腾讯屏蔽本站链接&lt;br /&gt;&lt;br /&gt; 请使用浏览器或者电脑网页访问&lt;br /&gt;&lt;br /&gt; &lt;/div&gt; &lt;script src="//lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/jquery/2.0.3/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="//lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/clipboard.js/2.0.0/clipboard.min.js"&gt;&lt;/script&gt; &lt;a class="app-download-btn"&gt;点此复制本站网址&lt;/a&gt; &lt;script type="text/javascript"&gt; // 是微信内部webView if (is_weixn() || is_qq()) &#123; &#125;else&#123; window.location.href = document.location.origin; &#125; // 是微信浏览器 function is_weixn() &#123; var ua = navigator.userAgent.toLowerCase(); if (ua.match(/MicroMessenger/i) == "micromessenger") &#123; return true; &#125; else &#123; return false; &#125; &#125; function is_qq()&#123; var sUserAgent =navigator.userAgent.toLowerCase(); if( sUserAgent.match(/QQ/i) == 'qq')&#123; return true &#125;else&#123; return false &#125; &#125; // 复制链接 var clipboard = new ClipboardJS(".app-download-btn",&#123; text : function()&#123; //寻找被激活的那个div pre元素,同时获取它下面的内容 return window.location.href; &#125; &#125;); clipboard.on('success',function(e)&#123; alert("已复制到粘贴板！"); // console.log(e); &#125;); clipboard.on('error',function(e)&#123; alert(e); // console.log(e); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;2.引入js：123456789101112131415161718192021// 是微信内部webView if (is_weixn() || is_qq()) &#123; window.location.href="/fh"; &#125; // 是微信浏览器 function is_weixn() &#123; var ua = navigator.userAgent.toLowerCase(); if (ua.match(/MicroMessenger/i) == "micromessenger") &#123; return true; &#125; else &#123; return false; &#125; &#125; function is_qq()&#123; var sUserAgent =navigator.userAgent.toLowerCase(); if( sUserAgent.match(/QQ/i) == 'qq')&#123; return true &#125;else&#123; return false &#125; &#125;3.引入的图片]]></content>
  </entry>
  <entry>
    <title><![CDATA[图床介绍]]></title>
    <url>%2Fimg-url.html</url>
    <content type="text"><![CDATA[1 免费他人图床这里指的是别人搭建好的图床，好多热心人搭建好了图床共享出来供我们使用，但是需要注意的是，99%的都会跑路，这里分享一些比较稳定速度又快的图床。特点：这类大佬搭建好的图床一般都是用的Chevereto，还有些用的imgurl，Chevereto的特点是大部分都需要注册，图片会返回给你丰富的链接格式（大部分都是默认反回图床内缩略地址，博客使用请选择直接源文件地址或者Markdown格式），基本上都会在首页放自己收录了多少图片，并且注册用户能看到自己上传过的图片，支持API。imgurl特点是会返回给你丰富的链接格式。请注意，这类图床都是严格鉴黄的！这里插一个别的大佬做的图床导航页，里面都是收录的别人搭建好的图床：http://imgdh.com/ （类似smms这种稳定并且图量大但是速度慢的图床我就不推荐了）下面是这类图床的推荐比较推荐路过，img.tg，hello，聚合图床，鸡霸1.1 路过图床该图床没有cdn，但是稳定，图量很大，收录了大概一千六百万张图，速度不太行，直连国外图片存储机器。测试图片打开速度国内基本在3-4S左右。最大单张支持10 MB地址：https://imgtu.com/1.2 IMG.TG我自己十分喜欢的一个图床，有国内百度云cdn节点加速，4年的老图床了，测试图片打开速度国内基本在1s以内。图片最大单张5MB地址：https://img.tg/1.3 imglochostloc论坛常用的图床，美国it7机房，应该是美国的CN2线路机器，目前托管将近六百万张图，游客最大上传8MB图，注册用户最大上传10MB图，测试图片打开速度国内基本在3-4S左右地址：https://imgloc.com/1.4 鸡霸图床也是hostloc一个大佬做的图床，运营了两年多。速度不错，江苏移动的机器加速，目前托管4万张图，测试图片打开速度国内基本在1-2s，最大上传10MB的图地址：https://img.gejiba.com/1.5 聚合图床这是我比较推荐的一个图床，因为这个图床有丰富的客户端和接口，还可以挂载自己的oss，cos，七牛云等存储，自己有足够的盈利措施去长时间运营，并且免费用户的速度也很快，有国内cdn，必须登陆后上传测试图片打开速度国内基本在1s，免费用户最大上传5MB图地址：https://www.superbed.cn/1.6 笑果图床一个运营两年多的图床，目前托管超过20万张图，全球cdn加速，但是没有国内机器加速，测试图片打开速度国内基本在2-4s，游客最大上传5MB的图，注册用户最大上传10MB图地址：https://imagelol.com/1.7 z4a也是一个比较稳定的图床，最大上传64MB图，cloudflare加速，速度一般，但是图可以比较大，测试图片打开速度国内基本在1-3S，必须注册后才能上传！地址：https://www.z4a.net/1.8 hello图床国内百度云cdn加速，运行一年半左右，必须注册后上传，最大上传20MB的图，测试图片打开速度国内基本在1S以内。地址：https://www.helloimg.com/2 云盘做图床这里呢推荐几个方案，基本都不是直接使用的，但是比较取巧，大家可以试试。2.1 onedrive图床对于个人用户来说，onedrive空间有5G到15G，大家也可以去搞那种5T的账号去做图床，国内访问速度一般，有条件的可以上世纪互联，那个国内速度起飞。onedrive做图床最简单的就是电脑打开图片然后点嵌入，提取链接。麻烦一点的就是用oneindex等程序，提取直链做图床。（oneindex是一个onedrive的目录程序，相当于让你自己的onedrive变成一个所有人都可以访问下载的网站）当然，也有很多云盘都是管理员薅的世纪互联的账号，比如以前的6pan，白熊云盘，我自己现在还在用小麦魔方，这个提取的链接是国内世纪互联的链接，图片打开速度起飞。不过第三方套onedrive这种，需要先访问第三方网站，再转到onedrive，所以世纪互联的速度实际用起来也没想象中那么快，2.2谷歌云盘也是利用oneindex这类软件，提取直链，这里就不放链接了。其余还有学习通，淘宝等云盘做直链，但是需要一定的程序去做静态链接，比较麻烦，有兴趣的可以去百度搜搜。3 云存储做云盘这里指的是oss/cos/七牛云/又拍云这类云存储，这类存储再除购买空间费用后，下行流量也需要钱。阿里的oss自己买的话是9元40G的空间，流量是5毛1G，速度很快，阿里云oss有自己的域名，cos需要自己绑定备案域名，文件上传后回返回文件地址，直接打开就是下载，很方便。并且oss和cos有丰富的第三方插件和软件使用，比如wordpress博客就有这类插件，picgo也有挂载oss和cos的插件，非常好用！3.1 oss配合cf流量免费使用因为国外地区的oss存储，在套上ccloudflare的cdn以后，流量不要钱，所以说我们的开销只是购买oss存储的费用。4 大型网站做图床这里说的是用简书/博客园/小红书/知乎等网站获取图片，这种网站有的有防盗链，有的没有，需要自己去尝试，5 github/coding/gitee图床这个就简单了，在这种代码托管平台，新建存储库，上传图片，然后点开图片，复制链接就行，github在国内速度不行，我们可以使用和github合作的免费cdn JSDelivr加速（小访问量可以使用，大访问量的网站使用图片会404）。同时这类也有很多第三方软件和插件可以配合使用，不过要注意，coding和gitee都是国内的平台，黄色图片就不要上传了。6 IPFS无审计无来源图床ipfs别的特性我们不需要了解，我们需要的是他的分布式存储功能，原理就是ipfs把全世界的ipfs机器都当作一个无数块硬盘，你的资料会加密分块存储在很多个节点上，然后取回的时候通过一个网关加上该文件的加密信息，就能取回，速度很不错，但是好多网关被墙了，这里我们使用cf的网关。所以说基本不用担心速度/容量/和ghs带来的审核问题。下面介绍一个ipfs做图床的项目：https://github.com/jialezi/img2ipfs这个项目作者是反代的被墙了的infura端口，作者在github放的演示页可以直接用，需要注意的是，infura的公共api会帮你固定6个月，固定的意思是在该api的节点机器上固定这个文件，ipfs的规则是，一个文件没被固定的情况下，长时间没人访问就会被删除，所以说利用这种简单易行的ipfs图床，你的图片最少在6个月的时间内访问没问题。下面是作者的ipfs图床https://ipfs.xkx.me/下面是另一个人找到的api端口，可以在github项目里面替换：https://ipfs.staging.infura.org:5001/api/v0/add?pin=true这是另一个人搭建好的图床：https://filecdn.pages.dev/因为cf的网关升级了，所以大家需要复制网址然后浏览一下，复制浏览器变更后的地址，不然速度会慢一丢丢。国内访问速度一般在2-3s，十分好用！7 白嫖大厂图床！这里原理是利用qq和微博等空做图床，因为防盗链等原因，咱们用别人直接做好的就行。其实我更推荐聚合大厂图床，是下面的8.2.下面推荐几个聚合的大厂图床7.1 映画图床（因为主页不能访问，分页还能访问，这里就放分页地址了）：https://pic.onji.cn/toutiao.html7.2 真正的聚合图床（集合了超级多的大厂图床！）https://img.nn.ci/7.3 https://api.xkx.me/tc/7.4 https://img.blueskyxn.com/jd.html下面是图床的github源码。大家可以自己搭建，或者以后api不能用了自己修改api使用。https://github.com/BlueSkyXN/KIENG-FigureBedhttps://github.com/jialezi/imgs8 其余图床8.1 小麦家的其余业务u-file是以前的一个免费项目，现在搞不到账号了，可以看作是又拍云的免费版本，可以去买一个账号，现在是2T存储，2T流量，需要绑定备案域名，很香。他家还有一个类似于文叔叔的东西，叫做小麦云链，免费存储东西，可以选择7天或者一个月，然后返回给你下载链接，也可以当作一个暂时的云盘使用，速度可以参考u-file。https://ftpod.cn/#/包括上面说的小麦魔方也是他家的业务。8.2 聚合大厂图床图仓项目介绍：https://gitee.com/qqqingchen/tucang.cc这个项目是在作者的服务器上上传照片，然后把照片上传到几十个大厂里面，当作图床，然后在读取文件的时候，先访问作者的服务器，然后再从后端几十个大厂里面选择速度快的，这样就不用担心像上面的单个大厂图床一样，被大厂删图或防盗链了，唯一需要担心的就是图仓作者的服务器崩了。。。图仓地址：https://tucang.cc/8.3 unicloud这个就是类似oss的项目，和oss一样的速度，不过稳定性比oss差点，也是需要实名，项目地址我放这里了https://github.com/sddwt/uis这里是搭建教程：https://hostloc.com/thread-811060-1-1.html这是另一个unicloud搭建的教程，很详细：https://www.jingtaiboke.com/unicloud-upload-demo.html压缩工具这里贴上一个无限次数调用tinypng（堪称最好用的压缩工具）的win客户端，导入点确定就会自动压缩替换文件，非常好用，给图床大佬们节约点空间和流量吧，也能加快自己网站图片的打开速度，https://github.com/focusbe/tinyImage图床：国内：速度快：聚合：https://www.superbed.cn/TG：https://imgtg.com/老王：https://img.gejiba.com/hello：https://www.helloimg.com/国外：速度还行：https://www.imgurl.org/路过：https://imgtu.com/笑果：https://imagelol.com/速度慢：https://sm.ms/https://www.z4a.net/]]></content>
      <categories>
        <category>img</category>
      </categories>
      <tags>
        <tag>img</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[国内外静态库比较]]></title>
    <url>%2Fcdn-static.html</url>
    <content type="text"><![CDATA[jsDelivr 由于dns被污染，时不时挂掉，所以放弃了jsDelivr 备选站目前jsDelivr有以下备选站，分别由不同的赞助商提供，目前DNS还没有被污染，使用方法和 cdn.jsdelivr.net 相同https://fastly.jsdelivr.net/ 由fastly提供https://gcore.jsdelivr.net/ 由G-Core Labs提供https://testingcf.jsdelivr.net/ 由CloudFlare提供其实 cdn.jsdelivr.net 就是由上述几家服务的综合，只不过在特定情况只解析某一个特定服务商。至于这三个的速度，请自行去类似boce之类的网站上测试（我这里是fastly最好）。建议有在使用jsDelivr的站长尽快更换一下，不然肯定会有访客访问不了的。国内站点可以使用：https://www.staticfile.org/ – 由七牛云及掘金提供支持https://www.bootcdn.cn/ – 由极兔云联合BootStrap中文网提供https://cdn.bytedance.com/ – 字节跳动提供，内容与cdnjs一致https://npm.elemecdn.com/ – 内容与unpkg一致静态资源托管库 (baomitu.com) – 360前端资源库国外站点使用：https://cdnjs.com/ – 由CloudFlare等提供支持https://unpkg.com/ – 也是CloudFlare提供支持，仅限npm包使用时可以ping一下哪个快用那个国外：unpkg.comunpkg的使用，找哪个静态资源，就在https://unpkg.com/后面写资源的名字，例如https://unpkg.com/jquery，会出来https://unpkg.com/jquery@3.6.0/dist/jquery.js，然后再去掉最后的jquery.js，就可以选择版本了暂时国内：字节跳动，elemecdnelemecdn的使用，通过unpkg找出来的链接，直接把域名unpkg.com改为npm.elemecdn.com即可使用1234567891011121314151617181920212223242526https://npm.elemecdn.com/bootstrap@3.3.7/dist/css/bootstrap.min.css//unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css//lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/font-awesome/4.7.0/css/font-awesome.min.css//unpkg.com/font-awesome@4.7.0/css/font-awesome.min.css//unpkg.com/twikoo@1.5.9/dist/twikoo.all.min.jshttps://npm.elemecdn.com/twikoo@1.5.9/dist/twikoo.all.min.js//lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/valine/1.4.16/Valine.min.jshttps://unpkg.com/valine@1.4.16/dist/Valine.min.js//lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/jquery/2.0.3/jquery.min.jshttps://unpkg.com/jquery@2.1.1/dist/jquery.min.js//lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/social-share.js/1.0.16/css/share.min.csshttps://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/css/share.min.css//lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/social-share.js/1.0.16/js/social-share.min.jshttps://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/js/social-share.min.js//lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/nprogress/0.2.0/nprogress.min.jshttps://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.js//lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/nprogress/0.2.0/nprogress.min.csshttps://cdnjs.cloudflare.com/ajax/libs/nprogress/0.2.0/nprogress.min.css//lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/jquery.pjax/2.0.1/jquery.pjax.min.jshttps://cdnjs.cloudflare.com/ajax/libs/jquery.pjax/2.0.1/jquery.pjax.min.js//lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/aplayer/1.10.1/APlayer.min.csshttps://unpkg.com/aplayer@1.10.1/dist/APlayer.min.css//lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/aplayer/1.10.1/APlayer.min.jshttps://unpkg.com/aplayer@1.10.1/dist/APlayer.min.js//unpkg.com/meting@2.0.1/dist/Meting.min.jshttps://npm.elemecdn.com/meting@2.0.1/dist/Meting.min.js]]></content>
      <categories>
        <category>cdn</category>
      </categories>
      <tags>
        <tag>static</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css头部特效]]></title>
    <url>%2Fcss-1.html</url>
    <content type="text"><![CDATA[本篇文章给大家分享多个使用css实现的炫酷边框动画。有一定的参考价值，有需要的朋友可以参考一下，希望对大家有所帮助。【推荐教程：CSS视频教程 】今天看到这样一个界面，非常有意思：觉得它的风格很独特，尤其是其中一些边框。嘿嘿，所以来一篇边框特辑，看看运用 CSS，可以在边框上整些什么花样。border 属性谈到边框，首先会想到 border，我们最常用的莫过于 solid，dashed，上图中便出现了 dashed。除了最常见的 solid，dashed，CSS border 还支持 none，hidden， dotted， double， groove， ridge， inset， outset 等样式。除去 none，hidden，看看所有原生支持的 border 的样式：基础的就这些，如果希望实现一个其他样式的边框，或者给边框加上动画，那就需要配合一些其他属性，或是脑洞大开。OK，一起来看看一些额外的有意思的边框。边框长度变化先来个比较简单的，实现一个类似这样的边框效果：这里其实是借用了元素的两个伪元素。两个伪元素分别只设置上、左边框，下、右边框，通过 hover 时改变两个伪元素的高宽即可。非常好理解。1div &#123;position: relative;border: 1px solid #03A9F3;&amp;::before,&amp;::after &#123;content: ``&quot;&quot;``;position: absolute;width: 20px;height: 20px;&#125;&amp;::before &#123;top: -5px;left: -5px;border-top: 1px solid ``var``(--borderColor);border-left: 1px solid ``var``(--borderColor);&#125;&amp;::after &#123;right: -5px;bottom: -5px;border-bottom: 1px solid ``var``(--borderColor);border-right: 1px solid ``var``(--borderColor);&#125;&amp;:hover::before,&amp;:hover::after &#123;width: calc(100% + 9px);height: calc(100% + 9px);&#125;&#125;复制代码CodePen Demo – width border animation接下来，会开始加深一些难度。虚线边框动画使用 dashed 关键字，可以方便的创建虚线边框。1div &#123;border: 1px dashed #333;&#125;复制代码当然，我们的目的是让边框能够动起来。使用 dashed 关键字是没有办法的。但是实现虚线的方式在 CSS 中有很多种，譬如渐变就是一种很好的方式：1div &#123;background: linear-gradient(90deg, #333 50%, transparent 0) repeat-x;background-size: 4px 1px;background-position: 0 0;&#125;复制代码看看，使用渐变模拟的虚线如下：好，渐变支持多重渐变，我们把容器的 4 个边都用渐变表示即可：1div &#123;background:linear-gradient(90deg, #333 50%, transparent 0) repeat-x,linear-gradient(90deg, #333 50%, transparent 0) repeat-x,linear-gradient(0deg, #333 50%, transparent 0) repeat-y,linear-gradient(0deg, #333 50%, transparent 0) repeat-y;background-size: 4px 1px, 4px 1px, 1px 4px, 1px 4px;background-position: 0 0, 0 100%, 0 0, 100% 0;&#125;复制代码效果如下：OK，至此，我们的虚线边框动画其实算是完成了一大半了。虽然 border-style: dashed 不支持动画，但是渐变支持呀。我们给上述 div 再加上一个 hover 效果，hover 的时候新增一个 animation 动画，改变元素的 background-position 即可。1div:hover &#123;animation: linearGradientMove .3s infinite linear;&#125;@keyframes linearGradientMove &#123;100% &#123;background-position: 4px 0, -4px 100%, 0 -4px, 100% 4px;&#125;&#125;复制代码OK，看看效果，hover 上去的时候，边框就能动起来，因为整个动画是首尾相连的，无限循环的动画看起来就像是虚线边框在一直运动，这算是一个小小的障眼法或者小技巧：这里还有另外一个小技巧，如果我们希望虚线边框动画是从其他边框，过渡到虚线边框，再行进动画。完全由渐变来模拟也是可以的，如果想节省一些代码，使用 border 会更快一些，譬如这样：1div &#123;border: 1px solid #333;&amp;:hover &#123;border: none;background:linear-gradient(90deg, #333 50%, transparent 0) repeat-x,linear-gradient(90deg, #333 50%, transparent 0) repeat-x,linear-gradient(0deg, #333 50%, transparent 0) repeat-y,linear-gradient(0deg, #333 50%, transparent 0) repeat-y;background-size: 4px 1px, 4px 1px, 1px 4px, 1px 4px;background-position: 0 0, 0 100%, 0 0, 100% 0;&#125;&#125;复制代码由于 border 和 background 在盒子模型上位置的差异，视觉上会有一个很明显的错位的感觉：要想解决这个问题，我们可以把 border 替换成 outline，因为 outline 可以设置 outline-offset。便能完美解决这个问题：1div &#123;outline: 1px solid #333;outline-offset: -1px;&amp;:hover &#123;outline: none;&#125;&#125;复制代码最后看看运用到实际按钮上的效果：上述 Demo 完整代码如下：CodePen Demo – dashed border animation其实由于背景和边框的特殊关系，使用 border 的时候，通过修改 background-position 也是可以解决的，就是比较绕。关于背景和边框的填充关系，可以看这篇文章：条纹边框的多种实现方式渐变的其他妙用利用渐变，不仅仅只是能完成上述的效果。我们继续深挖渐变，利用渐变实现这样一个背景：1div &#123;position: relative;&amp;::after &#123;content: ``&apos;&apos;``;position: absolute;left: -50%;top: -50%;width: 200%;height: 200%;background-repeat: no-repeat;background-size: 50% 50%, 50% 50%;background-position: 0 0, 100% 0, 100% 100%, 0 100%;background-image: linear-gradient(#399953, #399953), linear-gradient(#fbb300, #fbb300), linear-gradient(#d53e33, #d53e33), linear-gradient(#377af5, #377af5);&#125;&#125;复制代码注意，这里运用了元素的伪元素生成的这个图形，并且，宽高都是父元素的 200%，超出则 overflow: hidden。接下来，给它加上旋转：1div &#123;animation: rotate 4s linear infinite;&#125;@keyframes rotate &#123; 100% &#123;transform: rotate(1turn); &#125;&#125;复制代码看看效果：最后，再利用一个伪元素，将中间遮罩起来，一个 Nice 的边框动画就出来了 (动画会出现半透明元素，方便示意看懂原理)：上述 Demo 完整代码如下，这个效果我最早见于这位作者 – Jesse BCodePen Demo – gradient border animation改变渐变的颜色掌握了上述的基本技巧之后，我们可以再对渐变的颜色做一些调整，我们将 4 种颜色变成 1 种颜色：1div::after &#123;content: ``&apos;&apos;``;position: absolute;left: -50%;top: -50%;width: 200%;height: 200%;background-color: #fff;background-repeat: no-repeat;background-size: 50% 50%;background-position: 0 0;background-image: linear-gradient(#399953, #399953);&#125;复制代码得到这样一个图形：同样的，让它旋转一起，一个单色追逐的边框动画就出来了：CodePen Demo – gradient border animation 2Wow，很不错的样子。不过如果是单线条，有个很明显的缺陷，就是边框的末尾是一个小三角而不是垂直的，可能有些场景不适用或者 PM 接受不了。那有没有什么办法能够消除掉这些小三角呢？有的，在下文中我们再介绍一种方法，利用 clip-path ，消除掉这些小三角。conic-gradient 的妙用再介绍 clip-path 之前，先讲讲角向渐变。上述主要用到了的是线性渐变 linear-gradient 。我们使用角向渐变 conic-gradient 其实完全也可以实现一模一样的效果。我们试着使用 conic-gradient 也实现一次，这次换一种暗黑风格。核心代码如下：1.conic &#123;position: relative; &amp;::before &#123;content: ``&apos;&apos;``;position: absolute;left: -50%;top: -50%;width: 200%;height: 200%;background: conic-gradient(transparent, rgba(168, 239, 255, 1), transparent 30%);animation: rotate 4s linear infinite; &#125;&#125;@keyframes rotate &#123; 100% &#123;transform: rotate(1turn); &#125;&#125;复制代码效果图和示意图如下，旋转一个部分角向渐变的图形，中间的部分使用另外一个伪元素进行遮罩，只漏出线条部分即可：CodePen Demo – Rotating border 3clip-path 的妙用又是老朋友 clip-path，有意思的事情它总不会缺席。clip-path 本身是可以进行坐标点的动画的，从一个裁剪形状变换到另外一个裁剪形状。利用这个特点，我们可以巧妙的实现这样一种 border 跟随效果。伪代码如下：1div &#123;position: relative;&amp;::before &#123;content: ``&quot;&quot;``;position: absolute;top: 0;left: 0;right: 0;bottom: 0;border: 2px solid gold;animation: clippath 3s infinite linear;&#125;&#125;@keyframes clippath &#123;0%,100% &#123;clip-path: inset(0 0 95% 0);&#125;25% &#123;clip-path: inset(0 95% 0 0);&#125;50% &#123;clip-path: inset(95% 0 0 0);&#125;75% &#123;clip-path: inset(0 0 0 95%);&#125;&#125;复制代码效果图与示意图一起：CodePen - clip-path border animation这里，因为会裁剪元素，借用伪元素作为背景进行裁剪并动画即可，使用 clip-path 的优点了，切割出来的边框不会产生小三角。同时，这种方法，也是支持圆角 border-radius 的。如果我们把另外一个伪元素也用上，实际实现一个按钮样式，可以得到这样的效果：CodePen - clip-path border animation 2overflow 的妙用下面这个技巧利用 overflow 实现。实现这样一个边框动画：为何说是利用 overflow 实现？贴个示意图：CodePen Demo – 巧用overflow及transform实现线条hover效果两个核心点：我们利用 overflow: hidden，把原本在容器外的一整个元素隐藏了起来利用了 transform-origin，控制了元素的旋转中心发现没，其实几乎大部分的有意思的 CSS 效果，都是运用了类似技巧：简单的说就是，我们看到的动画只是原本现象的一小部分，通过特定的裁剪、透明度的变化、遮罩等，让我们最后只看到了原本现象的一部分。border-image 的妙用利用 border-image，我们也可以实现一些有意思的边框动画。关于 border-image，有一篇非常好的讲解文章 – border-image 的正确用法，本文不对基本定义做过多的讲解。如果我们有这样一张图：便可以利用 border-image-slice 及 border-image-repeat 的特性，得到类似的边框图案：1div &#123;width: 200px;height: 120px;border: 24px solid;border-image: url(image-url);border-image-slice: 32;border-image-repeat: ``round``;&#125;复制代码在这个基础上，可以随便改变元素的高宽，如此便能扩展到任意大小的容器边框中：CodePen Demo – border-image Demo接着，在这篇文章 – How to Animate a SVG with border-image 中，还讲解了一种利用 border-image 的边框动画，非常的酷炫。与上面例子不一样的是，我们只需要让我们的图案，动起来，就是我们需要这样一个背景图（掘金不支持 SVG 动图，原图地址）：那么，我们也就能得到运动的边框图，代码完全一样，但是，边框是运动的：CodePen Demo – Dancing Skull Borderborder-image 使用渐变border-image 除了贴图引用 url 之外，也是可以直接填充颜色或者是渐变的。之前也有一篇关于 border-image 的文章 – 巧妙实现带圆角的渐变边框我们可以利用 border-image + filter + clip-path 实现渐变变换的圆角边框：1.border-image-clip-path &#123;width: 200px;height: 100px;border: 10px solid;border-image: linear-gradient(45deg, gold, deeppink) 1;clip-path: inset(0px ``round` `10px);animation: huerotate 6s infinite linear;filter: hue-rotate(360deg);&#125;@keyframes huerotate &#123;0% &#123;filter: hue-rotate(0deg);&#125;100% &#123;filter: hue-rotate(360deg);&#125;&#125;复制代码CodePen Demo – clip-path、border-image 加 filter 实现圆角渐变边框]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo向上滚动的广告]]></title>
    <url>%2Fhexo-extend-gg.html</url>
    <content type="text"><![CDATA[html1234567&lt;div id=&quot;head-gg&quot;&gt; &lt;div id=&quot;marqueebox&quot;&gt; &lt;div class=&quot;head-gg&quot;&gt;&lt;a href=&quot;/adobe.html&quot;&gt;全家桶合集安装包&lt;/a&gt;&lt;/div&gt; &lt;div class=&quot;head-gg&quot;&gt;&lt;a href=&quot;/adobe_m1.html&quot;&gt;M1原生2022合集安装包&lt;/a&gt;&lt;/div&gt; &lt;div class=&quot;head-gg&quot;&gt;&lt;a href=&quot;/adobe_plugins.html&quot;&gt;插件一键安装合集安装包&lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;css123456789101112131415161718192021222324252627282930313233343536373839404142434445#head-gg max-width: (column-width + gutter-width) * columns + gutter-width height: 40px position: fixed overflow: hidden z-index: 99.head-gg position: relative line-height: 40px background-image:linear-gradient(left,#fcc5e4,#7b05e6 25%,#6befd1 50%,#cee605 75%,#ef5bcf); color:transparent; -webkit-background-clip:text; background-size:200% 100%; -webkit-animation:masked-animation 5s infinite linear; animation:masked-animation 5s infinite linear; -webkit-transition: margin-left .8s; -moz-transition: margin-left .8s; -o-transition: margin-left .8s; font-weight: bold overflow: hidden &amp;:before content: url(/images/bulletin.gif) position: relative top: 5px margin-right: 5px.head-gg a background-image:linear-gradient(left,#fcc5e4,#7b05e6 25%,#6befd1 50%,#cee605 75%,#ef5bcf); color:transparent; -webkit-background-clip:text; background-size:200% 100%; -webkit-animation:masked-animation 5s infinite linear; animation:masked-animation 5s infinite linear; -webkit-transition: margin-left .8s; -moz-transition: margin-left .8s; -o-transition: margin-left .8s; text-decoration: none &amp;:hover color: #fff &amp;:after font: 14px/1em FontAwesome content: &apos;点击直达\f0a5&apos; margin-left: 10px font-weight: boldjs1234567891011121314151617181920212223242526272829303132//滚动广告 function startmarquee(lh, speed, delay) &#123; var p = false; var t; var o = document.getElementById(&quot;marqueebox&quot;); o.innerHTML += o.innerHTML; o.style.marginTop = 0; o.onmouseover = function() &#123; p = true; &#125; o.onmouseout = function() &#123; p = false; &#125; //开始函数 function start() &#123; t = setInterval(scrolling, speed); if (!p) o.style.marginTop = parseInt(o.style.marginTop) - 1 + &quot;px&quot;; &#125; //滚动函数。 function scrolling() &#123; if (parseInt(o.style.marginTop) % lh != 0) &#123; o.style.marginTop = parseInt(o.style.marginTop) - 1 + &quot;px&quot;; if (Math.abs(parseInt(o.style.marginTop)) &gt;= o.scrollHeight / 2) o.style.marginTop = 0; &#125; else &#123; clearInterval(t); setTimeout(start, delay); &#125; &#125; //开始执行 setTimeout(start, delay); &#125; //调用函数实例 startmarquee(40, 1, 5000);]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fontawesome动态旋转图标类（fa-spin&fa-pulse）]]></title>
    <url>%2Ffontawesome.html</url>
    <content type="text"><![CDATA[fa-spin类：将”fa-spinner”这个图标旋转起来，形成一个连续流畅的旋转动画效果。fa-pulse类：将”fa-spinner”这个图标以八步为周期旋转起来，形成一个不太流畅的旋转动画效果。1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;FontAwesome动态旋转图标&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;这是四个用fa-spin类实现的旋转流畅的加载图标&lt;/p&gt; &lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-circle-o-notch fa-spin&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-refresh fa-spin&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-cog fa-spin&quot;&gt;&lt;/i&gt; &lt;p&gt;这是四个用fa-pulse类实现的旋转不太流畅的加载图标&lt;/p&gt; &lt;i class=&quot;fa fa-spinner fa-pulse&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-circle-o-notch fa-pulse&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-refresh fa-pulse&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-cog fa-pulse&quot;&gt;&lt;/i&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>fontawesome</category>
      </categories>
      <tags>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo文章页面的一些实用操作]]></title>
    <url>%2Fhexo-extend-post.html</url>
    <content type="text"><![CDATA[第一步：代码复制功能1.js代码：12345678910111213141516171819202122232425262728293031323334353637383940414243//复制代码 $(&quot;.highlight&quot;).not(&quot;.gist .highlight&quot;).each(function(b, c) &#123; var a = $(&quot;&lt;div&gt;&quot;).addClass(&quot;highlight-wrap&quot;); $(c).after(a); a.append($(&quot;&lt;button&gt;&quot;).addClass(&quot;copy-btn&quot;).append(&quot;复制&quot;).on(&quot;click&quot;, function(k) &#123; var j = $(this).parent().find(&quot;.code&quot;).find(&quot;.line&quot;).map(function(l, m) &#123; return $(m).text() &#125;).toArray().join(&quot;\n&quot;); var f = document.createElement(&quot;textarea&quot;); var i = window.pageYOffset || document.documentElement.scrollTop; f.style.top = i + &quot;px&quot;; f.style.position = &quot;absolute&quot;; f.style.opacity = &quot;0&quot;; f.readOnly = true; f.value = j; document.body.appendChild(f); const h = document.getSelection(); const g = h.rangeCount &gt; 0 ? h.getRangeAt(0) : false; f.select(); f.setSelectionRange(0, j.length); f.readOnly = false; var d = document.execCommand(&quot;copy&quot;); if (d) &#123; $(this).text(&quot;复制成功&quot;) &#125; else &#123; $(this).text(&quot;复制失败&quot;) &#125; f.blur(); $(this).blur(); if (g) &#123; h.removeAllRanges(); h.addRange(g) &#125; &#125;)).on(&quot;mouseleave&quot;, function(f) &#123; var d = $(this).find(&quot;.copy-btn&quot;); setTimeout(function() &#123; d.text(&quot;复制&quot;) &#125;, 300) &#125;).append(c) &#125;);2.css代码：123456789101112131415161718192021222324252627282930313233343536373839/*==================================================== copy-code====================================================*/.copy-btn &#123; display: inline-block; padding: 6px 12px; font-size: 13px; font-weight: 700; line-height: 20px; color: #333; white-space: nowrap; vertical-align: middle; cursor: pointer; background-color: #ebebeb; border: none; user-select: none; outline: 0;&#125;.copy-btn:hover &#123; background-color: #e67e22; color: #fff;&#125;.highlight-wrap .copy-btn &#123; transition: opacity .3s ease-in-out; opacity: 0; padding: 2px 6px; position: absolute; right: 0px; z-index: 1;&#125;.highlight-wrap:hover .copy-btn,.highlight-wrap .copy-btn:focus &#123; opacity: 1;&#125;.highlight-wrap &#123; position: relative;&#125;3.引入即可第二步：文章图片点击放大1.js代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// 文章中图片点击放大 function createImgEventFullScreen() &#123; var imgs = $(".post-body").find("img"); // console.log(imgs); for (var i = 0; i &lt; imgs.length; i++) &#123; // $(imgs[i]).click(createCover(imgs[i])); imgs[i].onclick = function (e) &#123; var src = e.srcElement.currentSrc; var _this = $(this); // console.log(_this); createCover(src,_this); &#125; &#125; function createCover(src,_this) &#123; // console.log(_this); // console.log(src); var cover = $("&lt;div id='outerDiv' style='position:fixed;top:0;left:0;background:rgba(0,0,0,0.7);z-index:5;width:100%;height:100%;display:none;'&gt;&lt;div id='innerDiv' style='position:absolute;'&gt;&lt;img id='bigImg' style='border:5px solid #fff;' src=''/&gt;&lt;/div&gt;&lt;/div&gt;"); $("#outerDiv").remove(); $("body").append(cover); imgShow("#outerDiv", "#innerDiv", "#bigImg", _this,src); &#125; &#125; function imgShow(outerDiv, innerDiv, bigImg, _this,src) &#123; //var src = _this.attr("src"); //获取当前点击的common-img元素中的src属性 $(bigImg).attr("src", src); //设置#bigImg元素的src属性 /*获取当前点击图片的真实大小，并显示弹出层及大图*/ $("&lt;img/&gt;").attr("src", src).on('load',function () &#123; var windowW = $(window).width(); //获取当前窗口宽度 var windowH = $(window).height(); //获取当前窗口高度 var realWidth = this.width; //获取图片真实宽度 var realHeight = this.height; //获取图片真实高度 var imgWidth, imgHeight; var scale = 0.8; //高度缩放尺寸 var scale2 = 0.95; //宽度缩放尺寸 if (realHeight &gt; windowH * scale) &#123; //判断图片高度 imgHeight = windowH * scale; //如大于窗口高度，图片高度进行缩放 imgWidth = imgHeight / realHeight * realWidth; //等比例缩放宽度 if (imgWidth &gt; windowW * scale2) &#123; //如宽度仍大于窗口宽度 imgWidth = windowW * scale2; //再对宽度进行缩放 imgHeight = imgWidth / realWidth * realHeight; //等比例缩放高度 &#125; &#125; else if (realWidth &gt; windowW * scale) &#123; //如图片高度合适，判断图片宽度 imgWidth = windowW * scale2; //如大于窗口宽度，图片宽度进行缩放 imgHeight = imgWidth / realWidth * realHeight; //等比例缩放高度 &#125; else &#123; //如果图片真实高度和宽度都符合要求，高宽不变 imgWidth = realWidth; imgHeight = realHeight; &#125; $(bigImg).css("width", imgWidth); //以最终的宽度对图片缩放 var w = (windowW - imgWidth) / 2; //计算图片与窗口左边距 var h = (windowH - imgHeight) / 2; //计算图片与窗口上边距 $(innerDiv).css(&#123; "top": h, "left": w &#125;); //设置#innerDiv的top和left属性 // console.log('窗口k:'+windowW+'图k:'+imgWidth+'窗口g:'+windowH+'图g:'+imgHeight); $(outerDiv).fadeIn("fast"); //淡入显示#outerDiv &#125;); $(outerDiv).click(function () &#123; //再次点击淡出消失弹出层 $(this).fadeOut("fast"); &#125;); &#125; setTimeout(function () &#123; createImgEventFullScreen(); &#125;, 1000)2.更改js代码中的第二行：12//post-body不同的主题这个class不同，改成你的就行var imgs = $(&quot;.post-body&quot;).find(&quot;img&quot;);3.引入即可第三步：文章图片懒加载1.安装插件1npm install hexo-lazyload-image --save2.项目根目录_config.yml中添加123456lazyload: enable: true onlypost: true # 是否只对文章的图片做懒加载 loadingImg: /images/loading.gif isSPA: true # pjax需要开启这个 preloadRatio: 20 # 距离视窗倍数才加载，默认为13.输入hexo命令查看12hexo cleanhexo s第四步：文章底部加公众号1.主题layout\_partial文件夹下新建wechat-subscriber.ejs，加入代码：1234567891011&lt;div&gt; &lt;div&gt; &lt;div style=&quot;margin-top:35px;text-align:center;&quot;&gt; ------ &lt;span class=&quot;fa fa-heart&quot;&gt;&lt;/span&gt; 扫码&lt;b&gt; 免费 &lt;/b&gt;获取资料 ------ &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;text-align: center;margin-bottom:35px;&quot;&gt; &lt;img src=&quot;&lt;%= url_for(theme.wechat_subscriber.qcode) %&gt;&quot; title=&quot;微信公众号&quot; style=&quot;width: 200px&quot;/&gt; &lt;div&gt;&lt;%= theme.wechat_subscriber.description %&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;2.主题配置文件_config.yml中添加12345# Wechat Subscriberwechat_subscriber: enable: true qcode: /img/wechat.jpg description: 微信扫一扫，关注不迷路3.找到文章底部文件例：post.ejs，加入123&lt;% if (theme.wechat_subscriber.enable)&#123; %&gt; &lt;%- partial(&apos;_partial/wechat-subscriber&apos;) %&gt; &lt;% &#125; %&gt;第五步：底部添加分享1.主题layout\_partial文件夹下新建socialshare.ejs，加入代码：123&lt;script src=&quot;//lib.baomitu.com/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;//cdn.bootcdn.net/ajax/libs/social-share.js/1.0.16/css/share.min.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;script src=&quot;//cdn.bootcdn.net/ajax/libs/social-share.js/1.0.16/js/jquery.share.min.js&quot;&gt;&lt;/script&gt;2.主题配置文件_config.yml中添加123# 分享social_share: enable: true3.找到文章底部文件例：post.ejs，加入1234&lt;% if (theme.social_share.enable)&#123; %&gt; &lt;%- partial(&apos;_partial/socialshare&apos;) %&gt; &lt;div class=&quot;social-share&quot; data-sites=&quot;wechat,qq,weibo,douban,qzone,linkedin,diandian,facebook,twitter,google&quot; style=&quot;float: right;margin-top: 10px;&quot;&gt;&lt;/div&gt;&lt;% &#125; %&gt;第六步：评论系统之前一直使用的Valine，自从发现twikoo后就感觉要换了，twikoo界面舒服，功能人性化1.主题layout\_partial文件夹下新建twikoo.ejs，加入代码：12345678910111213141516&lt;div id=&quot;tcomment&quot; class=&quot;twikoo&quot;&gt;&lt;/div&gt;&lt;%- js(&apos;/js/twikoo.all.min.js&apos;) %&gt;&lt;script&gt; twikoo.init(&#123; envId: &apos;&lt;%= theme.twikoo.envId %&gt;&apos;, // 腾讯云环境填 envId；Vercel 环境填地址（https://xxx.vercel.app） el: &apos;#tcomment&apos;, // 容器元素 region: &apos;&lt;%= theme.twikoo.region %&gt;&apos;, // 环境地域，默认为 ap-shanghai，腾讯云环境填 ap-shanghai 或 ap-guangzhou；Vercel 环境不填 path: location.pathname, // 用于区分不同文章的自定义 js 路径，如果您的文章路径不是 location.pathname，需传此参数 lang: &apos;&lt;%= config.language %&gt;&apos;.toLowerCase(), // 用于手动设定评论区语言，支持的语言列表 https://github.com/imaegoo/twikoo/blob/main/src/js/utils/i18n/index.js &#125;)&lt;/script&gt;&lt;style&gt;.tk-footer[data-v-c0af544c] &#123; display: none;&#125;&lt;/style&gt;2.主题配置文件_config.yml中添加123456789## Twikoo评论twikoo: enable: true envId: # 只需要填写这一个参数就可以 region: # vercel部署不用填写 ## twikoo评论自带文章浏览统计,需要开启twikoo评论twikoo_counter: page: true3.找到文章底部文件例：post.ejs，加入12345&lt;% if (theme.twikoo.enable)&#123; %&gt;&lt;div id=&quot;comments&quot;&gt; &lt;%- partial(&apos;_partial/twikoo&apos;) %&gt;&lt;/div&gt;&lt;% &#125; %&gt;4.文章统计：找到文章标题下方，加入123456&lt;% if(theme.twikoo_counter.page) &#123;%&gt; &lt;span class=&quot;fa-wrap&quot;&gt; &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; &lt;span id=&quot;twikoo_visitors&quot;&gt;&lt;/span&gt; &lt;/span&gt; &lt;% &#125; %&gt;5.获取参数使用免费的Vercel 部署[ 建议 ] 适用于想要免费部署的用户，在中国大陆访问速度较慢。6.在评论框下面有个设置按钮，点击，自己设置后台密码，进去自行配置，里面有个输入“暗号”来隐藏这个按钮，上传图片功能需要你去配置一下图床的token第七步：文章置顶1.打开博客目录，打开博客目录下的“node_modules\hexo-generator-index\lib”目录，其中的“generator.js”文件就是我们所要修改的文件。实现该功能需要在const posts = locals.posts.sort(config.index_generator.order_by);代码下添加一下内容：123456789101112131415posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章都有top，top大的在前 if(a.top == b.top) return b.date - a.date; // 若top值一样，最新的文章在前面 else return b.top - a.top; // top大的在前面 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面 return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; //都没有top标签，最新的文章在前面 &#125;);去掉这一行：1sort(posts.data, (a, b) =&gt; (b.sticky || 0) - (a.sticky || 0));修改后的代码：1234567891011121314151617181920212223242526272829303132333435363738&apos;use strict&apos;;const pagination = require(&apos;hexo-pagination&apos;);const &#123; sort &#125; = require(&apos;timsort&apos;);module.exports = function(locals) &#123; const config = this.config; const posts = locals.posts.sort(config.index_generator.order_by); posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章都有top，top大的在前 if(a.top == b.top) return b.date - a.date; // 若top值一样，最新的文章在前面 else return b.top - a.top; // top大的在前面 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面 return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; //都没有top标签，最新的文章在前面 &#125;); const paginationDir = config.pagination_dir || &apos;page&apos;; const path = config.index_generator.path || &apos;&apos;; return pagination(path, posts, &#123; perPage: config.index_generator.per_page, layout: [&apos;index&apos;, &apos;archive&apos;], format: paginationDir + &apos;/%d/&apos;, data: &#123; __index: true &#125; &#125;);&#125;;使用时只需要在文章md文件头部加入top属性（top: 1）即可，top越大文章越靠前。2.添加置顶标志在你需要的位置添加如下代码：123&lt;% if (post.top)&#123; %&gt; 置顶&lt;% &#125; %&gt;样式自己去添加OVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo相关推荐文章]]></title>
    <url>%2Fhexo-extend-related.html</url>
    <content type="text"><![CDATA[方法一：手动添加代码1.主题文件夹scripts中新建文件related_post.js，填入以下代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465hexo.extend.helper.register(&apos;related_posts&apos;, function(currentPost, allPosts)&#123; var relatedPosts = []; currentPost.tags.forEach(function (tag) &#123; allPosts.forEach(function (post) &#123; if (isTagRelated(tag.name, post.tags)) &#123; var relatedPost = &#123; title: post.title, path: post.path, weight: 1 &#125;; var index = findItem(relatedPosts, &apos;path&apos;, post.path); if (index != -1) &#123; relatedPosts[index].weight += 1; &#125; else&#123; if (currentPost.path != post.path) &#123; relatedPosts.push(relatedPost); &#125;; &#125;; &#125;; &#125;); &#125;); if (relatedPosts.length == 0) &#123;return &apos;&apos;&#125;; var result = &apos;&lt;h3&gt;相关文章：&lt;/h3&gt;&lt;ul class=&quot;related-posts&quot;&gt;&apos;; relatedPosts = relatedPosts.sort(compare(&apos;weight&apos;)); for (var i = 0; i &lt; Math.min(relatedPosts.length, 10); i++) &#123; result += &apos;&lt;li&gt;&lt;a href=&quot;/&apos; + relatedPosts[i].path + &apos;&quot;&gt;&apos; + relatedPosts[i].title + &apos;&lt;/a&gt;&lt;/li&gt;&apos;; &#125;; result += &apos;&lt;/ul&gt;&apos;; // console.log(relatedPosts); return result;&#125;);function isTagRelated (tagName, TBDtags) &#123; var result = false; TBDtags.forEach(function (tag) &#123; if (tagName == tag.name) &#123; result = true; &#125;; &#125;) return result;&#125;function findItem (arrayToSearch, attr, val) &#123; for (var i = 0; i &lt; arrayToSearch.length; i++) &#123; if (arrayToSearch[i][attr] == val) &#123; return i &#125;; &#125;; return -1;&#125;function compare (attr) &#123; return function (a, b) &#123; var val1 = a[attr]; var val2 = b[attr]; return val2 - val1; &#125;&#125;2.主题文件夹layout中的post.ejs文件，自己找个地方添加，如下代码：1234&lt;% if (theme.related.enable)&#123; %&gt; //注意：下面传入的page，有的主题是传入post &lt;%- related_posts(page, site.posts) %&gt;&lt;% &#125; %&gt;3.主题配置文件_config.yml，添加如下代码123# 相关文章related: enable: true方法二：使用插件1.安装插件1npm install hexo-related-popular-posts --save2.主题文件夹layout中的post.ejs文件，自己找个地方添加，如下代码：123&lt;%- popular_posts_json(&#123; maxCount: 5 , ulClass: &apos;popular-posts&apos; , PPMixingRate: 0.0 , isImage: true&#125; , post ) %&gt;3.如果需要详细配置看这里：More Settings · tea3/hexo-related-popular-posts Wiki (github.com)4.注意事项：报错的话，先hexo clean，再去hexo s查看。OVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo站点的蜘蛛抓取seo统计与分析]]></title>
    <url>%2Fhexo-extend-seo.html</url>
    <content type="text"><![CDATA[第一步：抓取1.查站点是否被收录，打开百度搜索：1site:你的域名2.百度自动推送，将以下代码放入中12345678910111213&lt;script&gt;(function() &#123; var bp = document.createElement(&apos;script&apos;); var curProtocol = window.location.protocol.split(&apos;:&apos;)[0]; if (curProtocol === &apos;https&apos;) &#123; bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;; &#125; else &#123; bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;; &#125; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(bp, s);&#125;)();&lt;/script&gt;3.主动推送打开百度搜索资源平台_共创共享鲜活搜索 (baidu.com)登录后，点击用户中心-站点管理-添加网站-验证网站（三种方式，选择一种方式进行验证）点击左边栏-资源提交中的普通收录通过百度的API推送安装hexo-baidu-url-submit插件1npm install hexo-baidu-url-submit --save配置根目录_config.yml文件123456789101112131415# URLurl: https://域名 ## 在百度站长平台中注册的域名permalink: :title.htmlbaidu_url_submit: count: 3 ## 比如3，代表提交最新的三个链接 host: 你的域名 ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， API提交下面一串代码中的token! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里deploy: - type: git repo: 仓库地址 branch: master - type: baidu_url_submitter提交sitemap安装插件，分别用下面两个命令来安装百度抓取和其他抓取平台的插件12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save在根目录的_config.yml中添加如下代码12345678Plugins: - hexo-generator-baidu-sitemap - hexo-generator-sitemapbaidusitemap: path: baidusitemap.xmlsitemap: path: sitemap.xml然后推送生成sitemap，命令如下123hexo cleanhexo ghexo d生成地址：https://域名/baidusitemap.xml把这个地址填入百度平台sitemap下面的框中，点击提交，OK完成手动提交手动输入你需要百度抓取的页面地址即可第二步：谷歌sitemap谷歌操作比较简单，就是向Google站长工具提交sitemap登录Google账号，添加了站点验证通过后，选择站点，之后在抓取——站点地图——添加/测试站点地图第三步：百度统计1.百度统计打开百度统计，登录-使用设置，新增网站，输入域名-网站首页（https://域名）等信息2.复制代码，放到中OVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo主题hexo-theme-snippet]]></title>
    <url>%2Fhexo-extend-themes.html</url>
    <content type="text"><![CDATA[第一步安装hexo第二步下载主题：shenliyang/hexo-theme-snippet: Snippet 简洁而不简单，也许是一款你寻找已久的hexo主题 (github.com)第三步安装主题插件1npm i hexo-renderer-ejs hexo-renderer-less hexo-deployer-git -S第四步启用站内本地搜索功能1npm i hexo-generator-json-content@2.2.0 -S第五步配置gulp压缩代码1、安装gulpnpm install --global gulp-cli2、安装gulp模块1234npm install gulp --savenpm install gulp-htmlclean gulp-htmlmin gulp-clean-css gulp-uglify gulp-imagemin --savenpm install gulp-babel babel-preset-env babel-preset-mobx --savenpm install -D @babel/core @babel/preset-react @babel/preset-env --save3、在hexo目录创建gulpfile.js，内容为：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778let gulp = require(&apos;gulp&apos;)let cleanCSS = require(&apos;gulp-clean-css&apos;)let htmlmin = require(&apos;gulp-htmlmin&apos;)let htmlclean = require(&apos;gulp-htmlclean&apos;)let babel = require(&apos;gulp-babel&apos;) /* 转换为es2015 */let uglify = require(&apos;gulp-uglify&apos;)let imagemin = import(&apos;gulp-imagemin&apos;)// 设置根目录const root = &apos;./public&apos;// 匹配模式， **/*代表匹配所有目录下的所有文件const pattern = &apos;**/*&apos;// 压缩htmlgulp.task(&apos;minify-html&apos;, function() &#123; return gulp // 匹配所有 .html结尾的文件 .src(`$&#123;root&#125;/$&#123;pattern&#125;.html`) .pipe(htmlclean()) .pipe( htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true &#125;) ) .pipe(gulp.dest(&apos;./public&apos;))&#125;)// 压缩cssgulp.task(&apos;minify-css&apos;, function() &#123; return gulp // 匹配所有 .css结尾的文件 .src(`$&#123;root&#125;/$&#123;pattern&#125;.css`) .pipe( cleanCSS(&#123; compatibility: &apos;ie8&apos; &#125;) ) .pipe(gulp.dest(&apos;./public&apos;))&#125;)// 压缩jsgulp.task(&apos;minify-js&apos;, function() &#123; return gulp // 匹配所有 .js结尾的文件 .src(`$&#123;root&#125;/$&#123;pattern&#125;.js`) .pipe( babel(&#123; presets: [&apos;env&apos;] &#125;) ) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;))&#125;)// 压缩图片gulp.task(&apos;minify-images&apos;, function() &#123; return gulp // 匹配public/images目录下的所有文件 .src(`$&#123;root&#125;/images/$&#123;pattern&#125;`) .pipe( imagemin( [ imagemin.gifsicle(&#123; optimizationLevel: 3 &#125;), imagemin.jpegtran(&#123; progressive: true &#125;), imagemin.optipng(&#123; optimizationLevel: 7 &#125;), imagemin.svgo() ], &#123; verbose: true &#125; ) ) .pipe(gulp.dest(&apos;./public/images&apos;))&#125;)gulp.task(&apos;default&apos;, gulp.series(&apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;))4、执行顺序1234hexo cleanhexo ggulphexo d第六步github actions自动部署1、命令精简，修改根目录package.json中的：123456&quot;scripts&quot;: &#123; &quot;build&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; gulp&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;hexo deploy&quot;, &quot;server&quot;: &quot;hexo server&quot; &#125;,2、在本地 【hexo源码】 根目录下创建 .github/workflows/deploy.yml 文件，内容如下1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# Action 的名字name: Hexo Auto Deployon: # 触发条件1：main 分支收到 push 后执行任务。 push: branches: - main # 触发条件2：手动按钮 workflow_dispatch:# 这里放环境变量,需要替换成你自己的env: # Hexo 编译后使用此 git 用户部署到 github 仓库 GIT_USER: axiao1554 # Hexo 编译后使用此 git 邮箱部署到 github 仓库 GIT_EMAIL: 397480224@qq.com # Hexo 编译后要部署的 github 仓库 GIT_DEPLOY_REPO: axiao1554/win # Hexo 编译后要部署到的分支 GIT_DEPLOY_BRANCH: masterjobs: build: name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125; runs-on: ubuntu-latest if: github.event.repository.owner.id == github.event.sender.id strategy: matrix: os: [ubuntu-18.04] node_version: [12.x] steps: - name: Checkout uses: actions/checkout@v2 - name: Checkout deploy repo uses: actions/checkout@v2 with: repository: $&#123;&#123; env.GIT_DEPLOY_REPO &#125;&#125; ref: $&#123;&#123; env.GIT_DEPLOY_BRANCH &#125;&#125; path: .deploy_git - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125; uses: actions/setup-node@v1 with: node-version: $&#123;&#123; matrix.node_version &#125;&#125; - name: Configuration environment env: HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125; run: | sudo timedatectl set-timezone &quot;Asia/Shanghai&quot; mkdir -p ~/.ssh/ echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.name $GIT_USER git config --global user.email $GIT_EMAIL - name: Install dependencies run: | npm install hexo-cli -g npm install npm run build - name: Deploy hexo run: | npm run deploy3、自动部署具体步骤请参阅：这里]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo不使用hexo插件引用aplayer带歌单]]></title>
    <url>%2Fhexo-extend-aplyer.html</url>
    <content type="text"><![CDATA[layout.ejs&lt;/body&gt;上方引入以下三个文件：123&lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/gh/axiao1554/cloud/assets/APlayer.min.css&quot;&gt;&lt;script src=&quot;//cdn.jsdelivr.net/gh/axiao1554/cloud/assets/APlayer.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//cdn.jsdelivr.net/gh/axiao1554/cloud/assets/Meting.min.js&quot;&gt;&lt;/script&gt;APlayer.min.css文件中改了俩出地方：1.最前面加入【隐藏】：1.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body&#123;left:-66px !important;&#125;.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover&#123;left:0px !important;&#125;2.最后面加入【歌词样式】：1.aplayer-lrc .aplayer-lrc-contents p&#123;font-weight:bold;font-size:15px;font-style:italic;background-image:linear-gradient(#FF4081,#7b05e6,#FF4081);color:transparent;-webkit-background-clip:text;text-shadow:none;&#125;footer.ejs中插入以下代码：12345678910111213&lt;meting-js server=&quot;tencent&quot; type=&quot;playlist&quot; id=&quot;7044625667&quot; mode=&quot;circulation&quot; mutex=&quot;true&quot; theme=&quot;#FF4081&quot; fixed=&quot;true&quot; order=&quot;random&quot; preload=&quot;auto&quot; list-folded=&quot;false&quot; listmaxheight=&quot;340px&quot;&gt; &lt;/meting-js&gt;修改样式（参考）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163&lt;% if(theme.two_menu.playlist.enable)&#123; %&gt; &lt;div class=&quot;playlist&quot; style=&quot;display:none;&quot;&gt; &lt;meting-js server=&quot;netease&quot; type=&quot;playlist&quot; id=&quot;308313843&quot; mode=&quot;circulation&quot; mutex=&quot;true&quot; theme=&quot;#e67e22&quot; fixed=&quot;false&quot; order=&quot;random&quot; preload=&quot;auto&quot; list-folded=&quot;false&quot; listmaxheight=&quot;340px&quot;&gt; &lt;/meting-js&gt; &lt;style&gt; /*==================================================== 各种按钮显示 ====================================================*/ .aplayer.aplayer-arrow .aplayer-icon-loop, .aplayer .aplayer-icon-back, .aplayer .aplayer-icon-forward, .aplayer .aplayer-icon-order, .aplayer .aplayer-icon-play &#123; display: inline-block !important; &#125; /*==================================================== 歌曲名向左对齐 ====================================================*/ .aplayer-list-index &#123; position: absolute; left: 12px; &#125; .aplayer-list-title &#123; position: absolute; left: 36px; &#125; /*==================================================== 收缩按钮 ====================================================*/ .aplayer .aplayer-icon.aplayer-icon-menu &#123; width: 20px; height: 20px; margin-right: -7px; margin-left: 10px; margin-top: -1px; border: 1px solid #e9e9e9 !important; border-radius: 0 0 3px 0 !important; &#125; .aplayer .aplayer-icon.aplayer-icon-menu svg path &#123; fill: #e67e22 !important; &#125; .aplayer .aplayer-icon.aplayer-icon-menu:hover &#123; background-color: #e67e22 !important; border: 1px solid #e67e22 !important; &#125; .aplayer .aplayer-icon.aplayer-icon-menu:hover path &#123; fill: #fff !important; &#125; /*==================================================== mini ====================================================*/ .mini &#123; position: absolute; top: -5px; right: 15px; &#125; .aplayer.aplayer-narrow &#123; width: 58px !important; &#125; .aplayer.aplayer-narrow .aplayer-body, .aplayer.aplayer-narrow .aplayer-pic &#123; width: 58px !important; height: 58px !important; border-radius: 50%; &#125; .aplayer .aplayer-pic .aplayer-play svg,.aplayer .aplayer-pic .aplayer-pause svg&#123; pointer-events:none; &#125; .rotate &#123; -webkit-transform: rotate(360deg); animation: rotation 5s linear infinite; -moz-animation: rotation 5s linear infinite; -webkit-animation: rotation 5s linear infinite; -o-animation: rotation 5s linear infinite; &#125; @-webkit-keyframes rotation &#123; from &#123; -webkit-transform: rotate(0deg); &#125; to &#123; -webkit-transform: rotate(360deg); &#125; &#125; /*==================================================== mini按钮 ====================================================*/ .aplayer .aplayer-miniswitcher &#123; display: inline-block !important; width: 20px !important; height: 20px !important; background-color: #fff !important; border: 1px solid #e9e9e9 !important; border-radius: 0 3px 0 0 !important; &#125; .aplayer .aplayer-miniswitcher .aplayer-icon path &#123; fill: #e67e22 !important; &#125; .aplayer .aplayer-miniswitcher:hover &#123; background-color: #e67e22 !important; border: 1px solid #e67e22 !important; &#125; .aplayer .aplayer-miniswitcher:hover path &#123; fill: #fff !important; &#125; /*==================================================== 展示框高度调节以及歌词样式 ====================================================*/ .aplayer &#123; margin: 5px 0 0 0 !important; &#125; .aplayer.aplayer-withlrc .aplayer-pic &#123; width: 58px !important; height: 58px !important; &#125; .aplayer.aplayer-withlrc .aplayer-info &#123; margin-left: 58px !important; height: 58px !important; padding: 2px 7px 0 !important; &#125; .aplayer-controller &#123; top: -24px; &#125; .aplayer .aplayer-info .aplayer-music .aplayer-title &#123; font-size : 12px !important; position: absolute; left: 70px; color:#ccc !important; &#125; .aplayer .aplayer-info .aplayer-music .aplayer-title::before &#123; content: &apos;歌曲名：&apos;; color:#ccc !important; &#125; .aplayer .aplayer-info .aplayer-music .aplayer-author &#123; position: absolute; left: 70px; top: 16px; color:#ccc !important; &#125; .aplayer .aplayer-info .aplayer-music .aplayer-author::before &#123; content: &apos;演唱&apos;; color:#ccc !important; &#125; .aplayer .aplayer-lrc &#123; top: -19px !important; &#125; .aplayer .aplayer-lrc::after, .aplayer .aplayer-lrc::before &#123; z-index: 0 !important; display: none !important; &#125; .aplayer .aplayer-lrc p &#123; color:#e67e22 !important; &#125; &lt;/style&gt; &lt;/div&gt; &lt;% &#125; %&gt;js：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//歌单点击加载 var $href2 = $(this).find(&apos;.main-a&apos;).attr(&apos;href&apos;); if($href2 == &apos;./#playlist/&apos;)&#123; $(&apos;.playlist&apos;).slideToggle(500); &#125;// 歌单收缩按钮点击显示mini样式 function miniclick()&#123; $(&apos;.playlist&apos;).on(&apos;click&apos;,&apos;.aplayer .aplayer-miniswitcher&apos;,function()&#123; if($(&apos;.playlist&apos;).hasClass(&apos;mini&apos;)) &#123; $(&apos;.playlist&apos;).removeClass(&apos;mini&apos;); $(this).css(&apos;cssText&apos;,&apos;width:20px !important;height:20px !important&apos;); $(&apos;.aplayer .aplayer-miniswitcher .aplayer-icon&apos;).css(&apos;transform&apos;,&apos;rotateY(180deg)&apos;); //去掉旋转 $(&apos;.aplayer.aplayer-withlrc .aplayer-pic&apos;).removeClass(&apos;rotate&apos;); &#125;else&#123; $(&apos;.playlist&apos;).addClass(&apos;mini&apos;); $(this).css(&apos;cssText&apos;,&apos;width:15px !important;height:100% !important;&apos;); $(&apos;.aplayer .aplayer-miniswitcher .aplayer-icon&apos;).css(&apos;transform&apos;,&apos;rotateY(360deg)&apos;); //关停判断旋转 if(document.querySelector(&apos;.aplayer .aplayer-pic .aplayer-pause&apos;) !== null) &#123; $(&apos;.aplayer.aplayer-narrow .aplayer-pic&apos;).addClass(&apos;rotate&apos;); &#125; &#125; &#125;) &#125; //关停判断旋转 function minirotate()&#123; function picrotate()&#123; if($(&apos;.aplayer.aplayer-narrow .aplayer-pic&apos;).hasClass(&apos;rotate&apos;))&#123; $(&apos;.aplayer.aplayer-narrow .aplayer-pic&apos;).addClass(&apos;rotate&apos;); &#125;else&#123; $(&apos;.aplayer.aplayer-narrow .aplayer-pic&apos;).removeClass(&apos;rotate&apos;); &#125; &#125; $(&apos;.playlist&apos;).on(&apos;click&apos;,&apos;.aplayer.aplayer-narrow .aplayer-pic&apos;,function()&#123; if($(this).hasClass(&apos;rotate&apos;))&#123; $(this).removeClass(&apos;rotate&apos;); &#125;else&#123; $(this).addClass(&apos;rotate&apos;); &#125; &#125;) $(&apos;.playlist&apos;).on(&apos;click&apos;,&apos;.aplayer .aplayer-pic .aplayer-play&apos;,function()&#123; picrotate(); &#125;) $(&apos;.playlist&apos;).on(&apos;click&apos;,&apos;.aplayer .aplayer-pic .aplayer-pause&apos;,function()&#123; picrotate(); &#125;) &#125; if(document.querySelector(&apos;.playlist&apos;) !== null) &#123; miniclick(); minirotate(); &#125;OVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo网页访问速度优化之pjax]]></title>
    <url>%2Fhexo-extend-pjax.html</url>
    <content type="text"><![CDATA[简介：pjax 结合 pushState 和 ajax 技术， 不需要重新加载整个页面就能从服务器加载 Html 到你当前页面，这个 ajax 请求会有永久链接、title 并支持浏览器的回退/前进按钮。使用：需要引入jquery和pjaxjquery：https://lib.baomitu.com/jquery/2.0.3/jquery.min.jspjax：https://cdn.jsdelivr.net/gh/axiao1554/cloud/assets/jquery.pjax.js方法1：添加以下代码：123&lt;script&gt;$(document).pjax(&apos;a[target!=_blank]&apos;, &apos;#pjaxouter&apos;, &#123;fragment: &apos;#pjaxouter&apos;,timeout: 8000&#125;);&lt;/script&gt;‘#pjaxouter’是你将会刷新的地方,自己定义一个【id=&#39;pjaxouter&#39;】 fragment: ‘#pjaxouter’,是把那个地方的代码刷新然后放到’#pjaxouter’中方法2：1、首先给我们不需要 Pjax 加载的链接添加一个额外的属性1&lt;a href=&quot;/wp-login.php?action=logout&quot; pjax=&quot;exclude&quot;&gt;退出&lt;/a&gt;2、在初始化我们插件的时候排除掉有这个属性的 A 标签1234$(document).pjax(&apos;a[pjax!=&quot;exclude&quot;]&apos;, &apos;#pjax-container&apos;, &#123; fragment: &apos;#pjax-container&apos;, timeout: 10000&#125;)注意事项1.pjax会影响图片的懒加载 lazyload功能，去配置根目录下面_config.yml代码【注意开启isSPA】：123456lazyload: enable: true onlypost: false # 是否只对文章的图片做懒加载 loadingImg: //cdn.jsdelivr.net/gh/axiao1554/cloud/assets/loading4.gif # eg ./images/loading.gif isSPA: true # optional preloadRatio: 3 # optional, default is 1onlyposttrue：只有路由页面或者文章的图片才会被懒加载。false：除了站点背景图（如果有的话），整个站点的图片均会被懒加载。loadingImg：指定的话，加载自定义路径的图片用作文章图片加载时显示，不指定的话显示默认图片。isSPAtrue：针对单页面应用，当滚动条滚动到图片位置时就会向后端请求图片false：刷新才能请求图片preloadRatio：在多少倍的可见区域时触发图片请求，默认为1，即当前屏幕的区域。2.页脚不算子统计，因为是ajax加载内容不刷新页面，统计会停止，添加以下代码：12345&lt;script&gt;$(document).on(&apos;pjax:complete&apos;,function()&#123; $.getScript(&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;);&#125;)&lt;/script&gt;3.通过NProgress为pjax添加加载过渡效果：需要引入以下：nprogress.js：https://cdn.jsdelivr.net/gh/axiao1554/cloud/assets/nprogress.jsnprogress.css：https://cdn.jsdelivr.net/gh/axiao1554/cloud/assets/nprogress.css添加以下代码：123&lt;script&gt;$(document).on(&apos;pjax:start&apos;, NProgress.start).on(&apos;pjax:end&apos;, NProgress.done);&lt;/script&gt;4.加密文章123$(document).on(&apos;pjax:complete&apos;,function()&#123; $.getScript(&quot;/lib/hbe.js&quot;);&#125;)5.背景图片刷新和fancybox这俩的js放在一起到pjaxload.js，直接引入即可123$(document).on(&apos;pjax:complete&apos;,function()&#123; $.getScript(&quot;/js/pjaxload.js&quot;);&#125;)注意fancybox的代码需要改一下：1234567891011121314151617// 修改第6行this.src改成this.dataset.original，不然点击图片一直显示加载图$(&apos;.article-entry&apos;).each(function(i)&#123; $(this).find(&apos;img&apos;).each(function()&#123; if ($(this).parent().hasClass(&apos;fancybox&apos;)) return; var alt = this.alt; if (alt) $(this).after(&apos;&lt;span class=&quot;caption&quot;&gt;&apos; + alt + &apos;&lt;/span&gt;&apos;); $(this).wrap(&apos;&lt;a href=&quot;&apos; + this.dataset.original + &apos;&quot; title=&quot;&apos; + alt + &apos;&quot; class=&quot;fancybox&quot;&gt;&lt;/a&gt;&apos;); &#125;); $(this).find(&apos;.fancybox&apos;).each(function()&#123; $(this).attr(&apos;rel&apos;, &apos;article&apos; + i); &#125;);&#125;);if ($.fancybox)&#123; $(&apos;.fancybox&apos;).fancybox();&#125;6.评论系统bug|文章中引入aplayer的bug：暂时没用到，用的时候再去改7.通过阅读更多输入验证码公众号导流主页 | OpenWrite使用pjax的话需要在js中添加以下代码：123$(document).on(&apos;pjax:start&apos;, function(result)&#123; const btw = new BTWPlugin(); &#125;)12345678910111213141516171819// readmore改变toc function hasMore()&#123; let hasMoreBtn = $(&quot;#read-more-btn&quot;).length; if (hasMoreBtn) &#123; $(&quot;#article-toc .article-toc&quot;).append(&apos;&lt;p class=&quot;readmoretoc&quot;&gt;点击阅读全文后查看&lt;/p&gt;&apos;); $(&quot;#article-toc .article-toc ol&quot;).css(&apos;display&apos;,&apos;none&apos;); $(&quot;#container&quot;).on(&apos;click&apos;,&apos;#btw-submit-btn&apos;,function()&#123; setTimeout(function()&#123; if(!$(&quot;#read-more-btn&quot;).length)&#123; $(&quot;.readmoretoc&quot;).remove(); $(&quot;#article-toc .article-toc ol&quot;).css(&apos;display&apos;,&apos;block&apos;); &#125; &#125;,1000) &#125;); &#125; &#125; if(isPC)&#123; hasMore(); &#125;OVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用GitHub Actions自动部署Hexo到github pages+gitee pages]]></title>
    <url>%2Fhexo-extend-actions.html</url>
    <content type="text"><![CDATA[需要俩个仓库，一个放public生成的静态网页，一个放hexo源码，以后就可以在线编辑啦第一步1.生成静态网页的仓库【aqrj】之前就建好了，这个仓库必须是公开的才可以使用pages，手动【hexo d】来提交比较麻烦，内容多了提交会很慢2.在github创建【aqrjfiles】放hexo源码的仓库，这个仓库可以是私密的第二步1.创建ssh密钥，由于之前配置hexo时就已经生成好了，详情见这里2.找到【id_rsa】私钥，去配置hexo源码仓库【aqrjfiles】，如下在 myblog 仓库 Settings -&gt; Secrets -&gt; Actions-&gt;New repository secret 页面上添加。在 Name 输入框填写 HEXO_DEPLOY_PRI在 Value 输入框填写 id_rsa 文件内容再次点击New repository secret在 Name 输入框填写 GITEE_PASSWORD在 Value 输入框填写 gitee的登录密码3.找到【id_rsa.pub】公钥，去配置静态网页仓库【aqrj】,由于之前手动提交时，已经使用过公钥配置了，所以这里不配置就行第三步1.在本地 【hexo源码】 根目录下创建 .github/workflows/deploy.yml 文件2.deploy.yml 的内容如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104# Action 的名字name: Hexo Auto Deployon: # 触发条件1：main 分支收到 push 后执行任务。 push: branches: - main # 触发条件2：手动按钮 workflow_dispatch:# 这里放环境变量,需要替换成你自己的env: # Hexo 编译后使用此 git 用户部署到 github 仓库 GIT_USER: axiao1554 # Hexo 编译后使用此 git 邮箱部署到 github 仓库 GIT_EMAIL: 397480224@qq.com # Hexo 编译后要部署的 github 仓库 GIT_DEPLOY_REPO: axiao1554/aqrj # Hexo 编译后要部署到的分支 GIT_DEPLOY_BRANCH: master # Hexo 编译后使用此 gitee 用户部署到gitee仓库 GITEE_USER: aqrj # Hexo 编译后要部署的 gitee 仓库 GITEE_DEPLOY_REPO: aqrj/aqrj # Hexo 编译后要部署到的分支 GITEE_DEPLOY_BRANCH: master # 注意替换为你的 GitHub 源仓库地址 GIT_SOURCE_REPO: git@github.com:axiao1554/aqrj.git # 注意替换为你的 Gitee 目标仓库地址 GITEE_DESTINATION_REPO: git@gitee.com:aqrj/aqrj.gitjobs: build: name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125; runs-on: ubuntu-latest if: github.event.repository.owner.id == github.event.sender.id strategy: matrix: os: [ubuntu-18.04] node_version: [12.x] steps: - name: Checkout uses: actions/checkout@v2 - name: Checkout deploy repo uses: actions/checkout@v2 with: repository: $&#123;&#123; env.GIT_DEPLOY_REPO &#125;&#125; ref: $&#123;&#123; env.GIT_DEPLOY_BRANCH &#125;&#125; path: .deploy_git - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125; uses: actions/setup-node@v1 with: node-version: $&#123;&#123; matrix.node_version &#125;&#125; - name: Configuration environment env: HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125; run: | sudo timedatectl set-timezone &quot;Asia/Shanghai&quot; mkdir -p ~/.ssh/ echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts ssh-keyscan -t rsa gitee.com &gt;&gt; ~/.ssh/known_hosts git config --global user.name $GIT_USER git config --global user.email $GIT_EMAIL - name: Install dependencies run: | npm install hexo-cli -g npm install - name: Deploy hexo run: | npm run deploy # 以下为发布到gitee - name: Sync to Gitee uses: wearerequired/git-mirror-action@master env: # 直接使用了 HEXO_DEPLOY_PRI SSH_PRIVATE_KEY: $&#123;&#123; secrets.HEXO_DEPLOY_PRI &#125;&#125; with: # GitHub 源仓库地址 source-repo: $&#123;&#123; env.GIT_SOURCE_REPO &#125;&#125; # Gitee 目标仓库地址 destination-repo: $&#123;&#123; env.GITEE_DESTINATION_REPO &#125;&#125; - name: Build Gitee Pages uses: yanglbme/gitee-pages-action@main with: # 你的 Gitee 用户名 gitee-username: $&#123;&#123; env.GITEE_USER &#125;&#125; # 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD gitee-password: $&#123;&#123; secrets.GITEE_PASSWORD &#125;&#125; # 你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错 gitee-repo: $&#123;&#123; env.GITEE_DEPLOY_REPO &#125;&#125; # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在） branch: $&#123;&#123; env.GITEE_DEPLOY_BRANCH &#125;&#125;3.deploy.yml 的内容需要修改的地方，第8行改成你的【hexo源码】分支名字第13行-&gt;env中的所有常量，赋值为你的数据，每行都有注释，对照着改第四步1.git你的【hexo源码】到你的【aqrjfiles】仓库，数据比较多，速度有点慢，耐心等待2.ok，完成，以后直接在【hexo源码】仓库修改添加数据，静态网页仓库会自己更新3.修改完后点击【hexo源码】仓库中的【Actions】查看提交数据和报错信息第五步【重要知识点】踩坑注意点：1.【github静态网页仓库】必须要和【gitee网页仓库】的分支名字相同，否则必报错2.分支不同的可以去修改【github静态网页仓库】的分支名字，settings-&gt;Branches修改，修改完记得给以下两个配置文件【hexo源码】根目录的【_config.yml】文件中：deploy:branch：【新分支名字】【hexo源码】根目录的.github/workflows/deploy.yml 文件中：env:GIT_DEPLOY_BRANCH: 【新分支名字】3..github/workflows/deploy.yml 文件中：env:GIT_SOURCE_REPO:【github静态网页仓库地址】，别填错4.修改【hexo源码】后，点击Actions还报错的话，重新上传【hexo源码】，操作如下：删除.deploy_git文件夹;git中输入git config --global core.autocrlf false重新git上传OVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows上安装macos系统]]></title>
    <url>%2Fvmware-mac.html</url>
    <content type="text"><![CDATA[需要的软件如下：vmware-16.2.3：点这里unlocker：点这里mac系统镜像：点这里vmware密钥：点这里确定可用的软件组合：vm16.2.3+unlocker10.15+镜像10.13、11.5第一步安装vmware，安装完成最后一步，点击许可证，输入密钥打开电脑进程，关闭vmware有关的所有进程第二步unlocker解压并放到VMware的安装目录下找到 win-install.cmd 单击右键以管理员身份运行第三步1.创建虚拟机-选择典型（推荐）2.选择安装程序光盘映像文件-找到镜像（默认iso格式，cdr的需要打开所有文件）3.选择macos版本，这里选择macOS 10.134.选择安装虚拟机mac系统的磁盘位置，并起个名字5.自定义磁盘大小（这里我用60G），并选择 将虚拟磁盘拆分成多个文件6.自定义硬件（根据自己的电脑硬件要求分配），点击完成7.进入mac磁盘文件夹，找到 macOS 10.13.vmx ,打开编辑，最后加入代码如下：12smc.version = &quot;0&quot;cpuid.1.eax = &quot;00000000000000010000011010100101&quot;第四步1.开期虚拟机,进行maoos系统安装.2.耐心等待吧，时间比较长3.选择语言，下一步协议书点同意4.选择要安装的磁盘，点击上方的 实用工具-磁盘工具 ，选择自己之前给的虚拟机大小差不多的虚拟磁盘，点击 抹掉 ,自定义一个名字mac，点击抹掉5.完成-点击左上角红点关闭6.进行系统安装，选择磁盘mac，点击继续，慢慢等待7.自行设置一些基础设置第五步联网1.设置虚拟机-网络适配器-选NAT模式，用于共享主机的IP地址2.在MacOS中，设置网络 以太网 使用DHCP，其实默认就是这个不用设置也行3.回到win10，打开任务管理器，打开 服务，找到VMware DHCP和VMware NAT，把这两个服务打开，完美，能上网了第六步1.右键创建文件功能去appstore应用商店下载 超级右键 ，并去扩展给予权限2.从主机向虚拟机跨系统复制粘贴拖动文件VMware菜单栏 —&gt; 虚拟机 —&gt; 设置 —&gt;屏幕弹出 “虚拟机设置界面”虚拟机设置 —&gt; 硬件 —&gt; 选中“CD/DVD（SATA）”，选择 使用ISO映像文件 在VMware的安装目录下找 darwin.iso ，点击确定，打开虚拟机，桌面上就会出现VMware Tools镜像，打开点击安装VMware Tools工具，安装完重启就好了3.和主机windows系统共享文件参考：实现虚拟机上的macOS系统和主机windows系统共享文件 - 简书 (jianshu.com)第七步优化：1.系统偏好设置” 进入”辅助功能” -显示-然后勾选”减少透明度”2.“系统偏好设置”进入”Dock” 最小化窗口时使用: 选择“缩放效果”3.系统偏好设置”进入”扩展”,然后将不使用的组件勾掉4.下载beamoff软件：点这里下载5.设置为开机自动运行：系统偏好设置 - 用户与群组 - 选中你自己的用户名 - 选择 “登录项” 选项卡 - 点 + 号 找到你下载并解压出来的beamoff.app，点击添加OVER！！！]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GiteePages+typora+picgo【从零开始】]]></title>
    <url>%2Fhexo-extend-picgo.html</url>
    <content type="text"><![CDATA[hexo主题引用外部的js需要替换一下域名创建Gitee仓库提交文件到Gitee仓库前的准备工作推送资源文件到Gitee仓库开启GiteePages服务Picgo + Gitee + Github 搭建免费图库， Typora 自动上传图片软件资源站主题安装教程：shenliyang/hexo-theme-snippet: Snippet 简洁而不简单，也许是一款你寻找已久的hexo主题 (github.com)Hexo-Butterfly主题魔改 - 云+社区 - 腾讯云 (tencent.com)优化参考：Hexo博客静态资源加速 | Akilarの糖果屋hexo主题引用外部的js需要替换一下域名首先搭建hexo就不用多做介绍由于众所周知的原因，只需替换一个域名就可以继续使用 Google 提供的前端公共库了。 同样，通过 script 标记引用这些资源，让网站访问速度瞬间提速！原理此插件/扩展可以将以下的 cdn 资源替换为国内的：ajax.googleapis.com - 前端公共库，替换为 ajax.loli.netfonts.googleapis.com - 免费字体库，替换为 fonts.loli.netthemes.googleusercontent.com - fonts 有时会使用到这个里面的资源，替换为 themes.loli.netfonts.gstatic.com - 免费字体库，替换为 gstatic.loli.netwww.google.com/recaptcha - Google 图像验证库，替换为 www.recaptcha.net/recaptchasecure.gravatar.com - gravatar 头像，替换为 gravatar.loli.netmaxcdn.bootstrapcdn.com/bootstrap - bootstrap 框架使用的 CDN，替换为 cdn.bootcdn.net/ajax/libs/twitter-bootstrap创建Gitee仓库首先注册gitee就不用介绍了现在登录到你之前注册的Gitee主页，顶栏上有个+图标鼠标移上去，点击新建仓库进入到创建仓库页面如果你想直接通过域名就能访问你的博客（个人网站）的话，创建仓库的时候你的仓库名就需要和你注册Gitee的时候的用户名一样。例如：我的Gitee用户名为maoyikun，我创建的仓库名是maoyikun，那我访问的时候直接使用maoyikun.gitee.io就可以直接访问了。但是，如果我创建的仓库名和用户名不一样，比如我创建仓库的时候，仓库名为blog，那我访问的时候，就必须要域名+仓库名才能访问，如maoyikun.gitee.io。是否开源的选项，如果你的东西不想被别人看见的话，就选择私有的。其他的随便选择就好。这样，存放我们博客（个人网站）资源的仓库就创建好了。提交文件到Gitee仓库前的准备工作将本地文件推送到Gitee仓库之前，我们需要做一些简单的配置。在终端输入命令配置Git提交时的用户名和邮箱：12git config --global user.name "username" //全局配置提交是使用的提交人名git config --global user.email "xxx@mail.com" //全局配置提交人的电子邮箱如果想每次提交的时候不输入用户名和密码就需要在本地生成ssh秘钥。在终端输入：1ssh-keygen -t rsa -C "公钥描述"生成的秘钥会存放在~/.ssh/目录下。接下来在终端输入：1cat ~/.ssh/id_rsa.pub就可以看到生成的公钥内容了，将公钥的内容复制下来放到Gitee上。进入到你的Gitee主页，点击设置进入到Gitee设置页面，找到安全设置-SSH公钥进入到添加公钥页面将刚才你复制的公钥内容粘贴到公钥输入框，点击确定保存公钥。做完以上操作之后，可以测试一下公钥是否配置成功。在终端输入：1ssh -T git@gitee.com执行命令如果输出了：1Hi 你的Gitee账号! You've successfully authenticated, but GITEE.COM does not provide shell access.此时证明你的公钥已经配置成功了。接下来要做的就是将本地的文件推送到Gitee仓库了。推送资源文件到Gitee仓库本地博客（个人网站）目录已经生成，Gitee仓库已经创建，现在我们需要将本地的文件推送到Gitee仓库了。因为GiteePages是支持Hexo资源编译的，所以需要推送到Gitee仓库的文件就有两种选择。只推送Hexo生成的静态文件到Gitee仓库这种方式是直接将Hexo生成的所有静态文件推送到Gitee仓库，这样就相当于是GiteePages托管的就是你的博客（个人网站的）所有生成好的静态文件，就不需要GiteePages再去编译生成一次静态文件。这样每次更新GiteePages的时候时间会相对短一些。这种方式还有个好处就是操作简单一点，可直接通过Hexo命令来推送文件到Gitee仓库。使用终端，进入到博客（个人网站）文件夹下面，执行命令安装一个插件：1npm i hexo-deployer-git装好插件之后，在该目录下找到_config.yml文件，打开文件配置你的仓库信息：12345#在文件中找到这个deploy这个节点，修改或添加配置deploy: type: git repo: 你的仓库地址 branch: 你要推送到仓库的分支（默认为master）在该目录下执行：1hexo g这个命令会根据你的Markdown文件生成对应的静态文件，生成好了之后，可本地启动Hexo服务看下效果，输入命令：1hexo s //和hexo server命令一样感觉效果满意了，就可以提交到Gitee仓库了，执行命令：1hexo d至此，生成的静态文件就已经推送到Gitee仓库去了。将整个之前初始化的文件夹推送到Gitee仓库这种方式是将你初始化的博客（个人网站）整个文件夹下面的所有文件推送到Gitee仓库，GiteePages在更新的时候会自动的去编译一次你的目录，然后生成所有的的静态文件，这样的话，每次更新GiteePages的时候肯定时间就相对会久一点。在终端进入到之前初始化的博客（个人网站）文件夹中，执行命令：123456789git init //将该文件夹中的文件纳入到Git的版本控制中git add . //将所有的文件添加到Git暂存区git commit -m "此次提交的说明" //将文件提交到本地git remote add origin 你的远程仓库地址 //告诉Git你的Gitee仓库在哪里git push -u origin master //将你本地的文件提交到Gitee仓库的master分支至此，你的博客（个人网站）的所有文件已经提交到了Gitee仓库去了。ps：Gitee仓库地址需要进入你创建的仓库首页才能看到，既然配置了公钥，那么仓库地址肯定是使用ssh协议最好。现在是万事具备，只欠开启GiteePages服务了。开启GiteePages服务终于走到了最后一步。现在进入到你的Gitee仓库页面，找到服务，点击Gitee Pages开启GiteePages服务进入到页面之后，可选择GiteePages服务需要托管的分支，推荐勾选上强制使用HTTPS，选择完毕之后点击启动便可开启GiteePages服务。启动完成之后会展示你的GiteePages网址，这个网址便是你的博客（个人网站）的网址了，记住这个网址。以后如果你的博客（个人网站）的内容有改动，只需在GiteePages服务页面点击更新即可。至此，你的博客（个人网站）便已经全部搭建完成。Picgo + Gitee + Github 搭建免费图库， Typora 自动上传图片参考这个：(33条消息) Picgo + Gitee + Github 搭建免费图库， Typora 自动上传图片_Cceking的博客-CSDN博客注意事项：图床仓库必须是公共仓库，私有的访问不了使用上面的设置完成后，在 Typora 里写字时，就可以自动上传图片到图床啦。拖拽可以直接选择图片，然后拖拽到编辑页面。编辑器内插入使用快捷键 Ctrl + Shift + I，可以调出插入图片的功能。复制粘贴也可以直接复制图片，然后再编辑器中直接粘贴。或者截图后直接粘贴（比如 Snipaste）。这里需要多一个点击上传图片的操作。然后图片就可以上传到图床了。另外，还可以看到所有的上传在 PicGo 的相册里都能找到：over！！！！先这样吧，以后再改]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5.1项目实战简单登录验证操作]]></title>
    <url>%2Ftp-project-login.html</url>
    <content type="text"><![CDATA[三层架构控制层接受参数并传递给业务逻辑层业务逻辑层service操作处理,密码哈希加密以及验证配置文件配置返回码code，配置缓存代理钩子定义常量，注册缓存代理公共文件创建函数获取返回值工具文件设置session缓存门面代理缓存了解三层架构控制层controller：接收用户的请求，并响应用户的请求。同时会根据用户的请求调用对应的service完成我们项目中的功能，注意它不会直接与业务和数据库相关联业务逻辑层service：完成项目中的功能（项目中某个功能的业务和逻辑），它会调用到model中方法来操作数据库，注意它不会直接与数据库连接模型层model：只有一个事情就是对数据库进行CURD操作控制层接收参数建立控制器admin\controller\Login.php1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?phpnamespace app\admin\controller;use think\Controller;use Request;use app\service\UserService;use app\validate\UserValidate;use think\captcha\Captcha;class Login extends Controller&#123; private $userService; /** * 控制器的初始化方法 */ protected function initialize() &#123; $this-&gt;userService = new UserService; &#125; public function login() &#123; if (Request::isPost()) &#123; $username = Request::param(&apos;username&apos;); $password = Request::param(&apos;password&apos;); //验证码验证 $userValidate = new UserValidate; if (!$userValidate-&gt;check(Request::param())) &#123; return json([ &apos;code&apos; =&gt; USER_LOGIN_VALIDATE_ERROR, &apos;msg&apos; =&gt; $userValidate-&gt;getError() // 验证器回复错误信息的方法 ]); &#125; //公共文件common.php函数ajaxReturn return ajaxReturn($this-&gt;userService-&gt;login($username,$password)); &#125; return $this-&gt;fetch(); &#125; //验证码生成 public function verify() &#123; $captcha = new Captcha(); return $captcha-&gt;entry(); &#125;&#125;业务逻辑层功能操作根目录建立data\service\UserService.php（起名根据模型名+service）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?phpnamespace data\service;use data\model\User;use SC,OnlyLogin;class UserService&#123; /** * 定义所有的登入方式 */ private $loginWay = [ &apos;user_name&apos;, //用户名登录 &apos;user_email&apos;,//邮箱登录 &apos;user_tel&apos;, //手机登录 &apos;uid&apos; //账户登录 ]; public function login($username, $password) &#123; // 一般做登入 先判断用户名是否存在，如存在我们就判断用户的密码是否正确 foreach ($this-&gt;loginWay as $key =&gt; $value) &#123; $user = User::where($value, $username)-&gt;find(); if ($user) &#123; // 如果存在就证明是有这个用户 break; &#125; &#125; if (!$user) &#123; // 用户名是否存在 return ERROR_NO_USER; &#125; if ($user-&gt;user_status != 1) &#123; // 用户是否被封 return ERROR_USER_START; &#125; //验证哈希加密password_hash($password,1)的密码： if (!password_verify($password ,$user-&gt;user_password)) &#123; // 用户密码是否错误 return ERROR_PASSWORD; &#125; // 用户登入成功 $this-&gt;initLogin($user); //生成检验唯一登录的标识 OnlyLogin::onlyRecord($user-&gt;uid); return SUCCESS; &#125; /** * 登入初始化 */ public function initLogin($user) &#123; SC::setLogin(true); // 根据自己安全需求设置token if ($user-&gt;is_system == 1) &#123; // 这么写的原因 SC::setIsSystem(true); SC::setUserRole(Rbac::getRoleModule($user-&gt;role_id)); // 计入用户的权限 &#125; else &#123; SC::setIsSystem(false); &#125; SC::setUserInfo([ &apos;uid&apos; =&gt; $user-&gt;uid, &apos;user_name&apos; =&gt; $user-&gt;user_name, &apos;is_system&apos; =&gt; $user-&gt;is_system, &apos;nick_name&apos; =&gt; $user-&gt;nick_name, //... // &apos;role_id&apos; =&gt; $user-&gt;role_id ]); // 用户登入之后信息记入 $data = [ &apos;current_login_ip&apos; =&gt; request()-&gt;ip(), &apos;current_login_time&apos; =&gt; date(&apos;Y-m-d H:i:s&apos;, time()), &apos;last_login_time&apos; =&gt; $user-&gt;last_login_time // ... ]; User::where(&apos;uid&apos;, $user-&gt;uid)-&gt;update($data); &#125;&#125;模型层建立model\User.php123456789101112&lt;?phpnamespace app\model;use think\Model;class User extends Model&#123; protected $pk = &apos;id&apos;; public function userRole() &#123; return $this-&gt;hasOne(&apos;UserRole&apos;, &apos;role_id&apos;, &apos;role_id&apos;); &#125;&#125;验证器建立validate\UserValidate.php12345678910111213141516171819202122232425262728293031323334&lt;?phpnamespace app\validate;use think\Validate;/** * 使用验证器校验用户输入的验证码 */class UserValidata extends Validate&#123; /** * 定义验证规则 * 格式：&apos;字段名&apos; =&gt; [&apos;规则1&apos;,&apos;规则2&apos;...] * * @var array */ protected $rule = [ // 用户名和 密码 省... // 关于验证器的一些参数的使用 &apos;vertify&apos; =&gt; &apos;require|captcha&apos; ]; /** * 定义错误信息 * 格式：&apos;字段名.规则名&apos; =&gt; &apos;错误信息&apos; * * @var array */ protected $message = [ &apos;vertify&apos; =&gt; [ &apos;require&apos; =&gt; &apos;验证码必须有&apos;, &apos;captcha&apos; =&gt; &apos;验证码错误&apos;, ] ];&#125;配置返回状态码，配置缓存代理1.建立config\message.php123456789101112131415161718192021222324252627282930313233343536373839&lt;?php// 回复信息配置return [ 1 =&gt; [ &apos;code&apos; =&gt; &apos;SUCCESS&apos;, &apos;msg&apos; =&gt; &apos;操作成功&apos;, //... ], // user信息 -1000 =&gt; [ &apos;code&apos; =&gt; &apos;USER_LOGIN_VALIDATE_ERROR&apos;, &apos;msg&apos; =&gt; &apos;用户登入校验不成功&apos;, ], -1001 =&gt; [ &apos;code&apos; =&gt; &apos;ERROR_NO_USER&apos;, &apos;msg&apos; =&gt; &apos;用户不存在&apos;, ], -1002 =&gt; [ &apos;code&apos; =&gt; &apos;ERROR_USER_START&apos;, &apos;msg&apos; =&gt; &apos;用户状态不对&apos;, ], -1003 =&gt; [ &apos;code&apos; =&gt; &apos;ERROR_PASSWORD&apos;, &apos;msg&apos; =&gt; &apos;用户密码错误&apos;, ], -1005 =&gt; [ &apos;code&apos; =&gt; &apos;ERROR_LOGIN_EXCESS_TIME_OUT&apos;, &apos;msg&apos; =&gt; &apos;登入超过规定次数&apos;, ], // 用户组信息 -2001 =&gt; [ &apos;code&apos; =&gt; &apos;ERROR_USER_GROUP_REPEAT&apos;, &apos;msg&apos; =&gt; &apos;用户组名重复&apos; ], -2002 =&gt; [ &apos;code&apos; =&gt; &apos;ERROR_USER_GROUP&apos;, &apos;msg&apos; =&gt; &apos;用户组名操作失败&apos; ],];2.建立config\facade.php123456789101112&lt;?php//为了方便与管理自定义门面类和别名 就定义在配置文件中return [ &apos;facade&apos; =&gt; [ \app\facade\SC::class =&gt; \app\util\SC::class, \app\facade\OnlyLogin::class =&gt; \app\util\OnlyLogin::class, ], &apos;alias&apos; =&gt; [ &apos;SC&apos; =&gt; \app\facade\SC::class, &apos;OnlyLogin&apos; =&gt; \app\facade\OnlyLogin::class, ]];行为钩子获取配置文件并定义常量，注册缓存代理1.建立app\behavior\MessageBehavior.php12345678910111213&lt;?phpnamespace app\behavior;use Config;class MessageBehavior&#123; public function run() &#123; $codes = Config::get(&apos;message.&apos;); foreach ($codes as $key =&gt; $value) &#123; define($value[&apos;code&apos;], $key); &#125; &#125;&#125;2.建立app\behavior\LoadBehavior.php1234567891011121314151617&lt;?phpnamespace app\behavior;use Config;use think\Facade; // 是用来facade注册use think\Loader; // 是用来别名注册class LoadBehavior&#123; public function run() &#123; // 如果不知道 请看think\base.php对于核心类库文件的代理和别名注册 // facade注册 Facade::bind(Config::get(&apos;facade.facade&apos;)); // 别名注册 Loader::addClassAlias(Config::get(&apos;facade.alias&apos;)); &#125;&#125;3.app\tags.php中配置行为钩子加载12345// 应用初始化&apos;app_init&apos; =&gt; [ \app\behavior\MessageBehavior::class, \app\behavior\LoadBehavior::class],公共文件获取返回信息common.php123456789101112// 应用公共文件function ajaxReturn($code, $data = [])&#123; $result = [&apos;code&apos; =&gt; $code, &apos;message&apos; =&gt; getMessage($code)]; $result = (!empty($data)) ? $result[&apos;data&apos;] = $data : $result; return json($result);&#125;function getMessage($code)&#123; $info = config(&apos;message.&apos;); return (array_key_exists($code, $info)) ? $info[$code][&apos;msg&apos;] : &apos;操作失败&apos;;&#125;工具文件设置session缓存，唯一登入操作1.建立util\SC.php1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?phpnamespace app\util;use Session;/** * 工具类 * 用户缓存 facade代理 SC */class SC&#123; /** * 用户登录的session key */ CONST LOGIN_MARK_SESSION_KEY = &apos;LOGIN_MARK_SESSION&apos;; /** * 权限信息 * @var string */ CONST USER_ROLE_SESSION = &apos;USER_ROLE_SESSION&apos;; /** * USER用户信息 * @var string */ CONST USER_INFO_SESSION = &apos;USER_INFO_SESSION&apos;; // /** // * 是否设置用户登入的有效时间 // * @var string // */ // CONST CHECK_TIME_SESSION = &apos;CHECK_TIME_SESSION&apos;; // // private $checkTime = false; //---------------------------设置和判断用户的是否登入 // 设置用户登入token public function setLogin($value) &#123; Session::set(self::LOGIN_MARK_SESSION_KEY, password_hash($value, 1)); &#125; // 判断用户是否登入成功 public function getLogin() &#123; Session::get(self::LOGIN_MARK_SESSION_KEY); &#125; //---------------------------设置用户和获取用户的登入信息 // 设置用户的信息 public function setUserInfo($value) &#123; Session::set(self::USER_INFO_SESSION, $value); &#125; // 获取用户的信息 public function getUserInfo($value = null) &#123; $userInfo = Session::get(self::USER_INFO_SESSION); return ($value) ? $userInfo[$value] : $userInfo; &#125; //--------------------------设置和获取用户的权限 // 设置用户的信息 public function setUserRole($value) &#123; Session::set(self::USER_ROLE_SESSION, $value); &#125; // 获取用户的信息 public function getUserRole() &#123; Session::get(self::USER_ROLE_SESSION); &#125; //-------------------------用户退出清空用户缓存信息 // 退出登入 public function clear() &#123; Session::del(self::USER_INFO_SESSION); Session::del(self::USER_ROLE_SESSION); Session::del(self::LOGIN_MARK_SESSION_KEY); &#125;&#125;2.建立util\OnlyLogin.php123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;?phpnamespace app\util;use Cache,Cookie,SC,Log;/** * 就是唯一登入的服务类 */class OnlyLogin&#123; /** * 这是校验用户是否唯一登入的方法 */ public function onlyCheck() &#123; // 客户端 $cookieToken = Cookie::get(&apos;TOKEN&apos;.SC::getUserInfo(&apos;uid&apos;)); &lt;!-- Log::write(&quot;=====&gt;&gt;&gt;cookieToken ::: &quot;.$cookieToken); --&gt; // 服务端 $cacheToken = Cache::get(&apos;TOKEN&apos;.SC::getUserInfo(&apos;uid&apos;)); &lt;!-- Log::write(&quot;=====&gt;&gt;&gt;cacheToken ::: &quot;.$cacheToken); --&gt; // 进行服务端的token与客户端token进行校验 // 第一次登入$CacheToken 没有，异地登入的时候$cookieToken if (empty($cacheToken) || empty($cookieToken)) &#123; &lt;!-- Log::write(&apos;正常登入时候，异地登入时候&apos;); --&gt; return true; &#125; // 如果都有 // 判断是否异地登入 如果相等那么就没有异地登入 所以当前是不会被T if ($cookieToken != $cacheToken) &#123; &lt;!-- Log::write(&apos;在异地登入了，本地就被T了&apos;); --&gt; return false; &#125; &lt;!-- Log::write(&apos;常规操作&apos;); --&gt; return true; &#125; /** * 会根据用户的id作为key 生成对应标识 */ public function onlyRecord($user_id ) &#123; $token = $this-&gt;createToken($user_id); // 过期时间 // 客户端 Cookie::set(&apos;TOKEN&apos;.$user_id, $token); // 服务端 Cache::set(&apos;TOKEN&apos;.$user_id, $token); &#125; /** * 创建token的方法 * 因为每一个项目token生成的规则不一样 唯一安全 * 参考微信公众号生成token的方式 */ private function createToken($user_id) &#123; $time = time(); // 时间戳 $nonce = mt_rand(10, 1000); $array = array($time, $nonce, &apos;ONLY_USER_TOKEN&apos;, $user_id); sort($array); $token = implode($array); return sha1($token); &#125; /** * 清空用户的登入信息 * @return [type] [description] */ public function clear() &#123; &#125;&#125;门面代理缓存,代理唯一登入操作类1.建立facade\SC.php123456789101112131415&lt;?phpnamespace app\facade;use think\Facade;class SC extends Facade&#123; /** * 获取当前Facade对应类名 * @access protected * @return string */ protected static function getFacadeClass() &#123; &#125;&#125;2.建立facade\OnlyLogin.php123456789101112131415&lt;?phpnamespace app\facade;use think\Facade;class OnlyLogin extends Facade&#123; /** * 获取当前Facade对应类名 * @access protected * @return string */ protected static function getFacadeClass() &#123; &#125;&#125;中间件(唯一登录验证，规避短时间重复请求)1.建立http\middleware\AuthMiddleware.php12345678910111213&lt;?phpnamespace app\http\middleware;use OnlyLogin;class AuthMiddleware&#123; public function handle($request, \Closure $next) &#123; if (OnlyLogin::onlyCheck()) &#123; return $next($request); &#125; return response(&apos;你被T了&apos;); &#125;&#125;2.建立http\middleware\RepetitionMiddleware.php12345678910111213141516171819202122232425&lt;?phpnamespace app\http\middleware;use Session,Log;/** * 规避短时间重复请求 */class RepetitionMiddleware&#123; public function handle($request, \Closure $next) &#123; Session::get(&apos;LAST_TIME&apos;); // 最后请求的时间 , 根据当前时间请求的这个时间 // 当前时间 - 上次请求的时间 &lt; 3 // 第一次是没有的 上次请求的时间 $lastTime = (Session::get(&apos;LAST_TIME&apos;)) ? Session::get(&apos;LAST_TIME&apos;) : 0; $nowTime = time(); if ($nowTime - $lastTime &lt; 1) &#123; &lt;!-- Log::write(&apos; 请求频率了 过多 &apos;); --&gt; return response(&apos;&apos;); &#125; else &#123; Session::set(&apos;LAST_TIME&apos;, $nowTime); return $next($request); &#125; &#125;&#125;3.建立app\middleware.php12345&lt;?phpreturn [ \app\http\middleware\AuthMiddleware::class, \app\http\middleware\RepetitionMiddleware::class];OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>login</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5.1验证操作]]></title>
    <url>%2Ftp-validate.html</url>
    <content type="text"><![CDATA[验证器独立验证表单令牌token一.验证器1.命令生成验证器validate1php think make:validate index/Userindex\validate\User.php代码如下123456789101112131415161718192021namespace app\index\validate;use think\Validate;class User extends Validate&#123; protected $rule = [ &apos;name&apos; =&gt; &apos;require|max:25&apos;, &apos;age&apos; =&gt; &apos;number|between:1,120&apos;, &apos;email&apos; =&gt; &apos;email&apos;, ]; protected $message = [ &apos;name.require&apos; =&gt; &apos;名称必须&apos;, &apos;name.max&apos; =&gt; &apos;名称最多不能超过25个字符&apos;, &apos;age.number&apos; =&gt; &apos;年龄必须是数字&apos;, &apos;age.between&apos; =&gt; &apos;年龄只能在1-120之间&apos;, &apos;email&apos; =&gt; &apos;邮箱格式错误&apos;, ];&#125;2.数据验证在需要进行User验证的控制器方法中，添加如下代码即可：1234567891011121314151617181920212223242526272829303132333435363738394041//方法1namespace app\index\controller;use think\Controller;use app\index\validate\User;class Index extends Controller&#123; public function index() &#123; $data = [ &apos;name&apos; =&gt; &apos;thinkphp&apos;, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;, ]; $validate = new User; if (!$validate-&gt;check($data)) &#123; dump($validate-&gt;getError()); &#125; &#125;&#125;//方法2（注意验证结果和方法1不同，方法1返回boole值（true和false），方法2返回true和错误信息）namespace app\index\controller;use think\Controller;class Index extends Controller&#123; public function index() &#123; $result = $this-&gt;validate( [ &apos;name&apos; =&gt; &apos;thinkphp&apos;, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;, ], &apos;app\index\validate\User&apos;); if (true !== $result) &#123; // 验证失败 输出错误信息 dump($result); &#125; &#125;&#125;3.批量验证默认情况下，一旦有某个数据的验证规则不符合，就会停止后续数据及规则的验证，如果希望批量进行验证，可以设置：123456789101112131415161718192021222324namespace app\index\controller;use think\Controller;class Index extends Controller&#123; // 是否批量验证 protected $batchValidate = true; public function index() &#123; $result = $this-&gt;validate( [ &apos;name&apos; =&gt; &apos;thinkphp&apos;, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;, ], &apos;app\index\validate\User&apos;); if (true !== $result) &#123; // 验证失败 输出错误信息 dump($result); &#125; &#125;&#125;在非控制器的地方如果需要执行批量验证，可以在验证的时候添加是否批量的方法batch()123456789101112131415namespace app\common\service;use app\common\validate\User as UserValidate;class Test&#123; public function validateTest($data) &#123; $validata = new UserValidate; $result = $validate-&gt;batch()-&gt;check($data); if ($result !== true) &#123; dump($result); &#125; &#125;&#125;4.抛出验证异常可以用于接口，配合统一异常处理默认情况下验证失败后不会抛出异常，如果希望验证失败自动抛出异常，可以在控制器类中添加设置：12345678910111213141516171819namespace app\index\controller;use think\Controller;class Index extends Controller&#123; // 验证失败是否抛出异常 protected $failException = true; public function index() &#123; $result = $this-&gt;validate( [ &apos;name&apos; =&gt; &apos;thinkphp&apos;, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;, ], &apos;app\index\validate\User&apos;); &#125;&#125;5.自定义验证规则系统内置了一些常用的规则（参考后面的内置规则），如果不能满足需求，可以在验证器重添加额外的验证方法，例如：12345678910111213141516171819202122namespace app\index\validate;use think\Validate;class User extends Validate&#123; protected $rule = [ &apos;name&apos; =&gt; &apos;checkName:thinkphp&apos;, &apos;email&apos; =&gt; &apos;email&apos;, ]; protected $message = [ &apos;name&apos; =&gt; &apos;用户名必须&apos;, &apos;email&apos; =&gt; &apos;邮箱格式错误&apos;, ]; // 自定义验证规则 protected function checkName($value,$rule,$data=[]) &#123; return $rule == $value ? true : &apos;名称错误&apos;; &#125;&#125;6.验证场景验证器代码12345678910111213141516171819202122232425namespace app\index\validate;use think\Validate;class User extends Validate&#123; protected $rule = [ &apos;name&apos; =&gt; &apos;require|max:25&apos;, &apos;age&apos; =&gt; &apos;number|between:1,120&apos;, &apos;email&apos; =&gt; &apos;email&apos;, ]; protected $message = [ &apos;name.require&apos; =&gt; &apos;名称必须&apos;, &apos;name.max&apos; =&gt; &apos;名称最多不能超过25个字符&apos;, &apos;age.number&apos; =&gt; &apos;年龄必须是数字&apos;, &apos;age.between&apos; =&gt; &apos;年龄只能在1-120之间&apos;, &apos;email&apos; =&gt; &apos;邮箱格式错误&apos;, ]; protected $scene = [ &apos;edit&apos; =&gt; [&apos;name&apos;,&apos;age&apos;], ];&#125;控制器代码1234567891011121314151617181920212223242526272829303132333435//方法1$data = [ &apos;name&apos; =&gt; &apos;thinkphp&apos;, &apos;age&apos; =&gt; 10, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;,];$result = $this-&gt;validate($data,&apos;app\index\validate\User.edit&apos;);if(true !== $result)&#123; // 验证失败 输出错误信息 dump($result);&#125;//方法2namespace app\index\controller;use app\index\validate\User as UserValidate;use think\Controller;class Index extends Controller&#123; public function index() &#123; $data = [ &apos;name&apos; =&gt; &apos;thinkphp&apos;, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;, ]; $validate = new UserValidate; if (!$validate-&gt;scene(&apos;edit&apos;)-&gt;check($data)) &#123; dump($validate-&gt;getError()); &#125; &#125;&#125;可以单独为某个场景定义方法（方法的命名规范是scene+场景名），并且对某些字段的规则重新设置，例如：注意：场景名不区分大小写，且在调用的时候不能将驼峰写法转为下划线1234567891011121314151617181920212223242526272829namespace app\index\validate;use think\Validate;class User extends Validate&#123; protected $rule = [ &apos;name&apos; =&gt; &apos;require|max:25&apos;, &apos;age&apos; =&gt; &apos;number|between:1,120&apos;, &apos;email&apos; =&gt; &apos;email&apos;, ]; protected $message = [ &apos;name.require&apos; =&gt; &apos;名称必须&apos;, &apos;name.max&apos; =&gt; &apos;名称最多不能超过25个字符&apos;, &apos;age.number&apos; =&gt; &apos;年龄必须是数字&apos;, &apos;age.between&apos; =&gt; &apos;年龄只能在1-120之间&apos;, &apos;email&apos; =&gt; &apos;邮箱格式错误&apos;, ]; // edit 验证场景定义 public function sceneEdit() &#123; return $this-&gt;only([&apos;name&apos;,&apos;age&apos;]) -&gt;append(&apos;name&apos;, &apos;min:5&apos;) -&gt;remove(&apos;age&apos;, &apos;between&apos;) -&gt;append(&apos;age&apos;, &apos;require|max:100&apos;); &#125; &#125;only 场景需要验证的字段remove 移除场景中的字段的部分验证规则append 给场景中的字段需要追加验证规则控制器123456789101112131415161718192021namespace app\index\controller;use app\index\validate\User as UserValidate;use think\Controller;class Index extends Controller&#123; public function index() &#123; $data = [ &apos;name&apos; =&gt; &apos;thinkphp&apos;, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;, ]; $validate = new UserValidate; if (!$validate-&gt;sceneEdit()-&gt;check($data)) &#123; dump($validate-&gt;getError()); &#125; &#125;&#125;二.独立验证1.验证数据123456789101112131415161718192021222324252627282930313233343536use Validate;$rule = [ &apos;name&apos; =&gt; &apos;require|max:25&apos;, &apos;age&apos; =&gt; &apos;number|between:1,120&apos;, &apos;email&apos; =&gt; &apos;email&apos;,];$msg = [ &apos;name.require&apos; =&gt; &apos;名称必须&apos;, &apos;name.max&apos; =&gt; &apos;名称最多不能超过25个字符&apos;, &apos;age.number&apos; =&gt; &apos;年龄必须是数字&apos;, &apos;age.between&apos; =&gt; &apos;年龄只能在1-120之间&apos;, &apos;email&apos; =&gt; &apos;邮箱格式错误&apos;,];$data = [ &apos;name&apos; =&gt; &apos;thinkphp&apos;, &apos;age&apos; =&gt; 10, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;,];$validate = Validate::make($rule,$msg);$result = $validate-&gt;check($data);if(!$result) &#123; dump($validate-&gt;getError());&#125;//如果需要批量验证，可以使用：$result = Validate::make($rule,$msg)-&gt;batch()-&gt;check($data);if ($result !== true) &#123; dump($result);&#125;2.闭包验证12345$validate = Validate::make([ &apos;name&apos; =&gt; function($value,$rule) &#123; return $rule==$value ? true : false; &#125;,])-&gt;check($data);3.自定义验证规则123456789101112131415161718192021Validate::extend(&apos;checkName&apos;, function ($value, $rule) &#123; return $rule == $value ? true : &apos;名称错误&apos;;&#125;);$validate = Validate::make([&apos;name&apos; =&gt; &apos;checkName:1&apos;]);$data = [&apos;name&apos; =&gt; 1];$validate-&gt;check($data);//支持批量注册验证规则，例如：Validate::extend([ &apos;checkName&apos;=&gt; function ($value, $rule) &#123; return $rule == $value ? true : &apos;名称错误&apos;;&#125;, &apos;checkStatus&apos;=&gt; [$this,&apos;checkStatus&apos;]]);$validate = Validate::make([&apos;name&apos; =&gt; &apos;checkName:1&apos;])$data = [&apos;name&apos; =&gt; 1];$validate-&gt;check($data);4.静态调用123456789101112// 日期格式验证Validate::dateFormat(&apos;2016-03-09&apos;,&apos;Y-m-d&apos;); // true// 验证是否有效的日期Validate::isDate(&apos;2016-06-03&apos;); // true// 验证是否有效邮箱地址Validate::isEmail(&apos;thinkphp@qq.com&apos;); // true// 验证是否在某个范围Validate::in(&apos;a&apos;,[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]); // true// 验证是否大于某个值Validate::gt(10,8); // true// 正则验证Validate::regex(100,&apos;\d+&apos;); // true三.表单令牌token1.如果需要自定义令牌生成规则，可以调用Request类的token方法，例如：12345678910111213namespace app\index\controller;use think\Controller;class Index extends Controller&#123; public function index() &#123; $token = $this-&gt;request-&gt;token(&apos;__token__&apos;, &apos;sha1&apos;); $this-&gt;assign(&apos;token&apos;, $token); return $this-&gt;fetch(); &#125;&#125;2.然后在模板表单中使用：1&lt;input type=&quot;hidden&quot; name=&quot;__token__&quot; value=&quot;&#123;$token&#125;&quot; /&gt;3.然后在你的验证规则中，添加token验证规则即可1234protected $rule = [ &apos;__token__&apos; =&gt; &apos;require|max:25|token&apos;, &apos;email&apos; =&gt; &apos;email&apos;,];OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>validate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5.1微信公众号对接]]></title>
    <url>%2Ftp-wechat.html</url>
    <content type="text"><![CDATA[微信对接token验证消息回复一.微信对接token验证1.先建立工具类文件util\WeixinUtil.php1234567891011121314151617181920212223242526272829303132333435363738&lt;?phpnamespace app\util;use Request;/** * 操作微信公众号工具，这些方法可以提供给当前的项目使用，也可以提供给其他项目使用的代码 */class WeixinUtil&#123; private $token = &quot;shineyork&quot;; /** * 微信公众号校验 * @return [type] [description] */ public function check()&#123; //1).接收微信以get方式传过来的参数 $signature = Request::param(&quot;signature&quot;); $timestamp = Request::param(&quot;timestamp&quot;); $nonce = Request::param(&quot;nonce&quot;); //2).处理数据 //2.1)排序 $timestamp，$nonce，$token $arrayName = array($timestamp ,$nonce ,$this-&gt;token ); sort($arrayName); //2.2).加密 sha1 $temp = implode($arrayName); $temp = sha1($temp); //3).比对参数 //客户系统判断是否来自微信 if ($temp == $signature) &#123; //告诉微信校验成功 return true; &#125; else &#123; // 没有校验成功 return false; &#125; &#125;&#125;2.建立代理类facade\WeixinUtilFacade.php12345678910&lt;?phpnamespace app\facade;use think\Facade;class WeixinUtilFacade extends Facade&#123; protected static function getFacadeClass() &#123; return \app\util\WeixinUtil::class; &#125;&#125;3.建立中间件使用命令：php think make:middleware WeixinMiddlewarehttp\middleware\WeixinMiddleware.php代码如下：1234567891011121314151617181920&lt;?phpnamespace app\http\middleware;use app\facade\WeixinUtilFacade;class WeixinMiddleware&#123; public function handle($request, \Closure $next) &#123; if(WeixinUtilFacade::check())&#123; // 判断是不是第一次校验 if ($request-&gt;param(&apos;echostr&apos;)) &#123; return response($request-&gt;param(&apos;echostr&apos;)); &#125; // 执行用户的请求 return $next($request); &#125; else &#123; return response(&apos;对不起访问错误&apos;); // 不是正常微信端请求 &#125; &#125;&#125;4.注册全局中间件配置app\middleware.php代码如下12345&lt;?php// 注册全局中间件return [ \app\http\middleware\WeixinMiddleware::class];二.消息回复1.配置消息回复模板xml建立配置文件config\weixin.php1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?phpreturn [ // 文本模板 &apos;text&apos; =&gt; &apos; &lt;xml&gt; &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt; &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt; &lt;CreateTime&gt;%s&lt;/CreateTime&gt; &lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt; &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt; &lt;/xml&gt;&apos;, // 图片模板 &apos;image&apos; =&gt; &apos; &lt;xml&gt; &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt; &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt; &lt;CreateTime&gt;%s&lt;/CreateTime&gt; &lt;MsgType&gt;&lt;![CDATA[image]]&gt;&lt;/MsgType&gt; &lt;Image&gt; &lt;MediaId&gt;&lt;![CDATA[%s]]&gt;&lt;/MediaId&gt; &lt;/Image&gt; &lt;/xml&gt;&apos;, // 图文模板 &apos;news&apos; =&gt;[ &apos;TplHead&apos; =&gt; &apos; &lt;xml&gt; &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt; &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt; &lt;CreateTime&gt;%s&lt;/CreateTime&gt; &lt;MsgType&gt;&lt;![CDATA[news]]&gt;&lt;/MsgType&gt; &lt;ArticleCount&gt;%s&lt;/ArticleCount&gt; &lt;Articles&gt;&apos;, &apos;TplBody&apos; =&gt; &apos; &lt;item&gt; &lt;Title&gt;&lt;![CDATA[%s]]&gt;&lt;/Title&gt; &lt;Description&gt;&lt;![CDATA[%s]]&gt;&lt;/Description&gt; &lt;PicUrl&gt;&lt;![CDATA[%s]]&gt;&lt;/PicUrl&gt; &lt;Url&gt;&lt;![CDATA[%s]]&gt;&lt;/Url&gt; &lt;/item&gt;&apos;, &apos;TplFoot&apos; =&gt; &apos; &lt;/Articles&gt; &lt;/xml&gt;&apos; ],];2.控制器index\controller\Weixin.php代码如下1234567891011121314151617181920&lt;?phpnamespace app\index\controller;use think\Controller;use app\service\WeixinService;class Weixin extends Controller&#123; public function index() &#123; // 因为是一个xml数据包，所以我们不能使用post，param接收 //获取微信发送的xml post方式请求 $postObj = file_get_contents(&apos;php://input&apos;); //把xml转换为数组 $postArr = simplexml_load_string($postObj,&quot;SimpleXMLElement&quot;,LIBXML_NOCDATA); $service = new WeixinService; return $service-&gt;responseMsg($postArr); &#125;&#125;3.业务逻辑层service\WeixinService.php代码如下12345678910111213141516171819202122232425262728293031323334353637&lt;?phpnamespace app\service;use Config,Log;use app\model\User;class WeixinService&#123; public function responseMsg($postArr) &#123; //消息内容 $content = $postArr-&gt;Content; // //接受者 $toUserName = $postArr-&gt;ToUserName; // //发送者 $fromUserName = $postArr-&gt;FromUserName; // //获取时间戳 $time = time(); //你好，你的消息是： $content $content = &quot;你好，你的消息是：&quot;.$content; //根据回复用户id查出用户权限（预加载查询） // $content = User::where(&apos;uid&apos;, $content)-&gt;with([ // &apos;userRole&apos; =&gt; function ($userRole)&#123; // $userRole-&gt;with([ // &apos;userGroup&apos; =&gt; function($userGroup)&#123; // // 注意这个 关联字段已定义要在这个feild方法中 // $userGroup-&gt;field(&apos;group_id,module_id_array&apos;); // &#125; // ])-&gt;field(&apos;role_id,group_id_array&apos;); // &#125; // ])-&gt;field(&apos;uid,role_id,user_name&apos;)-&gt;select()-&gt;toArray(); // Log::write($content); //把百分号（%）符号替换成一个作为参数进行传递的变量： return sprintf(Config::get(&apos;weixin.text&apos;), $fromUserName, $toUserName, $time, $content); &#125;&#125;OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TP5.1视图操作]]></title>
    <url>%2Ftp-view.html</url>
    <content type="text"><![CDATA[视图渲染视图赋值模板布局，继承，标签一.视图渲染1.三种方式123456//助手函数return view(&apos;hello&apos;, [&apos;name&apos; =&gt; &apos;thinkphp&apos;]);//需要继承Controllerreturn $this-&gt;fetch();//如果希望直接解析内容而不通过模板文件的话，可以使用display方法return $this-&gt;display(&apos;&#123;$name&#125;-&#123;$email&#125;&apos;, [&apos;name&apos; =&gt; &apos;thinkphp&apos;, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;]);2.指定模板1234+ 跨控制器return $this-&gt;fetch(&apos;member/read&apos;);+ 跨模块return $this-&gt;fetch(&apos;admin@member/edit&apos;);二.视图赋值1.助手函数1234return view(&apos;index&apos;, [ &apos;name&apos; =&gt; &apos;ThinkPHP&apos;, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;]);2.fetch渲染123456$this-&gt;assign([ &apos;name&apos; =&gt; &apos;ThinkPHP&apos;, &apos;email&apos; =&gt; &apos;thinkphp@qq.com&apos;]);// 模板输出return $this-&gt;fetch(&apos;index&apos;);3.视图过滤123456789101112131415161718192021// 助手函数使用视图输出过滤return view()-&gt;filter(function($content)&#123; return str_replace(&quot;\r\n&quot;,&apos;&lt;br/&gt;&apos;,$content);&#125;);// fetch使用视图输出过滤return $this-&gt;filter(function($content)&#123; return str_replace(&quot;\r\n&quot;,&apos;&lt;br/&gt;&apos;,$content);&#125;)-&gt;fetch();//全局使用视图输出过滤protected function initialize()&#123; $this-&gt;view-&gt;filter(function($content)&#123; return str_replace(&quot;\r\n&quot;,&apos;&lt;br/&gt;&apos;,$content); &#125;);&#125;public function index()&#123; // 使用视图输出过滤 return $this-&gt;fetch();&#125;4.动态改变模板引擎，请使用视图类提供的config方法进行动态设置，而不要使用改变配置类参数的方式。123456public function index()&#123; // 改变当前操作的模板路径 $this-&gt;view-&gt;config(&apos;view_path&apos;, &apos;自定义路径&apos;); return $this-&gt;fetch();&#125;5.变量输出12345678910111213141516171819202122232425262728293031323334353637//数组&#123;$data.name&#125;或者&#123;$data[&apos;name&apos;]&#125;//给变量输出提供默认值&#123;$user.nickname|default=&quot;这家伙很懒，什么也没留下&quot;&#125;//系统变量输出&#123;$Think.server.script_name&#125; // 输出$_SERVER[&apos;SCRIPT_NAME&apos;]变量&#123;$Think.session.user_id&#125; // 输出$_SESSION[&apos;user_id&apos;]变量&#123;$Think.get.page&#125; // 输出$_GET[&apos;page&apos;]变量&#123;$Think.cookie.name&#125; // 输出$_COOKIE[&apos;name&apos;]变量//常量输出&#123;$Think.PHP_VERSION&#125;//配置参数输出&#123;$Think.config.default_module&#125;&#123;$Think.config.default_controller&#125;//语言变量&#123;$Think.lang.page_error&#125;&#123;$Think.lang.var_error&#125;//请求变量，支持Request类的大部分方法，但只支持方法的第一个参数。&#123;$Request.get.id&#125; // 调用Request对象的get方法 传入参数为id&#123;$Request.param.name&#125; // 调用Request对象的param方法 传入参数为name&#123;$Request.param.user.nickname&#125; // 调用Request对象的param方法 传入参数为user.nickname&#123;$Request.root&#125; // 调用Request对象的root方法&#123;$Request.root.true&#125; // 调用Request对象的root方法，并且传入参数true&#123;$Request.path&#125; // 调用Request对象的path方法&#123;$Request.module&#125; // 调用Request对象的module方法&#123;$Request.controller&#125; // 调用Request对象的controller方法&#123;$Request.action&#125; // 调用Request对象的action方法&#123;$Request.ext&#125; // 调用Request对象的ext方法&#123;$Request.host&#125; // 调用Request对象的host方法&#123;$Request.ip&#125; // 调用Request对象的ip方法&#123;$Request.header.accept-encoding&#125; // 调用Request对象的header方法6.模板变量使用函数（为了避免出现XSS安全问题，默认的变量输出都会使用htmlentities方法进行转义输出）12345678910111213141516171819202122232425262728&#123;$data.name|md5&#125;&#123;$data.create_time|date=&apos;Y-m-d H:i:s&apos;,###&#125;&#123;$data.create_time|date=&apos;Y-m-d H:i:s&apos;&#125;&#123;$name|md5|upper|substr=0,3&#125;//你还可以设置默认的过滤方法，在配置文件template.php中设置htmlspecialchars转义&apos;default_filter&apos; =&gt; &apos;htmlspecialchars&apos;//如果你不需要转义（例如你需要输出html表格等内容），可以使用：$arr[&apos;name&apos;] = &apos;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;axiao&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&apos;;$this-&gt;assign(&apos;data&apos;,$arr);return $this-&gt;fetch();&#123;$data.name|raw&#125;//变量输出使用的函数可以支持内置的PHP函数或者用户自定义函数，甚至是静态方法。&#123;:substr(strtoupper(md5($name)),0,3)&#125;//可以在模板中直接使用系统的助手函数进行输出&#123;:app(&apos;cache&apos;)-&gt;get(&apos;name&apos;)&#125;//调用函数或者类的方法及属性，如果你要带命名空间调用类的属性，命名空间中的\需要改成\\才能正常调用&#123;:think\\App::VERSION&#125;&#123;:think\\facade\\Request::get(&apos;name&apos;)&#125;//原样输出：可以使用literal标签来防止模板标签被解析&#123;literal&#125; Hello,&#123;$name&#125;！&#123;/literal&#125;模板布局，继承，标签1.模板布局第一种配置方式：全局配置方式在config\template.php中添加123&apos;layout_on&apos; =&gt; true,&apos;layout_name&apos; =&gt; &apos;layout&apos;,&apos;layout_item&apos; =&gt; &apos;&#123;__CONTENT__&#125;&apos;,view中新建文件layout.html123&#123;include file=&quot;public/header&quot; /&#125; &#123;__CONTENT__&#125;&#123;include file=&quot;public/footer&quot; /&#125;模板渲染时就会自动先加载layout.html内容，然后模板内容会替换{CONTENT} 如果某些页面不需要使用布局模板功能，可以在模板文件开头加上 {NOLAYOUT} 字符串第二种方式：模板标签方式1&#123;layout name=&quot;layout&quot; /&#125;同样view中新建文件layout.html123&#123;include file=&quot;public/header&quot; /&#125; &#123;__CONTENT__&#125;&#123;include file=&quot;public/footer&quot; /&#125;第三种方式：动态方法布局使用内置的layout方法可以更灵活的在程序中控制模板输出的布局功能，尤其适用于局部需要布局或者关闭布局的情况，这种方式也不需要在配置文件中开启layout_on：12345public function add()&#123; $this-&gt;view-&gt;engine-&gt;layout(true); return $this-&gt;fetch(&apos;add&apos;);&#125;同样view中新建文件layout.html123&#123;include file=&quot;public/header&quot; /&#125; &#123;__CONTENT__&#125;&#123;include file=&quot;public/footer&quot; /&#125;或者使用layout方法动态关闭当前模板的布局功能（这种用法可以配合第一种布局方式，例如全局配置已经开启了布局，可以在某个页面单独关闭）：123456public function add()&#123; // 临时关闭当前模板的布局功能 $this-&gt;view-&gt;engine-&gt;layout(false); return $this-&gt;display(&apos;add&apos;);&#125;2.模板继承例如下面定义了一个base.html基础模板：12345678910111213&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;&#123;block name=&quot;title&quot;&#125;标题&#123;/block&#125;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&#123;block name=&quot;menu&quot;&#125;菜单&#123;/block&#125;&#123;block name=&quot;left&quot;&#125;左边分栏&#123;/block&#125;&#123;block name=&quot;main&quot;&#125;主内容&#123;/block&#125;&#123;block name=&quot;right&quot;&#125;右边分栏&#123;/block&#125;&#123;block name=&quot;footer&quot;&#125;底部&#123;/block&#125;&lt;/body&gt;&lt;/html&gt;在渲染的模板中使用继承：123456789101112131415161718192021222324252627282930&#123;extend name=&quot;base&quot; /&#125;&#123;block name=&quot;title&quot;&#125;&#123;$title&#125;&#123;/block&#125;&#123;block name=&quot;menu&quot;&#125;&lt;a href=&quot;/&quot; &gt;首页&lt;/a&gt;&lt;a href=&quot;/info/&quot; &gt;资讯&lt;/a&gt;&lt;a href=&quot;/bbs/&quot; &gt;论坛&lt;/a&gt;&#123;/block&#125;&#123;block name=&quot;left&quot;&#125;&#123;/block&#125;&#123;block name=&quot;main&quot;&#125;&#123;volist name=&quot;list&quot; id=&quot;vo&quot;&#125;&lt;a href=&quot;/new/&#123;$vo.id&#125;&quot;&gt;&#123;$vo.title&#125;&lt;/a&gt;&lt;br/&gt; &#123;$vo.content&#125;&#123;/volist&#125;&#123;/block&#125;&#123;block name=&quot;right&quot;&#125; 最新资讯：&#123;volist name=&quot;news&quot; id=&quot;new&quot;&#125;&lt;a href=&quot;/new/&#123;$new.id&#125;&quot;&gt;&#123;$new.title&#125;&lt;/a&gt;&lt;br/&gt;&#123;/volist&#125;&#123;/block&#125;&#123;block name=&quot;footer&quot;&#125;&#123;__block__&#125; @ThinkPHP 版权所有&#123;/block&#125;上例中，我们可以看到在子模板中使用了extend标签来继承了base模板。在子模板中，可以对基础模板中的区块进行重载定义，如果没有重新定义的话，则表示沿用基础模板中的区块定义，如果定义了一个空的区块，则表示删除基础模板中的该区块内容。 上面的例子，我们就把left区块的内容删除了，其他的区块都进行了重载这一区块中有{block}这个标签，当区块中有这个标记时，就不只是直接重载这个区块，它表示引用所继承模板对应区块的内容到这个位置，最终这个区块是合并后的内容。所以这里footer区块最后的内容是： 底部@ThinkPHP 版权所有引入文件，传递参数{include file=&quot;Public/header&quot; title=&quot;$title&quot; keywords=&quot;开源WEB开发框架&quot; /}模板输出替换12345//如果需要全局替换的话，可以直接在template.php配置文件中添加：&apos;tpl_replace_string&apos; =&gt; [ &apos;__STATIC__&apos;=&gt;&apos;/static&apos;, &apos;__JS__&apos; =&gt; &apos;/static/javascript&apos;,]引入css,js文件123456//1.模板输出替换__STATIC__/js/jquery.js//2.注意：如果配置文件app.php中（// URL伪静态后缀）&apos;url_html_suffix&apos; =&gt; &apos;html&apos;,&#123;:url(&apos;/public/static/js/jquery.js&apos;,&apos;&apos;,&apos;&apos;)&#125;//3.如果配置文件app.php中（// URL伪静态后缀）&apos;url_html_suffix&apos; =&gt; &apos;&apos;,&#123;:url(&apos;/public/static/js/jquery.js&apos;)&#125;模板标签1.循环标签12345678910111213141516171819202122232425262728293031323334&#123;foreach $list as $key=&gt;$vo &#125; &#123;$vo.id&#125;:&#123;$vo.name&#125;&#123;/foreach&#125;&#123;volist name=&quot;list&quot; id=&quot;vo&quot; &#125;&#123;$key&#125;.&#123;$vo.name&#125;&#123;/volist&#125;//为空的时候输出提示：$this-&gt;assign(&apos;empty&apos;,&apos;&lt;span class=&quot;empty&quot;&gt;没有数据&lt;/span&gt;&apos;);$this-&gt;assign(&apos;list&apos;,$list);&#123;volist name=&quot;list&quot; id=&quot;vo&quot; empty=&quot;$empty&quot; &#125;&#123;$vo.id&#125;|&#123;$vo.name&#125;&#123;/volist&#125;//支持输出查询结果中的部分数据，例如输出其中的第5～15条记录&#123;volist name=&quot;list&quot; id=&quot;vo&quot; offset=&quot;5&quot; length=&apos;10&apos;&#125;&#123;$vo.name&#125;&#123;/volist&#125;//输出偶数记录&#123;volist name=&quot;list&quot; id=&quot;vo&quot; mod=&quot;2&quot; &#125;&#123;eq name=&quot;mod&quot; value=&quot;1&quot;&#125;&#123;$vo.name&#125;&#123;/eq&#125;&#123;/volist&#125;//mod属性还用于控制一定记录的换行，例如：&#123;volist name=&quot;list&quot; id=&quot;vo&quot; mod=&quot;5&quot; &#125;&#123;$vo.name&#125;&#123;eq name=&quot;mod&quot; value=&quot;4&quot;&#125;&lt;br/&gt;&#123;/eq&#125;&#123;/volist&#125;//for循环：开始值、结束值、步进值和循环变量都可以支持变量，开始值和结束值是必须，其他是可选。comparison 的默认值是lt，name的默认值是i，步进值的默认值是1&#123;for start=&quot;开始值&quot; end=&quot;结束值&quot; comparison=&quot;&quot; step=&quot;步进值&quot; name=&quot;循环变量名&quot; &#125;&#123;/for&#125;2.比较标签12345678910111213141516171819202122232425//等于&#123;eq name=&quot;name&quot; value=&quot;value&quot;&#125;相等&#123;else/&#125;不相等&#123;/eq&#125;//对变量使用函数 当vo对象的属性值的字符串长度等于5就输出&#123;eq name=&quot;vo:name|strlen&quot; value=&quot;5&quot;&#125;&#123;$vo.name&#125;&#123;/eq&#125;//变量名可以支持系统变量的方式&#123;eq name=&quot;Think.get.name&quot; value=&quot;value&quot;&#125;相等&#123;else/&#125;不相等&#123;/eq&#125;//所有的比较标签可以统一使用compare标签（其实所有的比较标签都是compare标签的别名）&#123;compare name=&quot;name&quot; value=&quot;5&quot; type=&quot;eq&quot;&#125;value&#123;/compare&#125;//所有比较标签eq或者 equal 等于neq 或者notequal 不等于gt 大于egt 大于等于lt 小于elt 小于等于heq 恒等于nheq 不恒等于3.条件判断1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//IF标签&#123;if ( $name == 1) OR ( $name &gt; 100) &#125; value1&#123;elseif $name == 2 /&#125;value2&#123;else /&#125; value3&#123;/if&#125;//支持php函数&#123;if strtoupper($user[&apos;name&apos;]) == &apos;THINKPHP&apos; &#125;ThinkPHP&#123;else /&#125; other Framework&#123;/if&#125;//SWITCH标签&#123;switch User.level&#125; &#123;case 1&#125;value1&#123;/case&#125; &#123;case 2&#125;value2&#123;/case&#125; &#123;default /&#125;default&#123;/switch&#125;//可以使用函数以及系统变量&#123;switch User.level|intval &#125; &#123;case $int&#125;admin&#123;/case&#125; &#123;default /&#125;default&#123;/switch&#125;&#123;switch Think.get.type&#125; &#123;case gif|png|jpg&#125;图像格式&#123;/case&#125; &#123;default /&#125;其他格式&#123;/switch&#125;//范围判断（in/notin/ between/ notbetween）&#123;in name=&quot;id&quot; value=&quot;1,2,3&quot;&#125;id在范围内&#123;else/&#125;id不在范围内&#123;/in&#125;//present/notpresent标签用于判断某个变量是否已经定义&#123;present name=&quot;name&quot;&#125;name已经赋值&#123;else /&#125;name还没有赋值&#123;/present&#125;//empty/notempty标签用于判断某个变量是否为空&#123;empty name=&quot;name&quot;&#125;name为空&#123;else /&#125;name不为空&#123;/empty&#125;//defined/notdefined标签用于判断某个常量是否有定义&#123;defined name=&quot;NAME&quot;&#125;NAME常量已经定义&#123;else /&#125;NAME常量未定义&#123;/defined&#125;4.传统方式的导入外部JS和CSS文件的方法是直接在模板文件使用：12&lt;script type=&apos;text/javascript&apos; src=&apos;/static/js/common.js&apos;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/style.css&quot; /&gt;系统提供了专门的标签来简化上面的导入：1234567&#123;load href=&quot;/static/js/common.js&quot; /&#125;&#123;load href=&quot;/static/css/style.css&quot; /&#125;//并且支持同时加载多个资源文件&#123;load href=&quot;/static/js/common.js,/static/css/style.css&quot; /&#125;//系统还提供了两个标签别名js和css 用法和load一致&#123;js href=&quot;/static/js/common.js&quot; /&#125;&#123;css href=&quot;/static/css/style.css&quot; /&#125;5.在模板文件中定义变量1234567&#123;assign name=&quot;var&quot; value=&quot;123&quot; /&#125;&#123;assign name=&quot;var&quot; value=&quot;$val&quot; /&#125;&#123;assign name=&quot;var&quot; value=&quot;$Think.get.name&quot; /&#125;//模板中定义常量&#123;define name=&quot;MY_DEFINE_NAME&quot; value=&quot;3&quot; /&#125;&#123;define name=&quot;MY_DEFINE_NAME&quot; value=&quot;$name&quot; /&#125;&#123;define name=&quot;MY_DEFINE_NAME&quot; value=&quot;$Think.get.name&quot; /&#125;OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>view</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xdebug调试插件的安装与使用]]></title>
    <url>%2Fxdebug.html</url>
    <content type="text"><![CDATA[phpstudy插件xdebug的配置sublime插件xdebug的配置谷歌浏览器插件xdebug的配置phpstorm插件xdebug的配置phpstudy插件xdebug的配置1.1 下载对应版本的xdebug，xdebug网站提供一个自动分析你系统对应的xdebug版本的页面，网址是https://xdebug.org/wizard.php1.2 在页面中需要粘贴进去php版本信息，也就是phpinfo()函数的信息，如下图：1.3 ctrl+A全选这个页面的信息，然后粘贴到第一个图片的页面中。1.4 点击 analyse my phpinfo() output按钮下载php_xdebug-2.7.2-7.2-vc15-nts.dll将下载的文件移动到F:\phpStudy\PHPTutorial\php\php-7.2.1-nts\ext1.5 修改php.ini配置1234567zend_extension = &quot;F:\phpStudy\PHPTutorial\php\php-7.2.1-nts\ext\php_xdebug-2.7.2-7.2-vc15-nts.dll&quot;xdebug.idekey=&quot;sublime.xdebug&quot;xdebug.remote_enable = Onxdebug.remote_host = &quot;localhost&quot;xdebug.remote_port = 9001xdebug.remote_handler = &quot;dbgp&quot;xdebug.remote_connect_back=11.6 重新启动phpstudy服务器sublime插件xdebug的配置打开sublime 输入install Package如下显示在按回车接着会出现如下界面，接着输入xdebug client安装这个插件如果安装不了，先下载channel_v3.json文件，下载地址https://pan.baidu.com/s/1nog5wxTo4pufxvte0FxevA，提取码：mxm1接着在Preferences-&gt;Package Setting-&gt;Package Control -&gt;Setting default设置中，修改代码（添加channel_v3.json文件所在位置的代码），至此，就可以正常使用install package下载插件。123[ &quot;E:/sublime/channel_v3.json&quot;],打开sublime设置端口指向9001步骤：工具 -&gt;xdebug-&gt;settings user然后填123&#123; &quot;port&quot;: 9001,&#125;之后再启动xdebug ： 工具 -&gt;xdebug-&gt;Start Debugging;快捷键：ctrl+f8 开启/关闭断点ctrl+shift+f9 开启xdebugctrl+shift+f10 关闭xdebug注：笔记本要多按一个Fn键谷歌浏览器插件xdebug的配置去chrome插件扩展商店安装Xdebug helper扩展，需要vpn翻墙（看vpn教程篇）安装之后浏览器右上角就会有一只虫子图标，右键点击进入选项设置如下图设置保存3.点击那个虫子打开为绿色即可phpstorm插件xdebug的配置1.修改php.ini配置，重启phpstudy123456xdebug.remote_enable=1xdebug.remote_host=&quot;localhost&quot;xdebug.remote_port=9001xdebug.remote_autostart=1xdebug.remote_handler=&quot;dbgp&quot;xdebug.idekey=&quot;PHPSTORM&quot;2.打开phpStorm，进入File&gt;Settings&gt;Languages &amp; Frameworks&gt;PHP，调试php版本如下图：如果上图第三步没有上述选项，则如下图自己去找到php.exe文件地址3.进入File&gt;Settings&gt;Languages &amp; Frameworks&gt;PHP&gt;Servers，点击右边+，这里要填写服务器端的相关信息，name填localhost，host填localhost，port填80，debugger选XDebug4.进入File&gt;Settings&gt;Languages &amp; Frameworks&gt;PHP&gt;Debug，看到XDebug选项卡，Debug port填9001，其他默认5.进入File&gt;Settings&gt;Languages &amp; Frameworks&gt;PHP&gt;Debug&gt;DBGp Proxy，IDE key 填 PHPSTORM，host 填localhost，port 填806.如下图所示，点击电话图标为绿色，开启xdebug监听，点击虫子，打开调试信息显示面板。7.修改谷歌浏览器xdebug的IDE key为PHPSTORM。8.鼠标点击phpstorm行号后面给这行打断点，刷新浏览器，即可看到调试信息。OVER！！！]]></content>
      <categories>
        <category>插件</category>
      </categories>
      <tags>
        <tag>phpstorm</tag>
        <tag>xdebug</tag>
        <tag>插件</tag>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1数据库操作]]></title>
    <url>%2Ftp-curd.html</url>
    <content type="text"><![CDATA[db类操作数据库db类查询构造器model操作数据库分批数据处理|大批量数据处理model关联操作关联预载入模型软删除一.db类操作数据库1.连接数据库配置config\database.php，12use Db;Db::table(&apos;users&apos;)-&gt;select();2.连接多个数据库，在配置config\database.php中添加1234567891011121314&apos;db_config2&apos; =&gt; [ // 数据库类型 &apos;type&apos; =&gt; &apos;mysql&apos;, // 服务器地址 &apos;hostname&apos; =&gt; &apos;127.0.0.1&apos;, // 数据库名 &apos;database&apos; =&gt; &apos;axys&apos;, // 用户名 &apos;username&apos; =&gt; &apos;root&apos;, // 密码 &apos;password&apos; =&gt; &apos;root&apos;, // 端口 &apos;hostport&apos; =&gt; &apos;3306&apos;,]或者1&apos;db_config3&apos; =&gt; &apos;mysql://root:root@127.0.0.1:3306/axys#utf8&apos;,操作1Db::connect(&apos;db_config2&apos;)-&gt;table(&apos;users&apos;)-&gt;select();二.db类查询构造器1.think\db\下面有三个文件，分别为：Connection ： 连接数据库Query ：执行数据库sql语句的操作Builder ：生成sql语句Db-&gt;Connection-&gt; Builder-&gt; Query2.db类的增删改查12345678910111213141516171819202122use Db;//增$data = [ [&apos;user_id&apos;=&gt;&apos;1&apos;,&apos;visit_ip&apos;=&gt;&apos;192.168.1.1&apos;,&apos;visit_time&apos;=&gt;123456], [&apos;user_id&apos;=&gt;&apos;2&apos;,&apos;visit_ip&apos;=&gt;&apos;127.0.0.1&apos;,&apos;visit_time&apos;=&gt;123123]];$res = Db::table(&apos;ax_visit&apos;)-&gt;insertAll($data);//删$res = Db::table(&apos;ax_visit&apos;)-&gt;where(&apos;visit_id&apos;,3)-&gt;delete();//改$data = [ &apos;visit_time&apos;=&gt;333333];$res = Db::table(&apos;ax_visit&apos;)-&gt;where(&apos;visit_id&apos;,2)-&gt;update($data);//查$result = Db::table(&apos;ax_visit&apos;)-&gt;field(&apos;visit_id&apos;)-&gt;select();$result = Db::table(&apos;ax_visit&apos;)-&gt;field(&apos;visit_id&apos;)-&gt;fetchSql()-&gt;select(); //sql语句$result = Db::table(&apos;ax_visit&apos;)-&gt;where(&apos;visit_id&apos;,1)-&gt;value(&apos;visit_time&apos;); //查询某个字段$result = Db::table(&apos;ax_visit&apos;)-&gt;where(&apos;visit_ip&apos;,&apos;192.168.1.1&apos;)-&gt;column(&apos;visit_time&apos;); //列查询,返回数组$result = Db::table(&apos;ax_visit&apos;)-&gt;where(&apos;visit_ip&apos;,&apos;192.168.1.1&apos;)-&gt;column(&apos;visit_time&apos;,&apos;visit_id&apos;); //列查询,指定visit_id字段作为索引$result = Db::table(&apos;ax_visit&apos;)-&gt;count(); //查询总数$result = Db::table(&apos;ax_visit&apos;)-&gt;max(&apos;user_id&apos;); //查询最大聚合查询count max min avg sum连表查询：12345$result = Db::table(&apos;tp_data&apos;) -&gt;field(&quot;tp_data.*,tp_users.username as users,tp_users.sex&quot;) -&gt;join(&quot;tp_users&quot;,&quot;tp_users.id=tp_data.id&quot;) -&gt;where(&quot;tp_data.status&quot;,&quot;&gt;&quot;,2) -&gt;select();三.model操作数据库12345678910111213141516171819202122232425262728293031323334353637383940414243//增insert$data = [ [&apos;user_id&apos;=&gt;&apos;3&apos;,&apos;visit_ip&apos;=&gt;&apos;192.168.1.10&apos;,&apos;visit_time&apos;=&gt;123456], [&apos;user_id&apos;=&gt;&apos;4&apos;,&apos;visit_ip&apos;=&gt;&apos;127.0.0.11&apos;,&apos;visit_time&apos;=&gt;123123]];$res = Visit::insertAll($data);//增create$data = [ &apos;user_id&apos;=&gt;&apos;3&apos;, &apos;visit_ip&apos;=&gt;&apos;192.168.1.10&apos;, &apos;visit_time&apos;=&gt;123456];$res = Visit::create($data);//增save$visit = new Visit;$data = [ [&apos;user_id&apos;=&gt;&apos;3&apos;,&apos;visit_ip&apos;=&gt;&apos;192.168.1.10&apos;,&apos;visit_time&apos;=&gt;123456], [&apos;user_id&apos;=&gt;&apos;4&apos;,&apos;visit_ip&apos;=&gt;&apos;127.0.0.11&apos;,&apos;visit_time&apos;=&gt;123123]];$res = $visit-&gt;saveAll($data);//删$res = Visit::where(&apos;visit_id&apos;,4)-&gt;delete();//改update$data = [ &apos;visit_ip&apos;=&gt;&apos;101.168.1.10&apos;];$res = Visit::where(&apos;visit_id&apos;,7)-&gt;update($data);//改save$visit = new Visit;$data = [ &apos;visit_ip&apos;=&gt;&apos;101.168.1.10&apos;];$res = $visit-&gt;save($data,[&apos;visit_id&apos;=&gt;6]);//查$result = Visit::get(2); //注意主键(primarykey)需要在model中设置成员属性protected $pk = &apos;visit_id&apos;;$result = Visit::all();$result = Visit::field(&apos;visit_id&apos;)-&gt;select();$result = Visit::find(2); //注意主键(primarykey)需要在model中设置成员属性protected $pk = &apos;visit_id&apos;;$result = Visit::where(&apos;visit_id&apos;,1)-&gt;value(&apos;visit_time&apos;);$result = Visit::where(&apos;visit_ip&apos;,&apos;192.168.1.1&apos;)-&gt;column(&apos;visit_time&apos;);$result = Visit::where(&apos;visit_ip&apos;,&apos;192.168.1.1&apos;)-&gt;column(&apos;visit_time&apos;,&apos;visit_id&apos;);$result = Visit::count();$result = Visit::max(&apos;user_id&apos;);四.分批数据处理|大批量数据处理1.分批数据处理12345678910Db::table(&apos;ax_visit&apos;)-&gt;where(&apos;user_id&apos;,&apos;&gt;&apos;,2)-&gt;chunk(6, function($visit) &#123; foreach ($visit as $v) &#123; // 处理结果集... if($v-&gt;visit_ip == &apos;192.168.1.1&apos;)&#123; return false; &#125; &#125;&#125;); //&#125;,&apos;visit_time&apos;) 指定字段chunk方法的处理默认是根据主键查询，支持指定字段chunk方法一般用于命令行操作批处理数据库的数据，不适合WEB访问处理大量数据，很容易导致超时。2.大批量数据处理1234$cursor = Db::table(&apos;ax_visit&apos;)-&gt;where(&apos;user_id&apos;, 3)-&gt;cursor();foreach($cursor as $user)&#123; echo $user[&apos;visit_ip&apos;];&#125;如果你需要处理大量的数据，可以使用新版提供的游标查询功能，该查询方式利用了PHP的生成器特性，可以大幅减少大量数据查询的内存占用问题。cursor方法返回的是一个生成器对象，user变量是数据表的一条数据（数组）。五.model关联操作总结：以下model中关联函数的三个参数（关联的模型，关联模型的关联字段，当前模型的关联字段）关联一对一1.关联一对一增例子：新增用户关联汽车，model\Users.php中添加123public function car()&#123; return $this-&gt;hasOne(&apos;Car&apos;,&apos;uid&apos;,&apos;id&apos;);&#125;hasOne(‘关联模型’,’外键’,’主键’);关联模型（必须）：关联的模型名或者类名外键：默认的外键规则是当前模型名（不含命名空间，下同）+_id ，例如user_id主键：当前模型主键，默认会自动获取也可以指定传入（关联的外键表的主键）注意：外键如果是user表中的car_id，则外键和主键位置互换，且主键则是car表的主键控制器中12345678910111213141516171819use app\index\model\Users;// 新增用户关联汽车$data = [ &apos;username&apos; =&gt; &apos;axiao&apos;];$users = new Users;if($users-&gt;save($data))&#123; $data = [ &apos;carnumber&apos; =&gt; &apos;晋NOK110&apos; ]; $res = $users-&gt;car()-&gt;save($data); if($res)&#123; echo &apos;success&apos;; &#125;else&#123; echo &apos;fail&apos;; &#125;&#125;else&#123; echo &apos;fail&apos;;&#125;2.关联一对一删1234567$user = Users::get(10);if($user &amp;&amp; $user-&gt;delete())&#123; $user-&gt;car-&gt;delete(); echo &apos;success&apos;;&#125;else&#123; echo &apos;fail&apos;;&#125;3.关联一对一改12345678910111213$user = Users::get(12);$data = [ &apos;username&apos; =&gt; &apos;adai&apos;];if($user &amp;&amp; $user-&gt;save($data))&#123; $data = [ &apos;carnumber&apos; =&gt; &apos;晋M23456&apos; ]; $user-&gt;car-&gt;save($data); echo &apos;success&apos;;&#125;else&#123; echo &apos;fail&apos;;&#125;4.关联一对一查12$user = Users::get(12);$result = $user-&gt;car;注意：关联一对一只有新增是使用的-&gt;car()，其他都是-&gt;car关联一对多5.关联一对多增model\Users.php中添加123public function comment()&#123; return $this-&gt;hasMany(&apos;Comment&apos;,&apos;uid&apos;,&apos;id&apos;);&#125;hasMany(‘关联模型’,’外键’,’主键’);关联模型（必须）：关联的模型名或者类名外键：默认的外键规则是当前模型名（不含命名空间，下同）+_id ，例如user_id主键：当前模型主键，默认会自动获取也可以指定传入（关联的外键表的主键）注意：外键如果是user表中的comment_id，则外键和主键位置互换，且主键则是comment表的主键控制器中12345678use app\index\model\Users;// 一对多批量新增$user = Users::get(15);$data = [ [&apos;comment&apos;=&gt;&apos;test111&apos;], [&apos;comment&apos;=&gt;&apos;test222&apos;],];$user-&gt;comment()-&gt;saveAll($data);6.关联一对多删1234567// 删除部分关联数据，不会删除该条数据$user = Users::get(13);$user-&gt;comment()-&gt;where(&quot;comment&quot;,&apos;test222&apos;)-&gt;delete();// 删除所有的关联数据，同时删除该条数据$user = Users::get(14,&apos;comment&apos;);$user-&gt;together(&apos;comment&apos;)-&gt;delete();7.关联一对多改123456// 查询构造器的update方法进行更新(更新全部comment = test111)$user = Users::get(13);$user-&gt;comment()-&gt;where(&quot;comment&quot;,&quot;test111&quot;)-&gt;update([&quot;comment&quot;=&gt;&quot;test222&quot;]);// save方法只更新第一条comment = test111，不能用where$user = Users::get(13);$user-&gt;comment()-&gt;getByComment(&quot;test111&quot;)-&gt;save([&quot;comment&quot;=&gt;&quot;test222&quot;]);8.关联一对多查1234567891011$user = Users::get(13);// 获取该用户的所有评论$comments = $user-&gt;comment;// 获取该用户评论为‘test111’的评论$comments = $user-&gt;comment()-&gt;where(&apos;comment&apos;,&apos;test111&apos;)-&gt;select();// 查询有评论过的用户列表 $user = Users::has(&apos;comment&apos;)-&gt;select();// 查询评论过两次以上的用户 $user = Users::has(&apos;comment&apos;,&apos;&gt;=&apos;,2)-&gt;select();// 查询评论内容有“test222”的用户 $user = Users::hasWhere(&apos;comment&apos;,[&apos;comment&apos;=&gt;&apos;test222&apos;])-&gt;select();关联多对多belongsToMany(‘关联模型’,’中间表’,’外键’,’关联键’);关联模型（必须）：关联的模型名或者类名中间表：默认规则是当前模型名+_+关联模型名 （可以指定模型名），中间表名无需添加表前缀外键：中间表的当前模型外键，默认的外键名规则是关联模型名+_id关联键：中间表的当前模型关联键名，默认规则是当前模型名+_id例子：tp_region 地区表tp_shipping_area 物流配置表tp_area_region 地区对应表（中间表）model\Region.php中添加123456public function shippingArea()&#123; return $this-&gt;belongsToMany(&apos;ShippingArea&apos;,&apos;area_region&apos;,&apos;shipping_area_id&apos;,&apos;region_id&apos;);&#125;public function arearegion()&#123; return $this-&gt;belongsToMany(&apos;area_region&apos;,&apos;\\app\\model\\AreaRegion&apos;);&#125;model\ShippingArea.php中添加123public function region()&#123; return $this-&gt;belongsToMany(&apos;Region&apos;,&apos;area_region&apos;,&apos;region_id&apos;,&apos;shipping_area_id&apos;);&#125;中间表model\AreaRegion.php中添加1234567namespace app\index\model;use think\model\Pivot;class AreaRegion extends Pivot&#123; // 中间表模型的基类Pivot默认关闭了时间戳自动写入，上面的中间表模型则开启了时间戳字段自动写入。 protected $autoWriteTimestamp = true;&#125;控制器中12345678910111213141516171819202122232425262728293031323334353637use app\index\model\Region;use app\index\model\ShippingArea;use app\index\model\AreaRegion;// 关联新增$region = Region::getByName(&quot;北京市&quot;);$result = $region-&gt;shippingArea()-&gt;save([&quot;shipping_area_name&quot; =&gt; &quot;一线大城市&quot;]);// 新增多条$region = Region::getByName(&quot;北京市&quot;);$region-&gt;shippingArea()-&gt;saveAll([ [&quot;shipping_area_name&quot; =&gt; &quot;中国首都&quot;], [&quot;shipping_area_name&quot; =&gt; &quot;中国大城市&quot;],]);// 关联中间表填数据$region = Region::getByName(&quot;北京市&quot;);$shippingArea = ShippingArea::getByShippingAreaName(&quot;中国首都&quot;);$region-&gt;shippingArea()-&gt;attach($shippingArea); //使用attach方法增加中间表数据// 关联删除$region = Region::getByName(&quot;北京市&quot;);$shippingArea = ShippingArea::getByShippingAreaName(&quot;一线大城市&quot;);$region-&gt;shippingArea()-&gt;detach($shippingArea); //删除关联数据，但不删除关联模型数据$region-&gt;shippingArea()-&gt;detach($shippingArea,true); //删除关联数据，并删除关联模型// 关联查询$region = Region::getByName(&quot;北京市&quot;,&quot;shippingArea&quot;);// $this-&gt;assign(&quot;list&quot;,$region-&gt;shippingArea);// return $this-&gt;fetch();echo $region-&gt;shippingArea[0]-&gt;shipping_area_name;echo $region-&gt;shippingArea[1]-&gt;shipping_area_name;//查询中间表$region = Region::get(2);$region-&gt;arearegion;//这样也执行关联查询$region = Region::get(1,&quot;shippingArea&quot;);关联预载入1.支持预载入多个关联1$list = User::with(&apos;profile,book&apos;)-&gt;select([1,2,3]);2.可以在模型的get和all方法中使用预载入，在第二个参数中传入预载入信息即可。例如下面的用法和使用with方法加select方法是等效的：1$list = User::all([1,2,3],&apos;profile,book&apos;);3.如果要指定属性查询，可以使用：123$list = User::field(&apos;id,name&apos;)-&gt;with([&apos;profile&apos;=&gt;function($query)&#123; $query-&gt;field(&apos;user_id,email,phone&apos;);&#125;])-&gt;select([1,2,3]);4.一对一关联预载入支持两种方式：JOIN方式（一次查询）和IN方式（两次查询，默认方式），如果要使用JOIN方式关联预载入，在关联定义方法中添加1return $this-&gt;hasOne(&apos;Profile&apos;)-&gt;setEagerlyType(0);5.使用JOIN方式查询的话 关联定义的时候不能使用field方法指定字段，只能在预载入查询的时候使用withField方法指定字段，例如：123$list = User::with([&apos;profile&apos; =&gt; function($query)&#123; $query-&gt;withField(&apos;truename,email&apos;);&#125;])-&gt;select([1,2,3]);6.V5.1.22+版本开始，推荐使用withJoin方法进行关联预载入代替使用setEagerlyType方法定义JOIN方式。123$list = User::withJoin([&apos;profile&apos; =&gt; function($query)&#123; $query-&gt;withField(&apos;truename,email&apos;);&#125;])-&gt;select([1,2,3]);7.延迟预载入：延迟预载入仅针对多个数据的查询，因为单个数据的查询用延迟预载入和关联惰性查询没有任何区别，所以不需要使用延迟预载入。1234// 查询数据集$list = User::all([1,2,3]);// 延迟预载入$list-&gt;load(&apos;cards&apos;);8.例子：tp_shop的三个关联表[用户（tp_user）-&gt;角色（tp_user_role）-&gt;权限分组（tp_user_group）]model\User.php中1234protected $pk = &apos;uid&apos;;public function userRole()&#123; return $this-&gt;hasOne(&apos;UserRole&apos;,&apos;role_id&apos;,&apos;role_id&apos;);&#125;model\UserRole.php中1234protected $pk = &apos;role_id&apos;;public function userGroup()&#123; return $this-&gt;hasOne(&apos;UserGroup&apos;,&apos;group_id&apos;,&apos;group_id_array&apos;);&#125;model\UserGroup.php中1protected $pk = &apos;group_id&apos;;控制器中123456789User::with([ &apos;userRole&apos; =&gt; function($userRole)&#123; $userRole-&gt;with([ &apos;userGroup&apos; =&gt; function($userGroup)&#123; $userGroup-&gt;field(&apos;group_id,group_name&apos;); &#125; ])-&gt;field(&apos;role_id,role_name&apos;); &#125;])-&gt;field(&apos;role_id,user_name,user_password&apos;)-&gt;where(&apos;user_name&apos;,&apos;admin&apos;)-&gt;select();模型软删除（只对模型有用）1.数据表需要添加一个字段delete_time，字段类型最好用int来保存时间戳，默认值为空（用于记录软删除的时间）2.model\Users.php，中需要引进SoftDelete类12345678910&lt;?phpnamespace app\index\model;use think\Model;use think\model\concern\SoftDelete;class Users extends Model&#123; use SoftDelete; protected $deleteTime = &apos;delete_time&apos;; //protected $defaultSoftDelete = 0; //注意：这个设置为0，软删除不会记录删除时间（delete_time字段依旧为空），不设置则可以记录&#125;3.操作1234567891011121314151617181920// 软删除Users::destroy(1);// 真实删除Users::destroy(1,true);$user = Users::get(1);// 软删除$user-&gt;delete();// 真实删除$user-&gt;delete(true);//默认情况下查询的数据不包含软删除数据，如果需要包含软删除的数据，可以使用下面的方式查询：Users::withTrashed()-&gt;find(1);//如果仅仅需要查询软删除的数据，可以使用：Users::onlyTrashed()-&gt;find(1);//恢复被软删除的数据$user = Users::onlyTrashed()-&gt;find(1);$user-&gt;restore();OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>curd</tag>
        <tag>tp5.1</tag>
        <tag>Db</tag>
        <tag>model</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1容器和容器注入]]></title>
    <url>%2Ftp-container.html</url>
    <content type="text"><![CDATA[Ioc：控制反转：控制反转就是加将组件的依赖关系从程序内部提到外部来管理DI：依赖注入；依赖注入是指将组件的依赖通过外部以参数的方式或者其他方式注入以上作用都是解耦例子：1.耦合度高123456789101112131415161718192021class DbMysql &#123; public function query() &#123; return &apos;这是 db操作mysql的类&apos;; &#125;&#125;class Controller&#123; private $db; public function __construct() &#123; $this-&gt;db = new DbMysql(); &#125; public function action() &#123; $this-&gt;db-&gt;query(); &#125;&#125;$c = new Controller();$c-&gt;action();controller 是需要dbmysql才能操作我们的数据库，有依赖关系，耦合度高2.依赖注入DI:12345678910111213141516171819202122class DbMysql &#123; public function query() &#123; return &apos;这是 db操作mysql的类&apos;; &#125;&#125;class Controller&#123; private $db; public function __construct(DbMysql $dbMysql) &#123; $this-&gt;db = $dbMysql; &#125; public function action() &#123; $this-&gt;db-&gt;query(); &#125;&#125;$db = new DbMysql();$c = new Controller($db);$c-&gt;action();3.Ioc，利用容器存取12345678910111213141516171819202122232425262728293031323334353637383940414243444546class DbMysql &#123; public function query() &#123; echo &apos;这是 db操作mysql的类&apos;; &#125;&#125;class DbOracle &#123; public function query() &#123; echo &apos;这是 db操作oracle的类&apos;; &#125;&#125;class Controller&#123; private $db; public function __construct($db) &#123; $this-&gt;db = $db; &#125; public function action() &#123; $this-&gt;db-&gt;query(); &#125;&#125;class Container&#123; private $bind = []; public function bind($key, Closure $value) &#123; $this-&gt;bind[$key] = $value; &#125; public function make($key) &#123; $object = $this-&gt;bind[$key]; return $object(); &#125;&#125;$app = new Container();// 创建出容器类$app-&gt;bind(&apos;mysql&apos;, function()&#123; return new DbMysql();&#125;);$app-&gt;bind(&apos;controller&apos;, function () use ($app) &#123; return new Controller($app-&gt;make(&apos;mysql&apos;));&#125;);echo $app-&gt;make(&apos;controller&apos;)-&gt;action();创建一个容器，把Controller 以及 DbMysql创建实例这个过程交给 Container容器绑定1.common新建文件Vessel.php，代码如下：12345678910&lt;?phpnamespace app\common;class Vessel&#123; // 需要使用的时候 public function index() &#123; return &apos;this is common vessel index()&apos;; &#125;&#125;2.配置application\provider.php123return [ &apos;vessel&apos; =&gt; \app\common\Vessel::class];3.控制器中便可以利用app()助手函数直接使用Vessel.php中的方法1return app(&apos;vessel&apos;)-&gt;index();OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>container</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1请求响应]]></title>
    <url>%2Ftp-request.html</url>
    <content type="text"><![CDATA[三种方法获取接收值1.1234567891011use Request;Request::get();Request::post();Request::param();if(Request::isPost())&#123;&#125;if(Request::isMobile)&#123;&#125; //是否手机访问Request::module(); //模块名Request::controller(); Request::action(); //方法名2.助手函数12345678910request()-&gt;get();request()-&gt;post();request()-&gt;param();if(request()-&gt;isPost())&#123;&#125;if(request()-&gt;isMobile)&#123;&#125; //是否手机访问request()-&gt;module(); //模块名request()-&gt;controller(); request()-&gt;action(); //方法名3.依赖注入12345678910111213use Request;public function index(Request $request)&#123; $request::get(); $request::post(); $request::param(); if($request::isPost())&#123; &#125; if($request::isMobile)&#123; &#125; //是否手机访问 $request::module(); //模块名 $request::controller(); $request::action(); //方法名&#125;助手函数json()xml() //数据类型默认是think为根节点，如果想一次性解决根节点的修改可以直接修改源码Think\respones\Xml中的&#39;root_node&#39;=&gt;&#39;xml&#39;重定向return redirect(“index\index\login?token=1”);return redirect(“index\index\login”, [‘token’ =&gt;1]);OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>request</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1中间件]]></title>
    <url>%2Ftp-middleware.html</url>
    <content type="text"><![CDATA[命令创建中间件php think make:middleware AuthMiddleware路径：app\http\middleware\AuthMiddleware.php中间件相当于漏斗过滤器，一层一层过滤，它是对项目请求做处理，在用户访问我们的项目时，中间件就可以对于这个请求来判断用户是否有权限，或者判断用户是够请求更多一般用于api开发，过滤header头，过滤模块访问权限都可使用aop(面向切面)：在项目中我们做一些操作的时候我们往往需要执行很多相似的操作，比如：权限的校验，微信支付成功对于用户的通知中间件是对用户请求做处理，而钩子则是对用户动作的处理一.app\http\middleware\AuthMiddleware.php，代码如下：1234567891011121314&lt;?phpnamespace app\http\middleware;use Log;class AuthMiddleware&#123; public function handle($request, \Closure $next) &#123; if (!$request-&gt;param(&apos;token&apos;)) &#123; Log::write(&quot;用户登入失败&quot;); return redirect(&apos;index/index/login&apos;); &#125; return $next($request); &#125;&#125;二.使用1.全局使用 application下面创建middleware.php文件，代码如下：12345&lt;?php// 全局中间件 return [ \app\http\middleware\AuthMiddleware::class ];2.模块使用 只希望单独一个模块起作用就把application下面的middleware.php放在对应模块下 3.单独设置控制器或一些方法使用和禁用，注意需要注释middleware.php中的配置 + 例：Index.php控制器使用，在该控制器中加入成员属性，代码如下：123protected $middleware = [ &apos;AuthMiddleware&apos;];+ 例：Index.php控制器中login,hello紧用，在该控制器中加入成员属性，代码如下：12345protected $middleware = [ // &apos;except&apos; =&gt; [&apos;demo&apos;] 设置中间件只针对于 某一些方法不起效果 // &apos;only&apos; =&gt; [&apos;demo&apos;] 设置中间件只针对于 某一些方法起效果 &apos;AuthMiddleware&apos; =&gt; [&apos;except&apos; =&gt; [&apos;login&apos;,&apos;hello&apos;]],];三.注意事项和例子1.中间件handle方法的返回值必须是一个Response对象。1return response($parameter);2.判断当前浏览器环境是在微信或支付宝1234567891011121314151617namespace app\http\middleware;/** * 访问环境检查，是否是微信或支付宝等 */class InAppCheck&#123; public function handle($request, \Closure $next) &#123; if (preg_match(&apos;~micromessenger~i&apos;, $request-&gt;header(&apos;user-agent&apos;))) &#123; $request-&gt;InApp = &apos;WeChat&apos;; &#125; else if (preg_match(&apos;~alipay~i&apos;, $request-&gt;header(&apos;user-agent&apos;))) &#123; $request-&gt;InApp = &apos;Alipay&apos;; &#125; return $next($request); &#125;&#125;然后在你的移动版的module里添加一个middleware.php文件例如：/path/application/mobile/middleware.php123return [ app\http\middleware\InAppCheck::class,];然后在你的controller中可以通过$this-&gt;request-&gt;InApp获取相关的值四.注册路由中间件123456789101112131415161718192021222324252627282930313233343536//最常用的中间件注册方式是注册路由中间件Route::rule(&apos;hello/:name&apos;,&apos;hello&apos;) -&gt;middleware(&apos;AuthMiddleware&apos;);//或者使用完整的中间件类名Route::rule(&apos;hello/:name&apos;,&apos;hello&apos;) -&gt;middleware(app\http\middleware\AuthMiddleware::class);//全局中间件Route::get(&apos;index/:controller/:action&apos;, &apos;index/:controller/:action&apos;) -&gt;middleware(\app\http\middleware\AuthMiddleware::class); //代表index模块都会执行中间键Route::get(&apos;index/login/:action&apos;, &apos;index/login/:action&apos;) -&gt;middleware(\app\http\middleware\AuthMiddleware::class); //代表index模块下Login控制器才会执行中间键Route::get(&apos;index/login/:action&apos;, &apos;index/login/:action&apos;); //代表index模块下Login控制器不会执行中间键（注意：需要写在index模块全局中间键的上面才会生效）Route::get(&apos;login&apos;, &apos;index/login/index&apos;); //代表index模块下Login控制器index方法不执行中间键Route::get(&apos;login&apos;, &apos;index/login/index&apos;) -&gt;middleware(\app\http\middleware\AuthMiddleware::class); //代表index模块下Login控制器index方法执行中间键//V5.1.8+版本开始支持对某个域名注册中间件Route::domain(&apos;admin&apos;, function()&#123; // 注册域名下的路由规则&#125;)-&gt;middleware(&apos;AuthMiddleware&apos;);//如果需要传入额外参数给中间件，可以使用Route::rule(&apos;hello/:name&apos;,&apos;hello&apos;) -&gt;middleware(&apos;AuthMiddleware:admin&apos;);//多个中间件传参Route::rule(&apos;hello/:name&apos;,&apos;hello&apos;) -&gt;middleware([&apos;AuthMiddleware:admin&apos;, &apos;CheckMiddleware:editor&apos;]);//闭包定义中间件（你不一定要使用中间件类，在某些简单的场合你可以使用闭包定义中间件，但闭包函数必须返回Response对象实例。）Route::group(&apos;hello&apos;, function()&#123; Route::rule(&apos;hello/:name&apos;,&apos;hello&apos;);&#125;)-&gt;middleware(function($request,\Closure $next)&#123; if ($request-&gt;param(&apos;name&apos;) == &apos;think&apos;) &#123; return redirect(&apos;index/think&apos;); //return response($request-&gt;param(&apos;name&apos;)); &#125; return $next($request);&#125;);OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>middleware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1行为钩子]]></title>
    <url>%2Ftp-behavior.html</url>
    <content type="text"><![CDATA[行为的定义：就是在项目操作中我们会有一些动作在执行完某些特定操作的时候执行一个动作，比如：微信在PC端登入的时候，提示你登入成功；用户登入之后我们是不是需要对于用户登入的时间地点，相关的信息进行一个日志记录；支付成功之后，支付宝或者微信就会提醒你支付成功必须有run（）方法俩种钩子使用方法优化facadeaop(面向切面)：在项目中我们做一些操作的时候我们往往需要执行很多相似的操作，比如：权限的校验，微信支付成功对于用户的通知中间件是对用户请求做处理，而钩子则是对用户动作的处理一.创建行为目录behavior1.app\behavior\LogBehavior.php，代码如下：123456789101112&lt;?phpnamespace app\behavior;use Log;class LogBehavior&#123; public function run($value) &#123; $date = date(&apos;Y-m-d H:i:s&apos;); Log::write($date.&apos;:&apos;.$value); echo &apos;log write end&apos;; &#125;&#125;2.使用方法： + 使用think\Hook内中的exec(),例：Index.php控制器中使用1234567891011&lt;?phpnamespace app\index\controller;use think\Controller;use Hook;class Index extends Controller&#123; public function index() &#123; Hook::exec(\app\behavior\LogBehavior::class,&apos;test&apos;); &#125;&#125;+ app\tags.php中配置，全局使用1234// 模块初始化&apos;module_init&apos; =&gt; [ \app\behavior\LogBehavior::class,],二.优化facadecommon目录：1.Test.php，被代理类1234567&lt;?phpnamespace app\common;class Test&#123; public function index()&#123; return &apos;test&apos;; &#125;&#125;2.common\facade\目录中Test.php，可以代理common中所有文件1234567891011&lt;?phpnamespace app\common\facade;use think\Facade;class Test extends Facade&#123; //代理绑定 protected static function getFacadeClass() &#123; return &apos;app\common\Test&apos;; //return &apos;app\common\Tese2&apos;;可以代理Test2或其他文件 &#125;&#125;config目录创建facade.php文件，写入代码，给门面代理取别名1234567&lt;?phpreturn [ // 自定义别名 &apos;alias&apos; =&gt; [ &apos;Test&apos; =&gt; app\common\facade\Test::class, ]];behavior目录创建LoadFacadeBehavior.php，写入代码123456789101112&lt;?phpnamespace app\behavior;use think\Loader;use Config;class LoadFacadeBehavior&#123; public function run() &#123; ## 自定义别名 Loader::addClassAlias(Config::get(&apos;facade.alias&apos;)); &#125;&#125;Index.php控制器中使用12345678910111213&lt;?phpnamespace app\index\controller;use think\Controller;use Hook;use Test;class Index extends Controller&#123; public function index() &#123; Hook::exec(\app\behavior\LoadFacadeBehavior::class); echo Test::index(); &#125;&#125;OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>behavior</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1控制层操作]]></title>
    <url>%2Ftp-controller.html</url>
    <content type="text"><![CDATA[控制器的命令创建php think make:controller app\index\controller\Index控制器初始化的俩种方法控制器主要是用来连接视图（view）和业务逻辑层（service）空操作和空控制器统一异常处理控制器初始化俩种方法123456789public function initialize()&#123; $this-&gt;loginService = new LoginService;&#125;public function __construct()&#123; parent::__construct(); //引入父类的构造方法不然被覆盖 $this-&gt;loginService = new LoginService;&#125;控制器调用业务逻辑层1.创建业务逻辑层目录，app\service\LoginService.php，代码如下：12345678910&lt;?phpnamespace app\service;class LoginService&#123; public function login()&#123; return &apos;login&apos;; &#125; public function outLogin()&#123; return &apos;outlogin&apos;; &#125;&#125;2.app\index\controller\Index.php，代码如下：1234567891011121314151617&lt;?php namespace app\index\controller; use think\Controller; use app\service\LoginService; class Index extends Controller &#123; private $loginService; public function initialize() &#123; $this-&gt;loginService = new LoginService; &#125; public function index() &#123; echo $this-&gt;loginService-&gt;login(); &#125; &#125;空操作和空控制器我们项目开发的时候，用户不知道访问路径；规避用户不正当操作1.空操作：当访问不存在的方法的时候（底层：thinkphp\library\think\route\dispatch\Module.php）1234public function _empty()&#123; return &quot;this is error&quot;;&#125;2.空控制器：访问不存在的控制器执行（配置config\app.php中&apos;empty_controller&apos; =&gt; &apos;Error&apos;,） 创建Error.php控制器123456789&lt;?phpnamespace app\index\controller;class Error&#123; public function _empty() &#123; return &quot;this is error&quot;; &#125;&#125;统一异常处理就是应付与项目上线之后用户非正常操作产生的bug。实例：1.创建出统一异常处理异常类新建app\exception\Exception.php，添加代码如下：123456789101112131415161718192021222324&lt;?phpnamespace app\exception;use think\exception\Handle;use think\exception\HttpException;use think\exception\ValidateException;use Exception as ExceptionThink;class Exception extends Handle&#123; public function render(ExceptionThink $e)&#123; // 参数验证错误 if ($e instanceof ValidateException) &#123; return json($e-&gt;getError(), 422); &#125; // 请求异常 if ($e instanceof HttpException &amp;&amp; request()-&gt;isAjax()) &#123; return response($e-&gt;getMessage(), $e-&gt;getStatusCode()); &#125; // 其他错误跳转自定义页面或者交给系统处理 return redirect(&apos;exception/index/index&apos;); // return parent::render($e); &#125;&#125;2.控制器app\exception\controller\Index.php，添加代码如下：12345678&lt;?phpnamespace app\exception\controller;class Index&#123; public function index()&#123; echo &apos;您访问出错啦！！！&apos;; // return view(); &#125;&#125;3.修改配置文件config\app.php中1&apos;exception_handle&apos; =&gt; &apos;\app\exception\Exception&apos;,OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>controller</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1路由的几个功能]]></title>
    <url>%2Ftp-route.html</url>
    <content type="text"><![CDATA[静态注册（官方其实已经不再描述注册和使用方式（不推荐））动态注册（通过think\Route.php这个类中的方法定义）注解注册（应用调试下才会起效果，调试时可以使用）一.路由的三个注册方式1静态注册123return [ &apos;login&apos; =&gt; &apos;index/login/index&apos;];2.动态注册12345Route::get(&apos;think&apos;, function () &#123; return &apos;hello,ThinkPHP5!&apos;;&#125;);Route::get(&apos;hello/:name&apos;, &apos;index/hello&apos;);3.注解注册 首先要做的操作： + 开启config/app.php中的app_debug配置 设置为 true + 设置config/app.php中的&apos;route_annotation&apos; 设置 true + 为了避免意外：先注释route/route.php中的所有配置信息 使用代码如下：（访问地址：域名/hello/name）12345678910111213141516171819&lt;?phpnamespace app\index\controller;use think\Controller;class Index extends Controller&#123; public function index() &#123; &#125; /** * @param string $name 数据名称 * @return mixed * @route(&apos;hello/:name&apos;) */ public function hello($name = &apos;ThinkPHP5&apos;) &#123; return &apos;hello,&apos; . $name; &#125;&#125;二.路由的几个请求方式Route::get(‘config’, ‘index/util/config’);Route::post(‘config’, ‘index/util/config’); //post如果两个请求相同，后一个请求不会把第一个请求覆盖掉（用来增资源）Route::put(‘config’, ‘index/util/config’); //PUT被定义为idempotent的方法，如果两个请求相同，后一个请求会把第一个请求覆盖掉（用来改资源）Route::rule(‘config’, ‘index/util/config’,’get’); //rule就是允许所有请求三.路由的自定义分组1234Route::group(&apos;axiao&apos;, function()&#123; Route::post(&apos;config&apos;, &apos;index/util/config&apos;); Route::get(&apos;index&apos;, &apos;index/util/index&apos;);&#125;);访问地址：域名/axiao/config，域名/axiao/index四.路由api跨域请求// 跨域// api平台 ：访问安全 Header12345Route::get(&apos;config&apos;, &apos;index/util/config&apos;) -&gt;ext(&apos;html&apos;) -&gt;header(&apos;Access-Control-Allow-Origin&apos;,&apos;thinkphp.cn&apos;) -&gt;header(&apos;Access-Control-Allow-Credentials&apos;, &apos;true&apos;) -&gt;allowCrossDomain();OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>route</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1快速入门]]></title>
    <url>%2Ftp-base.html</url>
    <content type="text"><![CDATA[tp5.1:优点：开发速度快结构比较清晰免费tp5.1php&gt; 5.6 推荐使用php7不支持在官网一键下载–&gt;&gt;推荐使用composer命令下载安装教程访问路径去掉public和index.php：1.根目录创建index.php,引入require &quot;public/index.php&quot;;2.修改public/.htaccess文件中的RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]改为RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1]，再把该文件复制到根目录。一.5.1 与 5.0 区别1. config配置 单独提取出来 并根据不同的功能创建对应的配置文件2. 路由 单独的放置于 根目录 route/route.php3. 核心的类库文件5.0使用了大量静态的关键字修饰，5.1非静态二.命令创建控制器和模型1.创建Admin.php控制器：php think make:controller app\index\controller\Admin2.创建User.php模型：php think make:model app\index\model\User三.Db数据库操作curd:1.引入 db –&gt; use think\Db; 2.查：$result= Db::table(‘goods’)-&gt;select();$result= Db::table(‘goods’)-&gt;find(1);多条件查询的写法:1234561. where([ [&apos;id&apos;, &apos;=&apos;, 1], [ &apos;name&apos;,&quot;=&quot;,&apos;盒杏仁饼&apos;], [&apos;name&apos;,&quot;=&quot;,&apos;盒杏仁饼&apos;]])2. -&gt;where(&apos;id&apos;, &apos;=&apos;, 3)-&gt;where(&apos;name&apos;, &apos;=&apos;, &apos;咖啡杏仁饼&apos;)单条件的查询1231. where(&apos;id&apos;, &apos;=&apos;, 3)2. or条件查询whereOr(&apos;name&apos;, &apos;=&apos;, &apos;咖啡杏仁饼&apos;)3.model操作数据库，引入db -&gt; `use app\index\model\Goods` 查：$result = Goods::all(&apos;1,2,3&apos;); $result = Goods::get(1); 要更多的查询支持，一样可以使用查询构造器： $list = Goods::where(&apos;status&apos;, 1)-&gt;limit(3)-&gt;order(&apos;id&apos;, &apos;asc&apos;)-&gt;select();四.视图view;1.渲染模板：助手函数 return View()需要继承控制器Controller使用return $this-&gt;fetch()2.需要访问同一个控制器的其他模块：$this-&gt;fetch(‘模块名’);夸控制器：$this-&gt;fetch(‘控制器名/模块名’);3.数据传输到view$this-&gt;assign(‘name’,$username);$this-&gt;assign([‘name’=&gt;’username’,’pass’=&gt;’password’]);OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1门面facade]]></title>
    <url>%2Ftp-facade.html</url>
    <content type="text"><![CDATA[1.门面的定义：门面就是可以把实际类中非静态的方法通过代理类静态调用2.门面的好处：解耦 把原本相互依赖的事物通过中间 的代理 相互调用快速的实例化对象可以静态的调用被代理类的方法3.门面的坏处：消耗一部分资源来换取我们需要的优雅调用方式，应用解耦（优点大于缺点）实例：获取common中的Test.php文件index方法中的数据控制器index.php12use Test;echo Test::index();common目录：1.Test.php，被代理类1234567&lt;?phpnamespace app\common;class Test&#123; public function index()&#123; return &apos;test&apos;; &#125;&#125;2.common\facade\目录中Test.php，可以代理common中所有文件12345678910&lt;?phpnamespace app\common\facade;use think\Facade;class Test extends Facade&#123; protected static function getFacadeClass() &#123; return &apos;app\common\Test&apos;; //return &apos;app\common\Tese2&apos;;可以代理Test2或其他文件 &#125;&#125;common.php文件1234567// 应用公共文件//use think\Facade;use think\Loader;//给commomn\facade中的test类命名Loader::addClassAlias([ &apos;Test&apos; =&gt; app\common\facade\Test::class,]);使用行为钩子对facade进行优化behavior行为钩子OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>facade</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tp5.1配置文件]]></title>
    <url>%2Ftp-config.html</url>
    <content type="text"><![CDATA[惯例配置文件：\thinkphp\convention.php应用配置文件：\config目录模块配置文件(需要自己创建,只有该模块可以获取该配置数据)：\config\admin\config.php获取配置：123use Config;Config::get(&apos;app.&apos;);//获取app配置文件信息Config::get(&apos;database.username&apos;);//获取database中的username动态配置：修改配置信息：12Config::set(&apos;database.username&apos;,&apos;axiao&apos;);Config::set([&apos;username&apos;=&gt;&apos;axiao&apos;,&apos;password&apos;=&gt;&apos;123456&apos;],&apos;database&apos;);获取配置数据优先级:动态配置 》 模块配置 》 应用配置 》 惯例配置配置的加载顺序：先惯例配置 –》 再加载tags.php(行为钩子)-&gt; common.php（加载公共文件）-》helper.php（助手函数）-》middleware.php（全局中间件）-》provider.php（自定义容器）-》最后应用配置OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库面向对象pdo操作（curd）]]></title>
    <url>%2Fdb.html</url>
    <content type="text"><![CDATA[数据库连接层mode(Db.php)业务逻辑层service(Service.php)操作控制层controller(Client.php)Db.php代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&lt;?php/** * 数据库DAO --&gt;&gt;&gt; 对数据库进行操作的类 */class Db&#123; /** * 连接数据的地址 * @var string */ CONST DRIVER_CLASS = &apos;mysql:host=localhost;dbname=class&apos;; /** * 数据库的用户名 * @var string */ CONST USERNAME = &apos;root&apos;; /** * 数据库的密码 * @var string */ CONST PASSWORD = &apos;root&apos;; /** * 数据库连接出错 * @var string|array */ private $error = &apos;没有异常&apos;; /** * 连接数据库驱动 * @var PDO */ private $pdo; public function __construct() &#123; try &#123; // 初始化执行数据库类 $this-&gt;pdo = new PDO(self::DRIVER_CLASS, self::USERNAME, self::PASSWORD); $this-&gt;pdo-&gt;query(&apos;SET NAMES UTF8&apos;); &#125; catch (\Exception $e) &#123; $this-&gt;error = $e-&gt;getMessage(); &#125; &#125; /** * 读操作 --&gt;&gt; 查询 * @param string $sql 查询sql * @return array 执行结果 */ public function query($sql) &#123; try &#123; $result = $this-&gt;pdo-&gt;query($sql); $data = []; foreach($result as $key =&gt; $value)&#123; $data[] = $value; &#125; return $data; &#125; catch (\Exception $e) &#123; $this-&gt;error = $e-&gt;getMessage(); return false; &#125; &#125; /** * 写操作 --&gt;&gt; 增删改 * @param string $sql 查询sql * @return array 执行结果 */ public function execute($sql) &#123; try &#123; $res = $this-&gt;pdo-&gt;exec($sql); &#125; catch (\Exception $e) &#123; $this-&gt;error = $e-&gt;getMessage(); return false; &#125; &#125; //------------------ //属性get | set 方法 //------------------ /** * 获取系统错信息 */ public function getError() &#123; return $this-&gt;error; &#125; public function write($data) &#123; file_put_contents(&quot;log.txt&quot;,$data.&quot;\n&quot;,FILE_APPEND); &#125;&#125;Service.php代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?phprequire_once &apos;Db.php&apos;;/** * 业务类 */class Service&#123; /** * 数据库操作类 * @var Db */ private $db; public function __construct() &#123; $this-&gt;db = new Db(); &#125; public function updUser($id, $name, $age, $sex) &#123; $sql = &apos;update user set age = %s, name = %s, sex = %s where id = %s&apos;; $sql = sprintf($sql, $age, $name, $sex, $id); return $this-&gt;db-&gt;execute($sql); &#125; public function addUser($name, $age, $sex) &#123; $sql = &apos;insert into user (name,age,sex)values(&quot;%s&quot;,%s,&quot;%s&quot;)&apos;; $sql = sprintf($sql, $name, $age, $sex); return $this-&gt;db-&gt;execute($sql); &#125; public function delUser($user_id) &#123; $sql = &apos;delete from user where id=&apos;.$_POST[&apos;id&apos;]; return $this-&gt;db-&gt;execute($sql); &#125; public function findUser($user_id = &apos;&apos;) &#123; $where = ($user_id == &apos;&apos;) ? &apos; 1 = 1&apos; : &apos; id = &apos;.$user_id ; $sql = &apos;select * from user where &apos;.$where; return $this-&gt;db-&gt;query($sql); &#125;&#125;Client.php代码如下12345678910111213141516171819202122232425262728&lt;?phprequire_once &apos;Service.php&apos;;/** * 客服端 */class Client&#123; public function index() &#123; $service = new Service(); switch ($_POST[&apos;method&apos;]) &#123; case &apos;find&apos;: echo json_encode($service-&gt;findUser()); break; case &apos;update&apos;: break; case &apos;insert&apos;: break; case &apos;delete&apos;: break; &#125; &#125;&#125;$client = new Client();$client-&gt;index();OVER！！！]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
        <tag>pdo</tag>
        <tag>sql</tag>
        <tag>curd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php面向对象单态设计模式]]></title>
    <url>%2Fdantai.html</url>
    <content type="text"><![CDATA[称呼：单态设计模式、单例设计模式、单件设计模式（可别被面试时候问倒了哦）概念：Singleton（单例）模式主要作用是保证在面向对象编程语言设计编写的程序中，一个类Class只有一个实例存在。用途：在很多操作中，比如建立目录 数据库连接都需要这样的单线程操作。实现方法：（1）如果想让一个类，只能有一个对象，就要先让这个类不能创建对象，且不能被克隆（__clone）,因此需要将构造方法以及克隆方法私有化（2）在类中提供一个静态方法，来创建对象（3）在类中提供一个静态属性，用于存储实例化对象（如果对象存在，则不再实例化，从而保证对象只被实例化一次）代码如下：123456789101112131415161718192021222324class Instance &#123; //静态变量保存全局实例 private static $_instance = null; //私有构造函数，防止外界实例化对象 private function __construct() &#123; echo &apos;看我出现几次，就说明我被创建了几次&lt;hr&gt;&apos;; &#125; //私有克隆函数，防止外办克隆对象 private function __clone() &#123;&#125; //静态方法，单例模式统一访问入口 static public function getInstance() &#123; if (is_null(self::$_instance)) &#123; self::$_instance = new self(); &#125; return self::$_instance; &#125;&#125;Instance::getInstance();Instance::getInstance();Instance::getInstance();OVER！！！]]></content>
      <categories>
        <category>oop</category>
      </categories>
      <tags>
        <tag>oop</tag>
        <tag>单态设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php面向对象写一个计算器]]></title>
    <url>%2Fjisuanqi.html</url>
    <content type="text"><![CDATA[php面向对象写一个计算器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115&lt;?php// 运算类 的父类abstract class Operation&#123; ## 运算呢的两个属性 protected $numA = 0; protected $numB = 0; ## 分别提供一个get，set的方法对属性的获取和设置 public function getNumA() &#123; return $this-&gt;numA; &#125; public function setNumA($numA = 0) &#123; $this-&gt;numA = $numA; &#125; public function getNumB() &#123; return $this-&gt;numA; &#125; public function setNumB($numB = 0) &#123; $this-&gt;numB = $numB; &#125; ## 所有运算子类所需要实现的运算方法 public abstract function GEtResult();&#125;// 加法类class OperationAdd extends Operation&#123; ## 实现父类的计算方法 public function GEtResult() &#123; $result = $this-&gt;numA + $this-&gt;numB; return $result; &#125;&#125;// 减法类class OperationSub extends Operation&#123; ## 实现父类的计算方法 public function GEtResult() &#123; $result = $this-&gt;numA - $this-&gt;numB; return $result; &#125;&#125;// 乘法类class OperationMul extends Operation&#123; ## 实现父类的计算方法 public function GEtResult() &#123; $result = $this-&gt;numA * $this-&gt;numB; return $result; &#125;&#125;// 除法类class OperationDiv extends Operation&#123; ## 实现父类的计算方法 public function GEtResult() &#123; $result = $this-&gt;numA / $this-&gt;numB; return $result; &#125;&#125;// 简单运算工厂类class OperationFactory&#123; ## 根据需求创建对应的工厂类 public static function createOperate($operate) &#123; $oper = null; switch ($operate) &#123; case &apos;+&apos;: $oper = new OperationAdd(); break; case &apos;-&apos;: $oper = new OperationSub(); break; case &apos;*&apos;: $oper = new OperationMul(); break; case &apos;/&apos;: $oper = new OperationDiv(); break; &#125; return $oper; &#125;&#125;// 客服端class Client&#123; public function index() &#123; $numA = $_POST[&quot;numA&quot;]; $numB = $_POST[&quot;numB&quot;]; $strOperate = $_POST[&quot;strOperate&quot;]; ## 创建对应的计算类 $oper = OperationFactory::createOperate($strOperate); $oper-&gt;setNumA($numA); $oper-&gt;setNumB($numB); $strResult = $oper-&gt;GEtResult(); echo &quot;结果是&quot;.$strResult; &#125;&#125;$client = new Client();try &#123; $client-&gt;index();&#125; catch (\Exception $e) &#123; echo &quot;你输入的有误&quot;.$e;&#125;OVER！！！]]></content>
      <categories>
        <category>oop</category>
      </categories>
      <tags>
        <tag>oop</tag>
        <tag>计算器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象oop]]></title>
    <url>%2Foop.html</url>
    <content type="text"><![CDATA[OOP三大特性：封装，继承，多态。OOP三大优点：重用性，灵活性，扩展性。文件命名：驼峰法（首字母大写：例Db.php）。类的组成：成员属性，成员方法。修饰词：public,private,protected,static,abstract,final,CONST。修饰词：成员属性和成员方法（public,private,protected,static）,类和成员方法（final,abstract）,成员属性（CONST）。成员属性前必须要有修饰词，成员方法前修饰词可有可无。继承extends，单一继承。继承：public和protected可以继承，可以在类里面和子类里面输出，private不可以继承，只能在类里面输出，只有public可以在类外输出。子类和父类有相同的成员方法时，子类会覆盖父类的输出，为了不被覆盖，引用父类方法可以使用parent：：函数名（）。final：类前,这个类不能被继承，成员方法前，子类和父类有相同的成员方法时不会被覆盖。static：成员属性和成员方法，在类外不能用对象调用，要用类调用（例Stu::$name）,在类里面调用（例self::$name），成员方法中不可以使用$this。CONST：只能修饰成员属性，调用和static一样不需要实例化（例类外Stu::NAME,类里self::NAME）。abstract：抽象类特点：1.不能被实例化，2.它的作用就是被继承的，3.类里面一般不用private。概念：1.抽象类里面不一定有抽象方法，2.有抽象方法的类一定是抽象类，3.抽象类和抽象方法前面必须写abstract，抽象方法没有大括号（函数体），4.普通类继承抽象类时，如果抽象类里有抽象方法，则子类必须要写一个相同的方法覆盖抽象方法。接口interface特点：1.他是一个特殊的抽象类，不能被实例化。2.不需要写class，直接写interface 类名。3.接口里面必须为常量和抽象方法，抽象方法前不加abstract。4.接口可以继承（extends）接口，但抽象类和普通类不可以继承接口，只能实现（implements）接口，普通类实现接口，必须要写一个方法覆盖接口的抽象方法。5.如果既有继承又有实现，则先继承后实现，实现可以实现多个接口用“,”分开。魔术方法：构造方法：__construct()，实例化类时自动运行。析构方法：__destruct()，对象释放前自动运行。__set($name,$value)，在类外设置/修改私有属性时自动运行。__get($name)，在类外调用私有属性时自动运行，注，类外是不能调用到私有属性的。__isset($name)，在类外用isset()判断私有属性时自动运行。__unset($name)，在类外用unset()释放私有属性时自动运行。__clone()，类外克隆对象时自动运行，（例子$person2 = clone $person1）。__sleep()，类外使用serialize()（串行化）函数时自动运行。__wakeup()，类外使用unserialize()(反串行化)函数时自动运行。__autoload(类名)，实例化时自动运行，一般用在自动引入类文件时使用。__call($method,$args)，在类外使用一个不存在的方法时自动运行。OVER！！！]]></content>
      <categories>
        <category>oop</category>
      </categories>
      <tags>
        <tag>oop</tag>
        <tag>class</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日志的记录]]></title>
    <url>%2Flog.html</url>
    <content type="text"><![CDATA[很多时候记录日志需要换行。不建议使用\r\n，因为：在windows中\r\n是换行在Mac中\r是换行在Liunx中\n是换行但是PHP提供了一个常量来匹配不同的操作系统，即：PHP_EOLFILE_APPEND：追加代码如下：1234567891011//log$tmpArr = array();if($r-&gt;isGet)&#123; $tmpArr = $r-&gt;get();&#125;else if($r-&gt;isPost)&#123; $tmpArr = $r-&gt;post();&#125;$jsonStr = json_encode($tmpArr);$payLogFile = &apos;./uploads/payLogs.txt&apos;;$newLog =&apos;log_time:&apos;.date(&apos;Y-m-d H:i:s&apos;).$jsonStr;file_put_contents($payLogFile, $newLog.PHP_EOL, FILE_APPEND);OVER！！！]]></content>
      <categories>
        <category>log</category>
      </categories>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpstorm安装与破解]]></title>
    <url>%2Fphpstorm.html</url>
    <content type="text"><![CDATA[一.首先去官网下载并安装，请点击官网链接二.激活1.打开文件夹c:\windows\system32\drivers\etc中hosts文件，将“0.0.0.0 account.jetbrains.com”及“0.0.0.0 www.jetbrains.com”添加到hosts文件中1234注：hosts文件权限问题：两种方案把host文件复制到桌面，编辑保存后拷贝并替换原来的host文件，提示管理员权限点继续开始菜单里找到记事本，右击，使用管理员权限运行，在文件菜单里打开host，然后就随便你怎么折腾了。2.这里我们来安装到activation，点击activation code3.浏览器中打开http://idea.lanyus.com/，点击获得注册码4.将注册码复制到输入框，注：注册码要去掉前面的汉字三.第二种激活方式，不需要修改hosts文件，直接去网站http://idea.medeming.com/jihuo/下载激活码激活OVER！！！]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在线电视直播源简单制作]]></title>
    <url>%2Ftv.html</url>
    <content type="text"><![CDATA[需要用到的软件有：1.谷歌浏览器2.猫爪插件，提取码：tx4b3.电视直播源列表制作软件，提取码：32634.potplay播放器，提取码：0wxw使用方法：1.首先从网上找几个在线直播播放电视的网站 ，我这边有常用的几个，推荐给大家，至于稳定不稳定，看人品了http://www.radio366.comhttp://www.tvyan.com/http://tvvtvv.com/2.打开直播的网站，随便找一个喜欢的电视台播放，当正常播放的时候，猫爪就会显示抓到的资源数，单击猫爪图标发现里面有好多资源列表，但是里面只有一个是我们需要的直播源，就是后缀带有m3u8的就可以。复制一下即可3.当我们抓到多个电视直播源的时候，我们需要创建一个文本文件，把需要的直播源都放在这个文本文件里面，格式是 “电视名称,电视直播源”注意，中间有个逗号，而且逗号为英文状态。4.使用telelist软件转换，转换好后，桌面就会显示一个以DPL后缀的格式如下图：5.最后我们就要测试这些直播源的有效性，用potplay来播放。OVER！！！]]></content>
      <tags>
        <tag>tv</tag>
        <tag>m3u8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过composer安装TP5.1(Thinkphp5.1)]]></title>
    <url>%2Ftp-install.html</url>
    <content type="text"><![CDATA[之前使用tp5.0.10上传到服务器上的项目由于tp漏洞被挂木马，首页被篡改，紧急下载tp5.1,官方没有下载地址，只能通过composer进行下载查看你使用的phpstudy版本1.找到此版本的php.exe文件的位置，添加到环境变量2.打开php.ini配置文件：找到;extension=php_openssl.dll，去掉前面的;下载并安装composer1.composer中文网http://www.phpcomposer.com/2.下载并安装3.安装完需要用到composer.phar这个文件4.把这个文件复制到你要安装tp的目录5.在此目录上方的路径地址栏输入cmd，打开命令窗口6.输入如下命令下载安装12composer config -g repo.packagist composer https://packagist.phpcomposer.comcomposer create-project topthink/think=5.1.* tp5OVER！！！]]></content>
      <categories>
        <category>thinkPHP</category>
      </categories>
      <tags>
        <tag>tp5.1</tag>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP获取文件后缀名的7种方法]]></title>
    <url>%2Fsuffix.html</url>
    <content type="text"><![CDATA[$file = ‘x.y.z.png’;echo substr(strrchr($file, ‘.’), 1);解析：strrchr($file, ‘.’)strrchr() 函数查找字符串在另一个字符串中最后一次出现的位置，并返回从该位置到字符串结尾的所有字符.$file = ‘x.y.z.png’;echo substr($file, strrpos($file, ‘.’)+1);解析：strrpos($file, ‘.’)查找 “.” 在字符串中最后一次出现的位置,返回位置 substr()从该位置开始截取$file = ‘x.y.z.png’;$arr=explode(‘.’, $file);echo $arr[count($arr)-1];$file = ‘x.y.z.png’;$arr=explode(‘.’, $file);echo end($arr); //end()返回数组的最后一个元素$file = ‘x.y.z.png’;echo strrev(explode(‘.’, strrev($file))[0]);$file = ‘x.y.z.png’;echo pathinfo($file)[‘extension’];解析：pathinfo() 函数以数组的形式返回文件路径的信息。包括以下的数组元素：[dirname][basename][extension]$file = ‘x.y.z.png’;echo pathinfo($file, PATHINFO_EXTENSION);总结：字符串截取2种，数组分割3种，路径函数2种OVER！！！]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>substr</tag>
        <tag>suffix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo文章页面美化和内置标签的使用]]></title>
    <url>%2Fhexo-extend-3.html</url>
    <content type="text"><![CDATA[注：标签要求 NexT 的版本在 0.4.5 或以上1.此标签将生成一个带上下分割线的引用，同时引用内文本将自动居中。 文本居中时，多行文本若长度不等，视觉上会显得不对称，因此建议在引用单行文本的场景下使用。 例如作为文章开篇引用 或者 结束语之前的总结引用1&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;效果示例:blah blah blah2.当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上提升图片的吸引力1&#123;% fullimage /image-url, alt, title %&#125;效果示例:3.Bootstrap Callout1&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;其中，class_name 可以是以下列表中的一个值：123456defaultprimarysuccessinfowarningdanger效果示例:Content (md partial supported)Content (md partial supported)Content (md partial supported)Content (md partial supported)Content (md partial supported)Content (md partial supported)4.显示文章摘要,此标签以上内容会被显示1&lt;!--more--&gt;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站SEO:百度以及谷歌的快速收录]]></title>
    <url>%2Fseo.html</url>
    <content type="text"><![CDATA[seo:优化你的链接最多三层目录结构为最优，越少越好hexo统计1.注册百度统计：https://tongji.baidu.com2.新增网站3.获取代码4.打开hexo主题配置文件，找到baidu_analytics:，复制上图中标记的一串字符放其后面。5.其他网站（非hexo）加入统计代码：复制图中整段代码，请将代码添加到网站全部页面的标签前。百度推送1.进入百度站长页面：http://zhanzhang.baidu.com2.点击站点管理-添加网站，添加时需要验证，上面有三种验证方式（具体那里有介绍）3.推送（主动推送&gt;自动推送&gt;sitemap推送）主动推送hexo安装插件npm install hexo-baidu-url-submit --savehexo根目录的配置文件中新增字段:12345baidu_url_submit: count: 100 # 提交最新的一个链接 host: blog.axiao.vip # 在百度站长平台中注册的域名 token: 8OGYpxowYnhgVsoM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里hexo根目录的配置文件中再加入新的deploye12deploy: - type:baidu_url_submitter这样执行hexo deploy的时候，新的链接就会被推送了其他网站（非hexo）主动推送php实例：12345678910111213141516$urls = array( &apos;http://www.example.com/1.html&apos;, &apos;http://www.example.com/2.html&apos;,);$api = &apos;http://data.zz.baidu.com/urls?site=blog.axiao.vip&amp;token=8OGYpxowYnhgVsoM&apos;;$ch = curl_init();$options = array( CURLOPT_URL =&gt; $api, CURLOPT_POST =&gt; true, CURLOPT_RETURNTRANSFER =&gt; true, CURLOPT_POSTFIELDS =&gt; implode(&quot;\n&quot;, $urls), CURLOPT_HTTPHEADER =&gt; array(&apos;Content-Type: text/plain&apos;),);curl_setopt_array($ch, $options);$result = curl_exec($ch);echo $result;自动推送hexo主题配置文件下设置,将baidu_push设置为true其他网站（非hexo）自动推送：1234567891011121314&lt;script&gt;(function()&#123; var bp = document.createElement(&apos;script&apos;); var curProtocol = window.location.protocol.split(&apos;:&apos;)[0]; if (curProtocol === &apos;https&apos;) &#123; bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;; &#125; else &#123; bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;; &#125; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(bp, s);&#125;)();&lt;/script&gt;创建名为“baidu_js_push.php”的文件，文件内容是上述自动推送JS代码；在每个PHP模板页文件中的标记后面添加一行代码：&lt;?php include_once(&quot;baidu_js_push.php&quot;) ?&gt;这样在页面被访问时，页面URL将立即被推送给百度sitemaphexo-sitemap推送,安装插件12npm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --savehexo根目录配置文件中修改url为你的站点地址123456# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://blog.axiao.viproot: /permalink: :title.htmlpermalink_defaults:在百度站长平台提交sitemap地址（https://blog.axiao.vip/sitemap.xml和https://blog.axiao.vip/baidusitemap.xml）就可以了其他网站（非hexo）sitemap推送：可以使用在线生成sitemap网站，给你的网站生成sitemap（例：https://help.bj.cn/）goole推送注册账号、验证站点、提交sitemap（相当简单）#OVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
        <tag>sitemap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计时器的开启与关闭]]></title>
    <url>%2Fsetinterval.html</url>
    <content type="text"><![CDATA[代码如下123456var carousel = function()&#123; &lt;!-- 计时内容 --&gt; &#125;var timer = setInterval(carousel,10000); //开启计时器clearInterval(timer); //清除计时OVER！！！]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>setInterval</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js获取get参数的一段代码]]></title>
    <url>%2Fjs-get.html</url>
    <content type="text"><![CDATA[代码如下123456789101112function _GET(name,isurl) &#123; isurl=isurl || false; var word=&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;; if(isurl)&#123;word=&quot;(^|&amp;)&quot; + name + &quot;=(.*?)$&quot;;&#125; var reg = new RegExp(word, &quot;i&quot;); var r = window.location.search.substr(1).match(reg); if (r !== null) &#123; return decodeURI(r[2]); &#125;; return &quot;&quot;; &#125;var src = decodeURIComponent(_GET(&quot;url&quot;),true);OVER！！！]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>get</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[返回顶部|到达底部|锚点用法与问题解决]]></title>
    <url>%2Ftop-end.html</url>
    <content type="text"><![CDATA[返回顶部|到达底部html代码1234&lt;ul class=&quot;fix_bar&quot;&gt; &lt;li class=&quot;layui-icon layui-fixbar-top&quot; id=&quot;to_top&quot; title=&quot;返回顶部&quot;&gt;顶部图标&lt;/li&gt; &lt;li class=&quot;layui-icon layui-fixbar-down&quot; id=&quot;to_bottom&quot; title=&quot;去底部&quot;&gt;底部图标&lt;/li&gt;&lt;/ul&gt;css代码12345678910111213141516171819&lt;style type=&quot;text/css&quot;&gt; .fix_bar&#123; position: fixed; right: 15px; bottom: 15px; z-index: 9999; cursor: pointer; &#125; .layui-fixbar-top&#123; font-size: 35px; background-color: rgba(0,0,0,.3); cursor: pointer; &#125; .layui-fixbar-down&#123; font-size: 35px; background-color: rgba(0,0,0,.3); cursor: pointer; &#125;&lt;/style&gt;jquery代码123456789101112131415161718192021222324//回到顶部 $(&quot;#to_top&quot;).click(function() &#123; $(&quot;html,body&quot;).animate(&#123;scrollTop:0&#125;, 200); &#125;); $(document).scroll(function()&#123; var scroll_top = $(document).scrollTop(); if(scroll_top &gt; 800)&#123; $(&quot;#to_top&quot;).show(); &#125;else&#123; $(&quot;#to_top&quot;).hide(); &#125; &#125;);//到达底部 $(&quot;#to_bottom&quot;).click(function() &#123; $(&quot;html,body&quot;).animate(&#123;scrollTop:document.body.clientHeight + &apos;px&apos;&#125;, 200); &#125;); $(document).scroll(function()&#123; var scroll_top = $(document).scrollTop(); if(scroll_top &lt; 800)&#123; $(&quot;#to_bottom&quot;).show(); &#125;else&#123; $(&quot;#to_bottom&quot;).hide(); &#125; &#125;);三种锚点用法只对a标签有效的方法，设置name属性在chrome浏览器中，会给目标添加上一个浅蓝色边框， 利于寻找123456789101112&lt;body&gt; &lt;a href=&quot;#a&quot;&gt;跳转到指定位置&lt;/a&gt; &lt;ul&gt; &lt;p&gt;练习&lt;/p&gt; &lt;p&gt;练习&lt;/p&gt; &lt;a name=&quot;a&quot; href=&quot;#&quot; style=&quot;text-decoration: none; color: red;&quot;&gt;练习&lt;/a&gt; &lt;!--仅对a标签可以--&gt; &lt;p&gt;练习&lt;/p&gt; &lt;p&gt;练习&lt;/p&gt; &lt;p&gt;练习&lt;/p&gt; &lt;/ul&gt; &lt;/body&gt;通过链接跳转到指定id的位置12345678910&lt;body&gt; &lt;a href=&quot;#a&quot;&gt;跳转到指定位置&lt;/a&gt; &lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;1&lt;/li&gt; &lt;li id=&quot;a&quot; style=&quot;color: red;&quot;&gt;2&lt;/li&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;1&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;利用Element.scrolIIntoView()方法，Element.scrolIIntoView() 方法让当前的元素滚动到浏览器窗口的可视区域内12345678910&lt;body&gt; &lt;ul&gt; &lt;li class=&quot;&quot; onclick=&quot;javascript:document.getElementById(&apos;here&apos;).scrollIntoView()&quot;&gt;寻找红色的here&lt;/li&gt; &lt;li&gt;herr&lt;/li&gt; &lt;li&gt;herr&lt;/li&gt; &lt;li&gt;herr&lt;/li&gt; &lt;li style=&quot;color: red;&quot; id=&quot;here&quot;&gt;herr&lt;/li&gt; &lt;li&gt;herr&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;博客中有些中文对于锚点会失效的解决（例如aplayer会对中文目录的锚点失效【主要是smooth插件引起的失效】】）加入一下js代码，需要自己调整一下参数：123456789101112//中文锚点失效解决(带平滑滚动) function ascrollTo(selector)&#123; if (!selector || selector === &apos;#&apos;) return const el = document.querySelector(decodeURIComponent(selector)) if (el &amp;&amp; el.offsetTop) &#123; window.scrollTo(&#123;top: el.offsetTop + 180, behavior: &apos;smooth&apos;&#125;); &#125; &#125; $(&apos;.toc-link&apos;).click(function()&#123; var ahref = $(this).attr(&apos;href&apos;); ascrollTo(ahref); &#125;)css平滑滚动以及锚点定位1234567html,body &#123; scroll-behavior: smooth;&#125;.post-body h1,.post-body h2,.post-body h3,.post-body h4,.post-body h5,.post-body h6 &#123; scroll-margin-top: 60px;&#125;配合css平滑滚动js返回顶部12345//返回顶部 $backToTop.onclick = function () &#123; document.body.scrollTop = 0; document.documentElement.scrollTop = 0; &#125;;OVER！！！]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flex布局知识点的掌握]]></title>
    <url>%2Fflex.html</url>
    <content type="text"><![CDATA[概念1.flex布局为盒状模型提供弹性布局，相当于一个容器，里面分多个项目元素2.容器有两根轴：水平轴和垂直的交叉轴属性1.容器属性2.项目元素属性容器属性（6个）1.flex-direction2.flex-wrap3.flex-flow4.justify-content5.align-items6.align-contentflex-direction属性flex-direction属性决定主轴的方向（即项目的排列方向为水平还是垂直）。flex-direction: row | row-reverse | column | column-reverse;1.row（默认值）：主轴为水平方向，起点在左端2.row-reverse：主轴为水平方向，起点在右端3.column：主轴为垂直方向，起点在上沿4.column-reverse：主轴为垂直方向，起点在下沿如下图所示：flex-wrap属性默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行flex-wrap: nowrap | wrap | wrap-reverse;1.nowrap（默认）：不换行2.wrap：换行，第一行在上方3.wrap-reverse：换行，第一行在下方flex-flow属性flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrapjustify-content属性justify-content属性定义了项目在主轴上的对齐方式justify-content: flex-start | flex-end | center | space-between | space-around;1.flex-start（默认值）：左对齐2.flex-end：右对齐3.center： 居中4.space-between：两端对齐，项目之间的间隔都相等5.space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍如下图所示：align-items属性align-items属性定义项目在交叉轴上如何对齐align-items: flex-start | flex-end | center | baseline | stretch;1.flex-start：交叉轴的起点对齐2.flex-end：交叉轴的终点对齐3.center：交叉轴的中点对齐4.baseline: 项目的第一行文字的基线对齐5.stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度如下图所示：align-content属性align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用align-content: flex-start | flex-end | center | space-between | space-around | stretch;1.flex-start：与交叉轴的起点对齐2.flex-end：与交叉轴的终点对齐3.center：与交叉轴的中点对齐4.space-between：与交叉轴两端对齐，轴线之间的间隔平均分布5.space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍6.stretch（默认值）：轴线占满整个交叉轴如下图所示：项目的属性（6个）1.order2.flex-grow3.flex-shrink4.flex-basis5.flex6.align-selforder属性order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0order:; flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大flex-grow:; 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小flex-shrink:; 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小负值对该属性无效flex-basis属性flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小flex-basis:| auto;它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间flex属性flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值align-self属性align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretchalign-self: auto | flex-start | flex-end | center | baseline | stretch;该属性可取6个值，除了auto，其他都与父元素的align-items属性完全一致#OVER！！！]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDM(Internet Download Manager)下载器的使用以及破解]]></title>
    <url>%2Fidm.html</url>
    <content type="text"><![CDATA[下载地址https://pan.baidu.com/s/1TlRUXjdIQWn9Ifa2MGs2fA，提取码：n5ra安装下载并安装完成后，打开谷歌浏览器-更多工具-扩展程序，勾选idm即可，如下图所示：破解打开上面下载的破解工具，点击patch按钮，找到如下图所示的文件，打开即可配合油猴插件，下载百度云文件便可以全速下载油猴插件安装教程：https://blog.axiao.vip/tampermonkey.htmlOVER！！！]]></content>
      <tags>
        <tag>IDM</tag>
        <tag>Tampermonkey</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[油猴插件(Tampermonkey)以及脚本安装使用教程]]></title>
    <url>%2Ftampermonkey.html</url>
    <content type="text"><![CDATA[介绍什么是油猴脚本「油猴」可以通过安装各类脚本对网站进行定制,例如：直接下载百度网盘文件(全速)播放vip视频去掉网页广告github页面汉化还原清新的小说阅读模式…功能太多，具体看你安装的脚本安装方法一油猴插件下载地址：https://pan.baidu.com/s/14Xurz9iVsVgAO0LB62m4nQ，提取码：kzjf1.把油猴的.crx文件改为.rar格式，然后解压2.打开谷歌浏览器-更多工具-扩展程序3.打开开发者模式，点击加载已解压的扩展程序,如下图所示4.选择解压的这个文件夹就安装成功了,但是解压的文件不能删除，得找个地方留好安装方法二vpn安装，教程地址：https://blog.axiao.vip/vpn.html脚本地址https://greasyfork.org/zh-CN/scriptsOVER！！！]]></content>
      <tags>
        <tag>Tampermonkey</tag>
        <tag>vpn</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vpn翻墙软件以及使用教程]]></title>
    <url>%2Fvpn.html</url>
    <content type="text"><![CDATA[软件网盘地址https://pan.baidu.com/s/1PgLmVD9OoDh87nbSwuroFg，提取码：ti1k使用教程1.以谷歌浏览器为例，打开chrome://extensions/。 2.解压下载的文件夹，然后将一整个文件夹拖动至页面中，该翻墙插件就安装完成了，在使用过程中记得你本地的文件夹路径不要进行更改，否则插件将会出现无法使用的情况，所以在一开始就应该放好位置哦。3.使用邮箱申请账号并点击邮箱链接激活。4.浏览器登陆你的账号，并选择使用的国家，如下图所示：5.浏览器打开谷歌应用商店，如下图所示：注：当你开启了vpn之后，你当前页面的所有网络通道都会通过vpn，所以建议使用之后进行关闭OVER！！！]]></content>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10系统重装教程【含各种软件，激活软件】]]></title>
    <url>%2Fsystem-reinstallation.html</url>
    <content type="text"><![CDATA[私密文章，请输入密码，加微信：910490431，备注：重装系统获取密码. Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>system</tag>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用伪静态几行代码实现虚拟主机支持多站点]]></title>
    <url>%2FVirtual-Host.html</url>
    <content type="text"><![CDATA[开启伪静态功能开通虚拟主机后，在主机管理平台把“伪静态设置”状态设置为“开启”域名解析这里找几个域名作为演示：站点1：host1.axiao.vip站点2：host2.axiao.vip站点3：host3.axiao.vip将3个域名分别绑定到主机，并做CNAME解析到主机新建站点文件夹在主机web目录，分别创建好多个站点文件夹host1、host2、host3上传各个站点文件站点1首页文件/host1/index.html；站点2首页文件/host2/index.html；站点3首页文件/host3/index.html；部署伪静态代码将以下伪静态代码，保存为.htaccess：123456789&lt;IfModule mod_rewrite.c&gt; RewriteEngine On RewriteBase / # 绑定host1.axiao.vip到子目录idc RewriteCond %&#123;HTTP_HOST&#125; ^host1.axiao.vip$ [NC] RewriteCond %&#123;REQUEST_URI&#125; !^/host1/ RewriteRule ^(.*)$ host1/$1 [L,QSA] #可以绑定多个, 只需重复上三行代码并更改一下域名、目录名 就OK了&lt;/IfModule&gt;在主机web目录上传.htaccess文件代码解说1：判断访问的域名RewriteCond %{HTTP_HOST} ^host1.tanxingcai.com$ [NC]代码解说2：根据判断的域名指向访问不同的文件夹或文件。RewriteRule ^$ /host1/强制跳转https景安虚拟为例，把自己的ssl证书三个文件上传到web根目录，开启一键ssl就ok了，然后删除证书host1如果放置的是tp框架,那么host1文件夹中.htaccess文件代码如下：12345678910&lt;IfModule mod_rewrite.c&gt;Options +FollowSymlinks -MultiviewsRewriteEngine onRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteRule ^(.*)$ index.php?s=$1 [QSA,PT,L]RewriteEngine OnRewriteCond %&#123;SERVER_PORT&#125; 80RewriteRule ^(.*)$ https://%&#123;SERVER_NAME&#125;/$1 [R,L]&lt;/IfModule&gt;OVER！！！]]></content>
      <categories>
        <category>虚拟主机</category>
      </categories>
      <tags>
        <tag>虚拟主机</tag>
        <tag>htaccess</tag>
        <tag>伪静态</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试笔记]]></title>
    <url>%2Ftest.html</url>
    <content type="text"><![CDATA[私密文章，请输入密码. Incorrect Password! No content to display! U2FsdGVkX1+1t7aWmuUuZlbdXKb97uqnZI6M2phblzKY8fMfUr2ueJNufBl/MUyA/87/GfcvR5Ok4Jy/C5h6vWSZOzvQMVu/emegG/oEyeAeHranjm+nsI/7Dfoe6oWaFXmqciFpbmr2Ox2pVaiYYuuzJQgACrEC1GObY4eqTcAK+8EbscCBCpDQJ5hGHQgjyYGx3M0qk+XXdv4Oi1tSZEhAJAHJYabuez4oFK4hxE9AJYEJMRkVz968HZPrfRx8v7CustIzKFfWSmtKu/q9SXOv+1R+c8eRYZoeiMiGUqLZ5yjXqm2BrrO8k+RhZH2oa8VT0yti7Zhkq1KVGr/AZJXbWjtjFOFpg+GpZ3zXEW1O9LkCiuYi3lWgQWkr7S8Gwfi3A8hQP74VzNLVe7W2uLV8AnsmcajtPZ3nS6jTb9KTWrQoFn/aJrDdocNjRDDJ26MCptoREvJ+t0Ntr8SwDNajizEq2EsHVc5uPHVcLkEzoPfNDiloXKfRCSOGXAqnP0YGmA5Yj1/fkdeJEbguhp34+6oa1gN8D7SL6w3/PrWhilSmHseT+QXrQLgz9X/S9dKfJX+5FpAXXJH877ZKcab+decOTTMTspUUxl19yQvfqLJcwUF/mxIhb88YWcr3PmyRZaMHPoSQHfQ0Eio8WF3PdMIJSqgDtCT2WpJmgp9m9VCWNciAD2kmP+D9u1Sa]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[navicat如何只导出数据表结构]]></title>
    <url>%2Fnavicat-1.html</url>
    <content type="text"><![CDATA[使用navicat如果只想导出数据表结构可以如下操作：1.右键数据库，点击“数据传输”2.弹出的窗口里左边可以选择需要导出的表，右边选择连接或文件（我要导出sql文件，所以我选的是文件）选择导出的位置。3.如果只是想导出表结构而不需要表的数据，那么点击“高级”–&gt;把“插入记录”前的勾去掉。如果需要导出数据，那么默认打勾就可以。4.点击开始完成任务。注：以上方法导出失败的可以在第二步右边选择连接，将表导入一个新的数据库，再导出这个新的数据库就可以了OVER！！！]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>navicat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown基本语法]]></title>
    <url>%2Fmarkdown.html</url>
    <content type="text"><![CDATA[使用atom编辑器如下简单实列：atom安装教程：https://blog.axiao.vip/atom.html一.标题示例：12345678# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题注：标准语法一般在#后跟个空格再写文字效果：这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题二.字体示例：1234**这是加粗的文字***这是倾斜的文字****这是斜体加粗的文字***~~这是加删除线的文字~~效果：这是加粗的文字这是倾斜的文字这是斜体加粗的文字这是加删除线的文字三.引用示例：123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容效果：这是引用的内容这是引用的内容这是引用的内容四.分割线示例：123456----------*****************注：三个或者三个以上的 - 或者 * 都可以效果：五.图片示例：1![杨超越](images/about/ycy.jpg &quot;ycy&quot;)效果：六.超链接示例：1234[阿小笔记](https://www.axiao.vip &quot;axbj&quot;)&lt;a href=&quot;https://www.axiao.vip&quot; target=&quot;_blank&quot;&gt;阿小笔记&lt;/a&gt;注：第二个新页面打开超链接效果：阿小笔记阿小笔记七.列表①无序列表示例：1234567- 列表1+ 列表2* 列表3注：1.无序列表用 - + * 任何一种都可以2.- + * 跟内容之间都要有一个空格效果：列表1列表2列表3②有序列表示例：1231.列表12.列表23.列表3效果：1.列表12.列表23.列表3八.表格示例：12345678910标题1111111111111111|标题2222222222|标题33333333333333:--:|:--:|:--:内容|内容|内容内容|内容|内容内容|内容|内容注：1.左右都加冒号是代表文字居中（hexo表格居中好像不管用）2.表格的上一行必须为空行，不然表格不生效。效果：标题1111111111111111标题2222222222标题33333333333333内容内容内容内容内容内容内容内容内容九.代码示例：123456789101.（单行代码）：`echo &apos;helloworld&apos;;`2.（多行代码）：(```)echo &apos;helloworld&apos;;echo &apos;helloworld&apos;;echo &apos;helloworld&apos;;(```)注：多行代码为了防止转译加的括号，务必去掉括号效果：echo &#39;helloworld&#39;;123echo 'helloworld';echo 'helloworld';echo 'helloworld';OVER！！！]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>atom</tag>
        <tag>Markdown</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客的安装以及提交托管到github和coding]]></title>
    <url>%2Fhexo-install.html</url>
    <content type="text"><![CDATA[准备环境1.下载git并安装，网盘链接：https://pan.baidu.com/s/1bHNo7-B_NMDoJgDhZZtaWw，提取码：swwt2.下载Nodejs并安装，网盘链接：https://pan.baidu.com/s/1uoCAHpwYD8SpxHrUdFfB8g，提取码：yg8c3.注册github账号，地址：https://github.com/4.注册coding账号，地址：https://dev.tencent.com/user?welcome安装hexo并初始化1.选择一个放置博客的目录，在目录中鼠标右键并点击git bash here2.按步骤输入以下命令：注：以下命令如果报&#39;bash:hexo /c/Users/axiao/AppData/Roaming/npm/hexo: No such file or directory&#39;的错误，请添加环境变量&#39;C:\Users\axiao\AppData\Roaming\npm\node_modules\hexo\bin\&#39;环境变量添加教程：https://blog.axiao.vip/git.html1npm install -g hexo-cli1hexo init1npm install1hexo server本地博客已经搭建好了，打开浏览器输入http://localhost:4000即可访问你的本地博客（命令行按ctrl c关闭本地博客浏览）。提交托管提交到github1.创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io2.修改_config.yml（在博客目录下）。文件末尾修改为：123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master3.安装hexo-deployer-git插件,输入以下命令1npm install hexo-deployer-git --save4.添加SSH公钥设置用户名称和邮件地址：12git config --global user.name &quot;username&quot;git config --global user.email &quot;username@example.com&quot;这里的username输入你的GitHub用户名，username@example.com输入你GitHub的邮箱，这样GitHub才能知道你是不是对应它的账户。添加SSH：1ssh-keygen -t rsa -C &quot;你注册github的邮箱地址&quot;然后一路按回车键，复制公钥内容（路径C:\Users\Administrator\.ssh\id_rsa.pub）,浏览器打开你的github个人资料，找到SSH keys,点击New SSH key,复制进去添加即可。测试是否添加成功，输入以下命令:12ssh -T git@github.comyes返回“You’ve successfully authenticated”即成功。5.推送博客到github,输入以下命令：12hexo ghexo d6.浏览器访问网址： https://&lt;Github账号名称&gt;.github.io7.绑定自定义域名（没有自己域名的这步可以省略）域名解析：类型选择为 CNAME；主机记录即域名前缀，自己定义；记录值填写为&lt;Github账号名称&gt;.github.io；解析线路，TTL 默认即可。仓库设置：打开博客仓库设置：https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings在GitHub Pages下，Custom domain填入解析的域名，点击save，下面还有个强制https选项，看你自己需求。8.在站点目录的source文件夹下，创建并打开CNAME.txt，写入你的域名（如blog.axiao.vip），保存，并重命名为CNAME，去掉后缀即可。同时提交到coding1.创建仓库， 仓库名为：&lt;Coding账号名称&gt;2.修改_config.yml（在博客目录下）。文件末尾修改为：123456789# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:- type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master- type: git repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git branch: master3.配置SSH公钥鉴于创建Github时，已经生成过公钥。可直接复制密钥文件内容（路径形如C:\Users\Administrator.ssh\id_rsa.pub）， 粘贴到coding新增公钥。 测试是否添加成功，输入以下命令:12ssh -T git@git.coding.netyes返回“你好，你已经通过 SSH 协议认证 Coding.net 服务”即成功。4.推送博客到coding,输入以下命令：12hexo ghexo d5.进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。6.浏览器访问网址： https://&lt;coding账号名称&gt;.coding.me7.绑定自定义域名（没有自己域名的这步可以省略）域名解析：添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me类型选择为 CNAME；主机记录即域名前缀，自己定义；记录值填写为&lt;coding账号名称&gt;.coding.me；解析线路，TTL 默认即可。添加 两条A 记录指向 192.30.252.153和192.30.252.154（这俩都是github的ip）类型选择为 A；主机记录即域名前缀，填写为@；记录值填写为192.30.252.153和192.30.252.154；解析线路，境外或谷歌。仓库设置：进入项目里『代码』页面，在『Pages 服务』设置页（https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings）中绑定自定义域名，下面还有个强制https选项，看你自己需求。（注：https证书申请出现错误时，可以先去域名解析那里关掉境外的解析，再次申请即可）8.重新提交代码到github和coding，命令如下：1hexo clean1hexo g1hexo d命令总结：1.hexo s 本地浏览器localhost:4000浏览，ctrl+c关闭命令。2.hexo g 本地生成public静态文件夹，服务器上传这个文件夹就是你的博客。3.hexo clean 删除本地public静态文件夹。4.hexo d 上传到github或者coding。OVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>coding</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo主题美化以及插件配置]]></title>
    <url>%2Fhexo-extend.html</url>
    <content type="text"><![CDATA[主题配置，以NexT主题为例主题配置一般包括：安装 NexT主题设定集成第三方服务设置「RSS」添加「标签」页面添加「分类」页面设置「字体」设置「代码高亮主题」侧边栏社交链接开启打赏功能设置友情链接腾讯公益404页面站点建立时间订阅微信公众号设置「动画效果」设置「背景动画」评论系统数据统计与分析内容分享服务搜索服务其他服务…等等以上配置文档写的很详细：文档地址主题美化大致四个配置文件：1.根目录配置文件_config.yml，地址根目录2.主题配置文件_config.yml，地址themes/next/3.用户自定义css样式，地址themes/next/source/css/_custom/custom.styl4.用户自定义博客首页页面内容，地址themes/next/layout/_layout.swig首页显示文章中你想展现的内容和图片方法1.标题中加入：123description: 阿小笔记博客地址：https://blog.axiao.vipphotos:- /images/about/about.jpg方法2: 使用标签&lt;!--more--&gt;截断的上面内容就是首页显示的文章内容添加背景图在themes/next/source/css/_custom/custom.styl中添加如下代码：1234567body&#123; background:url(/images/bg.jpg); background-size:cover; background-repeat:no-repeat; background-attachment:fixed; background-position:center;&#125;修改Logo字体在themes/next/source/css/_custom/custom.styl中添加如下代码：12345678@font-face &#123; font-family: Zitiming; src: url(&apos;/fonts/Zitiming.ttf&apos;);&#125;.site-title &#123; font-size: 40px !important; font-family: &apos;Zitiming&apos; !important;&#125;其中字体文件在themes/next/source/fonts目录下，里面有个.gitkeep的隐藏文件，打开写入你要保留的字体文件，比如我的是就是写入 Zitiming.ttf ，具体字库自己从网上下载即可。修改内容区域的宽度编辑主题的 source/css/_variables/custom.styl 文件，新增变量：12345// 修改成你期望的宽度$content-desktop = 700px// 当视窗超过 1600px 后的宽度$content-desktop-large = 900px网站标题栏背景颜色打开 themes/next/source/css/_custom/custom.styl ,在里面写下如下代码：123.site-meta &#123; background: $blue; //修改为自己喜欢的颜色&#125;自定义鼠标样式打开 themes/next/source/css/_custom/custom.styl ,在里面写下如下代码：1234567// 鼠标样式body &#123; cursor: url(/uploads/normal.cur), default;&#125;a &#123; cursor: url(/uploads/link.cur), pointer;&#125;修改访问URL路径默认情况下访问URL路径为：domain/2018/10/18/关于本站,修改为 domain/About/关于本站。 编辑 Hexo 站点下的_config.yml 文件，修改其中的 permalink字段：1permalink: :category/:title/博文置顶安装插件12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save然后在需要置顶的文章的Front-matter中加上top即可：123456---title: hexo主题美化以及插件配置tags:- hexotop: 10---设置置顶标志打开：/themes/*/layout/_macro/post.swig，，定位到&lt;div class=&quot;post-meta&quot;&gt;标签下，插入如下代码：12345&#123;% if post.top %&#125; &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125;主页文章添加边框阴影效果打开 themes/next/source/css/_custom/custom.styl ,向里面加代码:12345678// 主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125;显示当前浏览进度修改themes/next/_config.yml，把 false 改为 true：12345# Back to top in sidebarb2t: true# Scroll percent label in b2t buttonscrollpercent: true内容加载完毕后再加载动画script修改themes/next/_config.yml，motion字段的值设为 false创建分类页git输入以下命令：1$ hexo new page categories加入广告主要有两种：百度SSP和谷歌Adsense。方法类似：注册，复制广告代码部署到网站。新建 theme/next/layout/_custom/google_ad.swig，将 AdSense 上的代码粘贴进去头部。在 theme/next/layout/_custom/head.swig 中也粘贴一份每篇博客。在 theme/next/layout/post.swig 里中在希望看到的地方加上：1&#123;% include &apos;_custom/google_ad.swig&apos; %&#125;例如：在 &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &lt;/div&gt; 中间插入，总代码如下：123456&#123;% block content %&#125; &lt;div id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &#123;&#123; post_template.render(page) &#125;&#125; &#123;% include &apos;_custom/google_ad.swig&apos; %&#125; &lt;/div&gt;&#123;% endblock %&#125;搜索服务Local Search搜索，安装插件1$ npm install hexo-generator-searchdb --save编辑根目录配置文件，新增以下内容到任意位置：12345search: path: search.xml field: post format: html limit: 10000编辑 主题配置文件，启用本地搜索功能：123# Local searchlocal_search: enable: true鼠标点击桃心在/themes/next/source/js/schemes下新建文件click.js，接着把以下粘贴到click.js文件中。代码如下：1!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);在\themes\next\layout_layout.swig文件末尾添加：12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/schemes/clicklove.js&quot;&gt;&lt;/script&gt;文章加密安装插件：1npm install --save hexo-blog-encrypt在 根目录_config.yml 中添加：1234# Security##encrypt: enable: true在你的文章的头部添加上对应的字段，如 password, abstract, message123456789---title: hello worlddate: 2019-06-10 21:18:02tags:- hexo主题美化以及插件配置password: Mikeabstract: Welcome to my blog, enter password to read.message: Welcome to my blog, enter password to read.---引用远程图片,自动下载到本地并变成本地绝对路径安装命令：1npm i hexo-easy-images -s以下配置非必需，在 根目录_config.yml中添加：123456# Easy imageseasy_images: init: false # 默认 false；改为 true，将处理过去所有 post，通常装插件后第一次运行时使用。 cdn_prefix: null # 默认 null; 图片前缀，在生成 html 文件时为 image 添加前缀 max_width: 600 # 默认 null；设置图片最大宽度 max_height: null # 默认 null；设置图片最大高度图片点击全屏放大修改themes/next/_config.yml，fancybox字段的值设为 true插件地址：https://github.com/theme-next/theme-next-fancybox3移动端快速点击修改themes/next/_config.yml，fastclick字段的值设为 true插件地址：https://github.com/theme-next/theme-next-fastclickjquery懒加载修改themes/next/_config.yml，lazyload字段的值设为 true插件地址：https://github.com/theme-next/theme-next-jquery-lazyload博客底部加运行时间找到 \themes\next\layout\_partials\下面的footer.swig文件最下面加上如下代码：123456789101112131415161718192021222324252627282930313233343536&lt;span id=&quot;sitetime&quot;&gt;&lt;/span&gt;&lt;script language=javascript&gt; function siteTime()&#123; window.setTimeout(&quot;siteTime()&quot;, 1000); var seconds = 1000; var minutes = seconds * 60; var hours = minutes * 60; var days = hours * 24; var years = days * 365; var today = new Date(); var todayYear = today.getFullYear(); var todayMonth = today.getMonth()+1; var todayDate = today.getDate(); var todayHour = today.getHours(); var todayMinute = today.getMinutes(); var todaySecond = today.getSeconds(); /* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳) year - 作为date对象的年份，为4位年份值 month - 0-11之间的整数，做为date对象的月份 day - 1-31之间的整数，做为date对象的天数 hours - 0(午夜24点)-23之间的整数，做为date对象的小时数 minutes - 0-59之间的整数，做为date对象的分钟数 seconds - 0-59之间的整数，做为date对象的秒数 microseconds - 0-999之间的整数，做为date对象的毫秒数 */ var t1 = Date.UTC(2018,02,13,15,00,00); //北京时间2018-2-13 00:00:00 var t2 = Date.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond); var diff = t2-t1; var diffYears = Math.floor(diff/years); var diffDays = Math.floor((diff/days)-diffYears*365); var diffHours = Math.floor((diff-(diffYears*365+diffDays)*days)/hours); var diffMinutes = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours)/minutes); var diffSeconds = Math.floor((diff-(diffYears*365+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds); document.getElementById(&quot;sitetime&quot;).innerHTML=&quot; 已运行&quot;+/*diffYears+&quot; 年 &quot;+*/diffDays+&quot; 天 &quot;+diffHours+&quot; 小时 &quot;+diffMinutes+&quot; 分钟 &quot;+diffSeconds+&quot; 秒&quot;; &#125;/*因为建站时间还没有一年，就将之注释掉了。需要的可以取消*/ siteTime();&lt;/script&gt;友链的美化1.在themes/Next/layout/新建一个文件links.swig，其内容为以下代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&#123;% block content %&#125; &#123;######################&#125; &#123;### LINKS BLOCK ###&#125; &#123;######################&#125; &lt;div id=&quot;links&quot;&gt; &lt;style&gt; .links-content&#123; margin-top:1rem; &#125; .link-navigation::after &#123; content: &quot; &quot;; display: block; clear: both; &#125; .card &#123; width: 300px; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display:flex; &#125; .card:nth-child(odd) &#123; float: left; &#125; .card:nth-child(even) &#123; float: right; &#125; .card:hover &#123; transform: scale(1.1); box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); &#125; .card a &#123; border:none; &#125; .card .ava &#123; width: 3rem!important; height: 3rem!important; margin:0!important; margin-right: 1em!important; border-radius:4px; &#125; .card .card-header &#123; font-style: italic; overflow: hidden; width: 236px; &#125; .card .card-header a &#123; font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none; &#125; .card .card-header a:hover &#123; color: #d480aa; text-decoration: none; &#125; .card .card-header .info &#123; font-style:normal; color:#a3a3a3; font-size:14px; min-width: 0; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; &#125; &lt;/style&gt; &lt;div class=&quot;links-content&quot;&gt; &lt;div class=&quot;link-navigation&quot;&gt; &#123;% for link in theme.mylinks %&#125; &lt;div class=&quot;card&quot;&gt; &lt;img class=&quot;ava&quot; src=&quot;&#123;&#123; link.avatar &#125;&#125;&quot;/&gt; &lt;div class=&quot;card-header&quot;&gt; &lt;div&gt;&lt;a href=&quot;&#123;&#123; link.site &#125;&#125;&quot; target=&quot;_blank&quot;&gt;@ &#123;&#123; link.nickname &#125;&#125;&lt;/a&gt;&lt;/div&gt; &lt;div class=&quot;info&quot;&gt;&#123;&#123; link.info &#125;&#125;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;&#123; page.content &#125;&#125; &lt;/div&gt; &lt;/div&gt; &#123;##########################&#125; &#123;### END LINKS BLOCK ###&#125; &#123;##########################&#125;&#123;% endblock %&#125;2.修改themes/next/layout/page.swig，在1#&#125;&#123;&#123; __(&apos;title.schedule&apos;) + page_title_suffix &#125;&#125;&#123;#下方添加两行代码：12#&#125;&#123;% elif page.type === &apos;links&apos; and not page.title %&#125;&#123;# #&#125;&#123;&#123; __(&apos;title.links&apos;) + page_title_suffix &#125;&#125;&#123;#3.修改themes/next/layout/page.swig，在1&#123;% include &apos;schedule.swig&apos; %&#125;下方添加两行代码：12&#123;% elif page.type === &apos;links&apos; %&#125; &#123;% include &apos;links.swig&apos; %&#125;4.在主题配置文件themes/_config.yml末尾处添加友链：12345mylinks: - nickname: &apos;阿小影视&apos; #友链名称 avatar: &apos;/images/avatar.png&apos; #友链头像 site: &apos;http://axiao.vip&apos; #友链地址 info: &apos;影院热映，最新电视，一网看尽。&apos; #友链说明5.添加友链页面，输入命令：1hexo new page links然后在source/links/index.md中title下面加上type: &#39;links&#39;6.主题配置文件，找到menu添加12345menu: home: / || home categories: /categories/ || th tags: /tags/ || tags links: /links/ || link7.themes/next/languages/zh-CN.yml中添加12345menu: home: 首页 categories: 分类 tags: 标签 links: 友链压缩代码安装命令：1npm install hexo-neat --save然后我们在博客的根目录下的_config.xml下末尾添加：12345678910111213141516171819202122# hexo-neat# 博文压缩neat_enable: true# 压缩htmlneat_html: enable: true exclude:# 压缩css neat_css: enable: true exclude: - &apos;**/*.min.css&apos;# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - &apos;**/*.min.js&apos; # 代表已经压缩的js文件 - &apos;**/jquery.fancybox.pack.js&apos; # 代表不想被压缩的js文件 - &apos;**/click.js&apos;注：压缩可能会使部分js失效，如click.js点击桃心效果的js，只要添加到上面的exclude下面即可OVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git上传代码基本操作]]></title>
    <url>%2Fgit.html</url>
    <content type="text"><![CDATA[git提交代码的基本使用一.安装1.下载安装网盘链接：https://pan.baidu.com/s/1bHNo7-B_NMDoJgDhZZtaWw，提取码：swwt2.配置环境变量右键计算机-属性-高级-环境变量如下图：点击path如下图：点击新建写入git安装的bin目录地址,点击确定即可。3.测试是否安装成功鼠标右键git bash here，输入以下命令查看版本1$ git --version二.克隆远程库1.复制远程仓库地址，例如复制github新建的仓库地址2.克隆在要放置仓库的目录鼠标右键git bash here输入以下命令进行克隆1$ git clone [远程仓库地址]注：要克隆远程仓库必须是你在这个项目中，就是项目所有者（管理员）把你添加进这个项目成员。输入克隆的指令后，如果是第一次使用会提示你输入用户名，和密码。三.创建初始化代码库使用git命令1$ git init注：此步操作完成后，会在此文件夹下生成一个隐藏的.git后缀文件四.提交推送代码1.关联远程库1$ git remote add origin [远程库地址]2.提交本地代码到本地仓库的暂存区1$ git add .3.提交本地代码到本地仓库，并附上提交说明1$ git commit -m &apos;[提交说明]&apos;4.推送到远程库1$ git push origin master注：如果出现错误（可能文件已存在），可以直接用-f（强制推送），命令如下1$ git push -f origin masterOVER！！！]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>coding</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[atom插件安装教程以及推荐]]></title>
    <url>%2Fatom.html</url>
    <content type="text"><![CDATA[写博客常用的一款markdown编辑器一.首先去官网下载atom软件并安装，请点击官网链接二.安装插件以汉化插件为例进行安装，步骤如下：1.汉化插件的名字为simplified-chinese-menu,则将其放到地址https://atom.io/packages/后面在浏览器打开。2.如下图所示，点击箭头指示的repo，跳转到github进行下载。3.下载完解压到atom的插件目录（一般都在c盘，以用我的为例）C:\Users\axiao\.atom\packages。4.下载nodejs并进行安装，安装完后打开cmd命令窗口，cd到C:\Users\axiao\.atom\packages\atom-simplified-chinese-menu-master这个汉化插件目录，输入命令npm install进行安装即可。三。插件推荐常用插件：1.simplified-chinese-menu(汉化插件)2.file-icons(文件图标美化)3.atom-beautify(代码格式一键美化)4.last-cursor-position(光标自由切换到上一次/下一次编辑位置)5.minimap(代码小地图)6.activate-power-mode(输入时有震撼效果)7.tortoise-svn(svn插件)8.atom-terminal-panel(atom内置命令行工具)9.markdown-preview-plus(markdown预览)10.vim-mode(支持vim模式)11.browser-plus(编辑器内置浏览器 )12.advanced-open-file(快速的打开文件或新建文件，同时支持路径补全)13.quick-highlight(代码高亮)14.platformio-ide-terminal(终端工具 )15.linter(代码校验工具)前端插件:1.emmet(web快速开发必备插件)2.color-picker(在编辑器里面挑选颜色)3.language-JavaScript-jsx(支持JSX语法)4.atom-html-preview(实时预览HTML页面)5.React(react—语法支持)6.atom-minify(css、js代码压缩)7.atom-ternjs(js,nodejs,es6补全，高度定制化)8.jshint(验证js和jsx语法是否正确)9.csslint(验证css语法是否正确)10.autoprefixer(自动为 CSS 属性添加特定的前缀)11.autoclose-html(闭合html标签)12.pigments(颜色显示插件)php插件:1.autocomplete-php(php代码自动补全)2.php-cs-fixer(php语法检查)3.php-debug(php debug)4.php-class-tree(php类文件下函数展示)python插件:1.autocomplete-python(python代码自动补全)2.python-debugger(python debug)3.linter-pep8(python编码规范检查)4.python-tools(跳转插件)以上插件好多在新的atom版本中以自带，可以根据自己需求安装，以下是我现在使用的几款插件和效果图展示，如下图所示：我的安装包和插件包网盘地址：https://pan.baidu.com/s/1oJ53jNP-aRyKRR-uuebCvw，提取码：rj0p设置背景图片快捷键ctrl+shift+eOVER！！！]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
      <tags>
        <tag>atom</tag>
        <tag>Markdown</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客搬移到另一台电脑上操作教程]]></title>
    <url>%2Fhexo-extend-2.html</url>
    <content type="text"><![CDATA[安装环境git,nodejs下载并安装好.安装Hexo注：以下命令如果报&#39;bash:hexo /c/Users/axiao/AppData/Roaming/npm/hexo: No such file or directory&#39;的错误，请添加环境变量&#39;C:\Users\axiao\AppData\Roaming\npm\node_modules\hexo\bin\&#39;环境变量添加教程：https://blog.axiao.vip/git.html1npm install -g hexo-cli1hexo init源文件拷贝将原来博客内的目录拷贝下来，需要拷贝的有：1._config.yml2.package.json3.scaffolds/4.source/5.themes/安装npm和一些模块123456npm installnpm install hexo-deployer-git --save // 文章部署到 git 的模块（下面为选择安装）npm install hexo-generator-feed --save // 建立 RSS 订阅npm install hexo-generator-sitemap --save // 建立站点地图npm install hexo-generator-baidu-sitemap --save // 建立百度站点地图添加SSH公钥设置用户名称和邮件地址：12git config --global user.name &quot;username&quot;git config --global user.email &quot;username@example.com&quot;这里的username输入你的GitHub用户名，username@example.com输入你GitHub的邮箱，这样GitHub才能知道你是不是对应它的账户。添加SSH：1ssh-keygen -t rsa -C &quot;你注册github的邮箱地址&quot;然后一路按回车键，复制公钥内容（路径C:\Users\Administrator\.ssh\id_rsa.pub）,浏览器打开你的github个人资料，找到SSH keys,点击New SSH key,复制进去添加即可。测试是否添加成功，输入以下命令:12ssh -T git@github.comyes返回“You’ve successfully authenticated”即成功。推送博客到github,输入以下命令：12hexo ghexo dOVER！！！]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>coding</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
